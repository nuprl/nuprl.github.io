<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>PRL Blog: Posts tagged 'by Ben Greenman'</title>
  <description>PRL Blog: Posts tagged 'by Ben Greenman'</description>
  <link>http://prl.ccs.neu.edu/blog/tags/by-Ben-Greenman.html</link>
  <lastBuildDate>Sun, 07 Apr 2019 23:15:11 UT</lastBuildDate>
  <pubDate>Sun, 07 Apr 2019 23:15:11 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>Forgetful and Heedful contracts</title>
   <link>http://prl.ccs.neu.edu/blog/2019/04/07/forgetful-and-heedful-contracts/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2019-04-07-forgetful-and-heedful-contracts</guid>
   <pubDate>Sun, 07 Apr 2019 23:15:11 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;&lt;em&gt;Forgetful&lt;/em&gt; and &lt;em&gt;heedful&lt;/em&gt; are two methods for space-efficient contracts  developed by &lt;a href="http://www.cs.pomona.edu/~michael/"&gt;Michael Greenberg&lt;/a&gt; in &lt;a href="https://arxiv.org/abs/1410.2813"&gt;2014&lt;/a&gt;. These methods were born in the shadow of a third method, &lt;em&gt;eidetic&lt;/em&gt;,  with stronger theoretic properties. Since then, however, the forgetful method has been re-invented at least twice. Both deserve a second look.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;hr /&gt;

&lt;p&gt;Contracts are a tool for specifying and dynamically-enforcing the behavior  of a program. In a language with contracts, a programmer can annotate an API with  code that documents the intended use for other readers. When client code interacts with such an API, the annotations ensure that the  actual behavior matches the expected. If there is a mismatch, the contract annotations can report an issue  in terms of &lt;a href="https://www2.ccs.neu.edu/racket/pubs/popl11-dfff.pdf"&gt;three parties&lt;/a&gt;:  the API code, the client code, and the contract between them.&lt;/p&gt;

&lt;p&gt;For example, a Racket module that exports a sorting function can use a contract  to describe the kind of input it expects. If a client module sends invalid input, the contract blames the client  module for the error, assuming that the contract is bug-free:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #lang racket/base

  (module sort racket
    (provide
      (contract-out
        [quicksort
          (-&amp;gt; (vectorof point/c) void?)]))

    (define point/c (vectorof integer?))

    (define (quicksort points)
      ....))

  (module client racket
    (require (submod ".." sort))
    (quicksort '()))

  (require 'client)&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;quicksort: contract violation;
 expected a vector
  given: '()
  in: the 1st argument of
      (-&amp;gt; (vectorof (vectorof integer?)) void?)
  contract from: 
      (file.rkt sort)
  blaming: (file.rkt client)
   (assuming the contract is correct)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That covers the basics. For an extended introduction to contracts, visit  &lt;a href="https://docs.racket-lang.org/guide/contracts.html"&gt;The Racket Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The quicksort example and the related figures are from the paper  &lt;a href="http://users.cs.northwestern.edu/~robby/pubs/papers/oopsla2018-fgsfs.pdf"&gt;&lt;em&gt;Collapsible Contracts: Fixing a Pathology of Gradual Typing&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="classic-contracts-and-space-efficiency"&gt;Classic contracts and &amp;ldquo;Space Efficiency&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;(vectorof point/c)&lt;/code&gt; contract used above describes a possibly-mutable  array whose elements match the &lt;code&gt;point/c&lt;/code&gt; contract. Since the array can be mutated, this contract has implications for two parties:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;the client module must supply a good array, and&lt;/li&gt;
 &lt;li&gt;the sorting module must not insert a bad element.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;To enforce the second condition, the &lt;code&gt;vectorof&lt;/code&gt; contract wraps incoming  vectors in a proxy that checks future writes. Suppose the client sends a vector with four points:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(quicksort (vector (vector 4 4)
                   (vector 2 2)
                   (vector 1 1)
                   (vector 3 3)))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After applying the contract, the vector is wrapped in a proxy that checks  incoming writes and outgoing reads. The following picture illustrates the wrapper with a &lt;strong&gt;solid&lt;/strong&gt; blue bar  for the &lt;strong&gt;write&lt;/strong&gt; checks against the sort module and a &lt;em&gt;striped&lt;/em&gt; blue bar  for the &lt;em&gt;read&lt;/em&gt; checks against the client.&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/vector-chaperone-0.png" alt="A wrapped vector" /&gt;&lt;/p&gt;

&lt;p&gt;In a straightforward implementation, these wrappers can stack up if multiple  contracts are applied to the same value. For our quicksort in particular, the elements of the vector are mutable  vectors and may accumulate wrappers as the vector is sorted &amp;mdash;  because every &lt;strong&gt;write&lt;/strong&gt; and &lt;em&gt;read&lt;/em&gt; applies a contract to the element.&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/vector-chaperone-1.png" alt="Layers of element wrappers" /&gt;&lt;/p&gt;

&lt;p&gt;On the bright side, these wrappers enforce the contracts and help the  programmer understand the source of the error if any contract is violated.&lt;/p&gt;

&lt;p&gt;Unfortunately, the wrappers also affect the performance of the program. There are prices to pay for:  (1) checking values against the contracts,  (2) allocating new wrappers,  (3) and &amp;ldquo;indirecting&amp;rdquo; future writes/reads through wrappers. These space and time costs can add up.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;&amp;ldquo;on a randomly ordered vector of 1,000 points, a call to quicksort can wrap the inner vectors an average of 21 times&amp;rdquo; &amp;mdash; &lt;a href="http://users.cs.northwestern.edu/~robby/pubs/papers/oopsla2018-fgsfs.pdf"&gt;&lt;em&gt;Collapsible Contracts&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To fix the problem, researchers have been exploring &lt;em&gt;space-efficient&lt;/em&gt;  implementations of contracts that attach a bounded number of wrappers to any  value. Michael Greenberg is one of these researchers, and &lt;em&gt;eidetic&lt;/em&gt;, &lt;em&gt;forgetful&lt;/em&gt;,  and &lt;em&gt;heedful&lt;/em&gt; are his names for three implementations.&lt;/p&gt;

&lt;p&gt;(Although the goal of this post is to promote &lt;em&gt;forgetful&lt;/em&gt; and &lt;em&gt;heedful&lt;/em&gt;,  we will review all three.)&lt;/p&gt;

&lt;h3 id="eidetic-space-efficiency"&gt;Eidetic space-efficiency&lt;/h3&gt;

&lt;p&gt;The eidetic method introduces a data structure to represent higher-order  contracts. The structure supports a &lt;em&gt;merge&lt;/em&gt; operation;  when two contracts meet, they are merged in a way that avoids duplication. Eidetic contracts have the same behavior as normal &amp;ldquo;wrapping&amp;rdquo; contracts  and their size is bounded by the number (and height) of source-code  contracts in the program.&lt;/p&gt;

&lt;p&gt;An eidetic contract is an &lt;code&gt;N&lt;/code&gt;-ary tree (for &lt;code&gt;N &amp;gt; 0&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;each node represents a higher-order contract combinator, such as &lt;code&gt;vectorof&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;the &lt;code&gt;N&lt;/code&gt; children of a node represent the different interactions that the  value supports&lt;/li&gt;
 &lt;li&gt;each leaf is a list of non-higher-order, or &lt;em&gt;flat&lt;/em&gt;, contracts&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;For example, the &lt;code&gt;(vectorof point/c)&lt;/code&gt; source-code contract describes an  eidetic tree with 3 nodes and 4 singleton-list leaves. Section 3.1 of the &lt;a href="http://users.cs.northwestern.edu/~robby/pubs/papers/oopsla2018-fgsfs.pdf"&gt;Collapsible Contracts&lt;/a&gt; paper has an illustration. Each tree node represents a &lt;code&gt;vectorof&lt;/code&gt; contract;  these nodes have &lt;code&gt;N=2&lt;/code&gt; children because vectors support reads and writes.&lt;/p&gt;

&lt;p&gt;A successful merge combines two trees of the same shape  by re-using half the nodes  and appending the leaf lists. Re-using nodes saves some space, and helps reduce the overhead of trees  relative to simple wrapping contracts. The main savings comes from filtering the leaf lists &amp;mdash; if an  implementation comes with a &lt;code&gt;contract-stronger?&lt;/code&gt; predicate that tests  whether one flat contract accepts fewer values than a second, then it  can remove leaf-list contracts that are preceded by stronger ones. Trees make this filtering possible.&lt;/p&gt;

&lt;p&gt;Suffice to say, eidetic is an ideal solution in theory but comes with  practical challenges. Are trees more expensive than wrappers in the common case? Can the leaf-lists in a tree share elements? Should &lt;code&gt;contract-stronger?&lt;/code&gt; try to solve problems that lack polynomial-time  solutions?&lt;/p&gt;

&lt;p&gt;Thankfully, there are at least two &amp;ldquo;compromise&amp;rdquo; alternatives.&lt;/p&gt;

&lt;h3 id="forgetful-space-efficiency"&gt;Forgetful space-efficiency&lt;/h3&gt;
&lt;!-- "no operation relies on e being a T2, skipping the check doesn't risk soundness" p.12--&gt;
&lt;!-- "In forgetful \lambda_H, we offer a simple solution to space inefficient casts: just forget about them" p.11--&gt;
&lt;!-- "Just the same, when accumulating casts on the stack, we throw away all but the last cast" p.11--&gt;
&lt;!-- "forgetful ... skip[s] checks and change[s] blame labels" p.3--&gt;

&lt;blockquote&gt;
 &lt;p&gt;&amp;ldquo;Forgetful is an interesting middle ground: if contracts exist to make partial operations safe (and not abstraction or information hiding), forgetfulness may be a good strategy.&amp;rdquo; &amp;mdash; &lt;a href="https://arxiv.org/abs/1410.2813"&gt;&lt;em&gt;Space-Efficient Manifest Contracts&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;!-- Section 10, bottom of page 23--&gt;&lt;/blockquote&gt;

&lt;p&gt;The forgetful method is exceptionally simple. When applying a new contract to a value, first check whether it is  wrapped in a similar contract. If so, then replace the existing wrapper with one that combines:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;the client obligations from the old contract, and&lt;/li&gt;
 &lt;li&gt;the server obligations from the new contract&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;If not, proceed as usual &amp;mdash; by wrapping (an unwrapped value)  or raising an error. Every value receives at most &lt;strong&gt;one&lt;/strong&gt; wrapper;  this wrapper changes as the value flows to different clients.&lt;/p&gt;

&lt;p&gt;Forgetful is safe in the sense that every piece of code can trust the  top-level shape of the values it receives. Suppose module &lt;code&gt;A&lt;/code&gt; exports a function &lt;code&gt;f&lt;/code&gt; with contract &lt;code&gt;(-&amp;gt; T1 T2)&lt;/code&gt; to  module &lt;code&gt;B&lt;/code&gt;, and suppose module &lt;code&gt;B&lt;/code&gt; shares this function with a few other  client modules using different contracts. As &lt;code&gt;f&lt;/code&gt; flows to a new client, it keeps the &lt;code&gt;T1&lt;/code&gt; domain check and gets a  replacement for the &lt;code&gt;T2&lt;/code&gt; codomain check.&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Keeping &lt;code&gt;T1&lt;/code&gt; ensures that the code inside the function  (defined by module &lt;code&gt;A&lt;/code&gt;) receives input that matches its expectation.&lt;/li&gt;
 &lt;li&gt;Replacing &lt;code&gt;T2&lt;/code&gt; ensures that each new client receives output that it expects.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Unfortunately, replacing &lt;code&gt;T2&lt;/code&gt; also means that clients of module &lt;code&gt;B&lt;/code&gt; cannot  trust the &lt;code&gt;T2&lt;/code&gt; contract. This contract is not checked, and so forgetful contracts &lt;strong&gt;miss&lt;/strong&gt; some  errors that would be caught by standard contracts. For the same reason, a bug in module &lt;code&gt;B&lt;/code&gt; may go undetected by its clients  &amp;mdash; even if a later contract reports an issue, the contract system has  no memory that &lt;code&gt;B&lt;/code&gt; was partly-responsible.&lt;/p&gt;

&lt;p&gt;Despite these changes in behavior, forgetful is a straightforward  method for saving space and time relative to classic contracts.&lt;/p&gt;

&lt;h3 id="heedful-space-efficiency"&gt;Heedful space-efficiency&lt;/h3&gt;

&lt;p&gt;A heedful contract is a set of classic higher-order contracts. When applying a new contract to a value, check whether the new contract  is in the set. If so, ignore the new contract. If not, add the new contract to the set &amp;mdash; or raise an error. Every value gets at most one set-wrapper, and each member of a set-wrapper  represents a new constraint.&lt;/p&gt;

&lt;p&gt;To check a value against a set, for example when reading from a vector, check  each of the elements in any order. If an element raises an error, report it.* Alternatively, an implementation can check all the elements and report  all that disagree with the value.&lt;/p&gt;

&lt;p&gt;The heedful method is a compromise between forgetful and eidetic.&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;Unlike forgetful, heedful uses a new data structure to represent contacts  and requires some kind of &lt;code&gt;contract-stronger?&lt;/code&gt; predicate.  Heedful also remembers (some of) the history of a value and catches the  same errors as classic and eidetic contracts.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;Unlike eidetic, heedful uses a simpler data structure with  no need to keep duplicate flat contracts  depending on the order they are encountered.  Heedful cannot, however, uniquely identify the two parties involved in a  contract error.  In general, there are multiple contracts that a programmer  must inspect to find the source of a mismatch.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;For details, see &lt;a href="https://arxiv.org/abs/1410.2813"&gt;the extended version&lt;/a&gt;  of Michael&amp;rsquo;s POPL 2015 paper. Don&amp;rsquo;t bother searching &lt;a href="http://www.cs.pomona.edu/~michael/papers/popl2015_space.pdf"&gt;the conference version&lt;/a&gt;  &amp;mdash; aside from one remark  in Appendix B, heedful and forgetful are nowhere to be found.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*&lt;/code&gt; If an implementation promises to report one mismatch, instead of all  mismatches, then it does not need to keep the full set of contracts. Thanks to &lt;a href="http://mballantyne.net/"&gt;Michael Ballantyne&lt;/a&gt; for explaining  this to me.&lt;/p&gt;

&lt;h3 id="priorities-and-appearances"&gt;Priorities and Appearances&lt;/h3&gt;

&lt;p&gt;The extended version of &lt;em&gt;Space-Efficient Manifest Contracts&lt;/em&gt; introduces  the forgetful and heedful methods with extreme modesty. It&amp;rsquo;s tempting to skip past them and focus on the eidetic method.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;&amp;ldquo;Since eidetic and classic contracts behave the same, why bother with forgetful and heedful? First and foremost, the calculi offer insights into the semantics of contracts: the soundness of forgetful depends on a certain philosophy of contracts; heedful relates to threesomes without blame [&lt;a href="https://dl.acm.org/citation.cfm?doid=1706299.1706342"&gt;Siek and Wadler 2010&lt;/a&gt;]. Second, we offer them as alternative points in the design space. Finally and perhaps cynically, they are strawmen&amp;mdash;warm up exercises for eidetic.&amp;rdquo; &amp;mdash; &lt;a href="https://arxiv.org/abs/1410.2813"&gt;&lt;em&gt;Space-Efficient Manifest Contracts&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;!-- Section 1, bottom of page 2--&gt;&lt;/blockquote&gt;

&lt;p&gt;And yet, at least two other research papers rely on these &amp;ldquo;strawmen&amp;rdquo; &amp;mdash; or  rather, the ideas behind the names.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dl.acm.org/citation.cfm?id=3110285"&gt;&lt;em&gt;Gradual Typing with Union and Intersection Types&lt;/em&gt;&lt;/a&gt;,  at ICFP 2017,  demonstrates one technique for adding two varieties of types to a gradual  language. The semantics in the paper is forgetful;  if a higher-order value crosses multiple type boundaries,  the intermediate server obligations disappear.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;&amp;ldquo;if a lambda abstraction is preceded by multiple casts, then the rule erases all of them, except for the last one&amp;rdquo; &amp;mdash; &lt;a href="https://dl.acm.org/citation.cfm?id=3110285"&gt;&lt;em&gt;Gradual Typing with Union and Intersection Types&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;!-- page 21--&gt;&lt;/blockquote&gt;

&lt;p&gt;This forgetfulness was a deliberate choice. A classic semantics would satisfy the same type soundness theorem,  but the authors picked forgetful for its simplicity and performance  implications.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;&amp;ldquo;removing these casts preserves the soundness of the evaluation while reducing the number of them&amp;rdquo;&lt;/p&gt;
 &lt;p&gt;&amp;ldquo;while this choice makes the calculus simpler without hindering soundness, it yields a formalism unfit to finger culprits&amp;rdquo; &amp;mdash; &lt;a href="https://dl.acm.org/citation.cfm?id=3110285"&gt;&lt;em&gt;Gradual Typing with Union and Intersection Types&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;!-- p.27--&gt;&lt;!-- page 21--&gt;&lt;/blockquote&gt;
&lt;!-- The followup at POPL 2019 is not forgetful.--&gt;
&lt;!-- It's similar to eager coercions ... keep all types around and error--&gt;
&lt;!--  if there's a new type that doesn't match the old ones.--&gt;
&lt;!-- Also, that paper chooses not to let functions have intersection types,--&gt;
&lt;!--  which kind-of-avoids the questions ... but really the eagerness is key.--&gt;

&lt;p&gt;&lt;a href="https://dl.acm.org/citation.cfm?id=3009849"&gt;&lt;em&gt;Big Types in Little Runtime&lt;/em&gt;&lt;/a&gt;, at POPL 2017,  presents a gradual typing system that avoids the use of wrappers. Instead, their &lt;em&gt;transient&lt;/em&gt; semantics rewrites typed code ahead of time  to mimic the checks that forgetful contracts would perform. These checks suffice for a shallow type soundness theorem.&lt;/p&gt;

&lt;p&gt;That paper also introduces a heedful-like strategy for improving the error  messages produced by a forgetful check. The strategy adds a global map to the semantics;  keys in the map are unique identifiers for values (heap addresses),  and values are sets of types. When a value meets a compatible type, the type is added to the value&amp;rsquo;s set. When a mismatch occurs, the semantics &lt;a href="https://www.ccs.neu.edu/home/types/resources/notes/transient-undefined-blame-extract.pdf"&gt;tries to report&lt;/a&gt;  every type in the set that relates to the mismatch.&lt;/p&gt;

&lt;p&gt;And so, forgetful and heedful were edged out of POPL 2015 but managed to sneak in  to POPL 2017. Since then, forgetful appeared in ICFP 2017 and, briefly, in  &lt;a href="https://www2.ccs.neu.edu/racket/pubs/icfp18-gf.pdf"&gt;ICFP 2018&lt;/a&gt;. Where will we see them next?&lt;/p&gt;</description></item>
  <item>
   <title>Writing a paper with Scribble</title>
   <link>http://prl.ccs.neu.edu/blog/2019/02/17/writing-a-paper-with-scribble/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2019-02-17-writing-a-paper-with-scribble</guid>
   <pubDate>Sun, 17 Feb 2019 16:20:50 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;This post explains how to get started using Scribble to write a research paper.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
 &lt;p&gt;This post was written using &lt;a href="http://download.racket-lang.org/all-versions.html"&gt;Racket 7.1&lt;/a&gt; and &lt;a href="https://github.com/racket/scribble/releases/tag/v7.1"&gt;Scribble 1.29&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Writing about research is always difficult,  but a compile-to-LaTeX tool can make the task easier. If your research code is written in the same language as the paper, then:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;the paper can import definitions from the research,  keeping a single point of control;&lt;/li&gt;
 &lt;li&gt;the language&amp;rsquo;s functional abstractions can help manage the writing;&lt;/li&gt;
 &lt;li&gt;the language&amp;rsquo;s drawing and/or plotting libraries can replace &lt;a href="https://ctan.org/pkg/pgf?lang=en"&gt;TikZ&lt;/a&gt;;&lt;/li&gt;
 &lt;li&gt;and you can write unit tests to validate the claims made in the paper.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Scribble, &lt;a href="http://docs.racket-lang.org/scribble/index.html"&gt;the Racket documentation tool&lt;/a&gt;,  comes with a to-LaTeX compiler and a &lt;a href="&amp;lt;http://docs.racket-lang.org/scribble/ACM_Paper_Format.html&amp;gt;"&gt;scribble/acmart&lt;/a&gt;  library tailored to the new &lt;a href="https://ctan.org/pkg/acmart?lang=en"&gt;ACM paper format&lt;/a&gt;. I have been a pretty happy user of these tools. In the interest of attracting more happy users, this post  presents a short &amp;ldquo;getting started&amp;rdquo; guide  and links to some larger examples.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;For a Scribble tutorial, see the links in: &lt;a href="/blog/2017/05/23/building-a-website-with-scribble/index.html"&gt;Building a Website with Scribble&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="getting-started-with-"&gt;Getting started with &lt;a href="&amp;lt;http://docs.racket-lang.org/scribble/ACM_Paper_Format.html&amp;gt;"&gt;scribble/acmart&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;The first line of a &lt;a href="&amp;lt;http://docs.racket-lang.org/scribble/ACM_Paper_Format.html&amp;gt;"&gt;scribble/acmart&lt;/a&gt; document sets the formatting options (similar to a LaTeX file using &lt;code&gt;acmart.cls&lt;/code&gt;). For example, the &lt;a href="https://conf.researchr.org/track/gpce-2018/gpce-2018#Call-for-Papers"&gt;GPCE 2018 call for papers&lt;/a&gt;  asks for anonymized &lt;code&gt;sigplan&lt;/code&gt;-format submissions with line numbers and 10 point font. The proper Scribble incantation is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#lang scribble/acmart @sigplan @anonymous @review @10pt&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, you may want to import some definitions. If we have a file &lt;code&gt;references.rkt&lt;/code&gt; (see below for a definition), we can import it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@require{references.rkt}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The third main ingredient is the title and author information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@(define neu (affiliation #:institution "Northeastern University"))
@(define anon (email "anon@anon.net"))

@title{Writing a paper with Scribble}
@author[#:affiliation neu #:email anon]{Ben Greenman}

@; optional: set the author names in the page headers
@elem[#:style "Sshortauthors"]{B. Greenman}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The paper is now ready to be written. You can forge ahead with a new &lt;a href="http://docs.racket-lang.org/scribble/base.html#%28def._%28%28lib._scribble%2Fbase..rkt%29._section%29%29"&gt;section&lt;/a&gt;  and start adding content to the same file;  alternatively, you can organize the writing across different modules. In this post, we will use the main document as an outline and &lt;a href="http://docs.racket-lang.org/scribble/base.html#%28form._%28%28lib._scribble%2Fbase..rkt%29._include-section%29%29"&gt;import&lt;/a&gt;  content from other modules:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@include-abstract{abstract.scrbl}
@include-section{introduction.scrbl}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, the main page is a good place to &lt;a href="https://docs.racket-lang.org/scriblib/autobib.html"&gt;generate the bibliography&lt;/a&gt;. Assuming this document imports a file like the &lt;code&gt;references.rkt&lt;/code&gt; below,  this expression inserts a bibliography titled &amp;ldquo;References&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@generate-bibliography[#:sec-title "References"]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To build the document, invoke &lt;code&gt;scribble&lt;/code&gt; on the command-line with the &lt;code&gt;--pdf&lt;/code&gt; or &lt;code&gt;--latex&lt;/code&gt;  options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ raco scribble --pdf FILE.scrbl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all goes well, this command generates a &lt;code&gt;FILE.pdf&lt;/code&gt; with properly-linked cross references.&lt;/p&gt;

&lt;h3 id="auxiliary-files"&gt;Auxiliary Files&lt;/h3&gt;

&lt;p&gt;If you save the code above to a file &lt;code&gt;example.scrbl&lt;/code&gt; and save the files below  in the same directory, then you should be able to build an &lt;code&gt;example.pdf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These files are available in a slightly different format at this link:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://gitlab.com/bengreenman/scribble-acmart-example"&gt;https://gitlab.com/bengreenman/scribble-acmart-example&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h4 id="referencesrkt"&gt;&lt;code&gt;references.rkt&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#lang racket/base

(provide
  ~cite citet generate-bibliography
  fbf-icfp-2009)

(require
  scriblib/autobib)

(define-cite ~cite citet generate-bibliography
  #:style author+date-square-bracket-style)

(define icfp "ICFP")

(define fbf-icfp-2009
  (make-bib
    #:title "Scribble: Closing the Book on Ad Hoc Documentation Tools"
    #:author (authors "Matthew Flatt" "Eli Barzilay" "Robert Bruce Findler")
    #:location (proceedings-location icfp #:pages '(109 120))
    #:date 2017))&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="abstractscrbl"&gt;&lt;code&gt;abstract.scrbl&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#lang scribble/acmart

A simple Scribble document.&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="introductionscrbl"&gt;&lt;code&gt;introduction.scrbl&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#lang scribble/acmart
@require{references.rkt}

@; start with `title` instead of `section`, because importing via
@;  `include-section` shifts all title/section/subsections down one level
@title{Introduction}

Scribble creates a connection between a stand-alone document and the artifact
it describes@~cite[fbf-icfp-2009].&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q-how-to-debug-scribble-error-messages"&gt;Q. How to debug Scribble error messages?&lt;/h3&gt;

&lt;p&gt;If something goes wrong building a Scribble document, Racket is usually able to give a helpful error message.&lt;/p&gt;

&lt;p&gt;As a compile-time example, adding &lt;code&gt;@ foo&lt;/code&gt; to a document produces the message  &lt;code&gt;unexpected whitespace after @&lt;/code&gt; and you can either delete the whitespace  or change the &lt;code&gt;@&lt;/code&gt; to &lt;code&gt;@"@"&lt;/code&gt; for a literal &lt;code&gt;@&lt;/code&gt;-sign.&lt;/p&gt;

&lt;p&gt;As a run-time example, adding &lt;code&gt;@(+ 2 2)&lt;/code&gt; produces this message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;not valid in document body (need a pre-part for decode) in: 4&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One fix is to convert &lt;code&gt;4&lt;/code&gt; to a string, as in &lt;code&gt;@~a[(+ 2 2)]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But if something goes wrong when Scribble renders a generated document to  PDF, the default error output is &lt;strong&gt;not&lt;/strong&gt; likely to help. For example, adding &lt;code&gt;@elem[#:style "oops"]&lt;/code&gt; to a document produces a giant  message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ raco scribble --pdf FILE.scrbl
[[ ... 84K of output ... ]]
Output written on example.pdf (1 page, 277876 bytes).
PDF statistics:
 53 PDF objects out of 1000 (max. 8388607)
 37 compressed objects within 1 object stream
 7 named destinations out of 1000 (max. 500000)
 36877 words of extra memory for PDF output out of 42996 (max. 10000000)

run-pdflatex: got error exit code
  context...:
  [[ ... 17 more lines ... ]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The best way to debug these messages is to &lt;strong&gt;ignore them&lt;/strong&gt; and use a LaTeX  compiler directly. For the &amp;ldquo;oops&amp;rdquo; mistake, LaTeX stops at the undefined control sequence &amp;mdash; giving  a hint about how to find the problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ raco scribble --latex FILE.scrbl
$ pdflatex FILE.tex
[[ ... 12KB of output ... ]]
! Undefined control sequence.
l.549 \oops
           {}
? &lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q-how-to-add-a-latex-style-file"&gt;Q. How to add a LaTeX style file?&lt;/h3&gt;

&lt;p&gt;To add extra LaTeX code to the final document, create a new file and include  it with the &lt;code&gt;++style&lt;/code&gt; command-line flag. This copies the contents of the style file into the generated document  (the copy appears near the top of the generated code).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ raco scribble ++style style.tex --pdf FILE.scrbl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example style file.&lt;/p&gt;

&lt;h4 id="styletex"&gt;&lt;code&gt;style.tex&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;\settopmatter{printfolios=true,printccs=true,printacmref=true}
% add page numbers etc.

\overfullrule=1mm
% draw a black rectangle near lines that overflow the margin&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another way to add extra LaTeX code is to add a &lt;a href="https://docs.racket-lang.org/scribble/core.html#%28def._%28%28lib._scribble%2Flatex-properties..rkt%29._tex-addition%29%29"&gt;&lt;code&gt;tex-addition&lt;/code&gt;&lt;/a&gt;  style property to the main title. This second approach makes it easy to include more than one file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#lang scribble/acmart

@require[
  (only-in scribble/core make-style)
  (only-in scribble/latex-properties make-tex-addition)]

@(define extra-style-files
   (list (make-tex-addition "style.tex")))

@title[#:style (make-style #f extra-style-files)]{Writing a paper with Scribble}

@; ....&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q-how-to-make-a-figure"&gt;Q. How to make a figure?&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href="&amp;lt;http://docs.racket-lang.org/scriblib/figure.html#%28def._%28%28lib._scriblib%2Ffigure..rkt%29._figure%29%29&amp;gt;"&gt;scriblib/figure&lt;/a&gt;  library to add figures to a document.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@require[pict scriblib/figure]
@figure[
  "fig:fish"  @; figure tag, see `figure-ref`
  @elem{A Standard Fish}  @; figure caption, appears below the content
  @elem{fish = @(standard-fish 90 40)}]  @; content&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The content of a figure can be almost anything that would work in the toplevel  of the document.&lt;/p&gt;

&lt;h3 id="q-how-to-include-extra-files-pictures-latex"&gt;Q. How to include extra files (pictures, LaTeX)?&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;++extra&lt;/code&gt; command-line flag names an auxilliary file that Scribble should  include when rendering the document. This flag may be supplied more than once.&lt;/p&gt;

&lt;p&gt;For example, if a document includes the content of an external LaTeX file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@elem[#:style "input"]{inline-this.tex}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then make sure to build the document with a command like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ raco scribble ++style style.tex ++extra inline-this.tex FILE.scrbl&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="inline-thistex"&gt;&lt;code&gt;inline-this.tex&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;% Raw LaTeX allowed here
$\lambda x.\, x$&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q-what-about-in-line-latex"&gt;Q. What about in-line LaTeX?&lt;/h3&gt;

&lt;p&gt;An &lt;a href="https://docs.racket-lang.org/scribble/core.html#%28def._%28%28lib._scribble%2Fcore..rkt%29._element%29%29"&gt;element&lt;/a&gt;  with the &lt;a href="https://docs.racket-lang.org/scribble/core.html#%28idx._%28gentag._60._%28lib._scribblings%2Fscribble%2Fscribble..scrbl%29%29%29"&gt;&lt;code&gt;'exact-chars&lt;/code&gt;&lt;/a&gt;  &lt;a href="https://docs.racket-lang.org/scribble/core.html#%28tech._style._property%29"&gt;style property&lt;/a&gt;  renders directly to LaTeX.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@(define (exact . stuff)
   @; the style name "relax" puts a `\relax` no-op in front of the stuff
   (make-element (make-style "relax" '(exact-chars)) stuff))

@exact|{$\lambda x.\, x$}|
@; ==&amp;gt; \relax{$\lambda x.\, x$}

@(define ($ . math-stuff)
   (apply exact (list "$" math-stuff "$")))

@${\lambda x.\, x}
@; ==&amp;gt; \relax{$\lambda x.\, x$}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="creating-a-httpdocsracket-langorgguidemodulesyntaxhtml28parthash-lang29lang-for-a-paper"&gt;Creating a &lt;a href="http://docs.racket-lang.org/guide/Module_Syntax.html#%28part._hash-lang%29"&gt;#lang&lt;/a&gt; for a paper&lt;/h2&gt;

&lt;p&gt;For a Scribble document that is split across multiple files, it can be helpful  to make a &lt;code&gt;#lang&lt;/code&gt; that &lt;a href="http://blog.racket-lang.org/2017/03/languages-as-dotfiles.html"&gt;provides a common environment&lt;/a&gt;. Instead of starting each file with a &lt;code&gt;require&lt;/code&gt;, e.g.:&lt;/p&gt;

&lt;h4 id="paperscrbl"&gt;&lt;code&gt;paper.scrbl&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#lang scribble/acmart
@require["references.rkt" "helper-functions.rkt" scriblib/figure]

....&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;files can start with a name that describes their common purpose:&lt;/p&gt;

&lt;h4 id="paperscrbl"&gt;&lt;code&gt;paper.scrbl&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#lang conference-2018-submission

....&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a bonus, if the language is defined as a package then the Scribble document  can use Racket&amp;rsquo;s dependency management tools:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# to install the paper and interactively install dependencies:
$ cd conference-2018-submission;
$ raco pkg install

# To check that the paper builds with no dependency issues:
$ raco setup --check-pkg-deps conference-2018-submission

# To run all unit tests
$ raco test -c conference-2018-submission&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a package and language:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;Move the Scribble document to a directory with the language name, i.e.,  &lt;code&gt;conference-2018-submission/&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;Write a simple &lt;code&gt;info.rkt&lt;/code&gt; to configure the package&lt;/li&gt;
 &lt;li&gt;Create a normal Racket module that exports the common environment&lt;/li&gt;
 &lt;li&gt;Create a &lt;code&gt;conference-2018-submission/lang/reader.rkt&lt;/code&gt; module&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;Details below. For a full example, visit:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://gitlab.com/bennn/scribble-acmart-example"&gt;https://gitlab.com/bennn/scribble-acmart-example&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id="conference-2018-submissioninforkt"&gt;&lt;code&gt;conference-2018-submission/info.rkt&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This file defines the basic metadata for a package. For more about &lt;code&gt;info.rkt&lt;/code&gt;, see: &lt;a href="http://blog.racket-lang.org/2017/10/tutorial-creating-a-package.html"&gt;Tutorial: Creating a Package&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#lang info
(define collection "conference-2018-submission")
(define deps '("base" "scribble-lib" "at-exp-lib"))
(define build-deps '("racket-doc" "scribble-doc"))
(define pkg-desc "Paper for Conference 2018")
(define version "0.1")&lt;/code&gt;&lt;/pre&gt;

&lt;br /&gt;

&lt;h4 id="conference-2018-submissionmainrkt"&gt;&lt;code&gt;conference-2018-submission/main.rkt&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This file defines and exports the common environment for every file in our  Scribble document. In this example, the common environment is:  the &lt;a href="&amp;lt;http://docs.racket-lang.org/scribble/ACM_Paper_Format.html&amp;gt;"&gt;scribble/acmart&lt;/a&gt; language,  the file &amp;ldquo;references.rkt&amp;rdquo;,  and the &lt;a href="&amp;lt;http://docs.racket-lang.org/scriblib/figure.html#%28def._%28%28lib._scriblib%2Ffigure..rkt%29._figure%29%29&amp;gt;"&gt;scriblib/figure&lt;/a&gt; library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#lang racket/base

(provide
  (all-from-out
    scribble/acmart
    scribble/acmart/lang
    scriblib/figure
    "references.rkt"))

(require
  scribble/acmart
  scribble/acmart/lang
  scriblib/figure
  "references.rkt")&lt;/code&gt;&lt;/pre&gt;

&lt;br /&gt;

&lt;h4 id="conference-2018-submissionlangreaderrkt"&gt;&lt;code&gt;conference-2018-submission/lang/reader.rkt&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This file:  (1) tells Racket to use the Scribble reader on &lt;code&gt;#lang conference-2018-submission&lt;/code&gt;  modules, and (2) wraps the result of such modules in a shape that Scribble  expects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#lang s-exp scribble/base/reader
conference-2018-submission
#:wrapper1 (lambda (t) (cons 'doc (t)))&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="links-to-example-documents"&gt;Links to Example Documents&lt;/h2&gt;

&lt;p&gt;These documents use the &lt;code&gt;#lang&lt;/code&gt; approach to writing a paper with Scribble. Check their &lt;code&gt;main.rkt&lt;/code&gt; for example formatting functions and unit tests,  and check the &lt;code&gt;.scrbl&lt;/code&gt; files to see how the ideas above look in a larger document.&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://github.com/nuprl/retic_performance/tree/master/gm-pepm-2018"&gt;https://github.com/nuprl/retic_performance/tree/master/gm-pepm-2018&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://github.com/nuprl/tag-sound/tree/master/gf-icfp-2018"&gt;https://github.com/nuprl/tag-sound/tree/master/gf-icfp-2018&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Finally, this repository provides a tool to start a new Scribble document:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://pkgd.racket-lang.org/pkgn/package/gtp-paper"&gt;https://pkgd.racket-lang.org/pkgn/package/gtp-paper&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://project.inria.fr/coqexchange/checking-machine-checked-proofs/"&gt;Checking Machine-Checked Proofs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description></item>
  <item>
   <title>The Behavior of Gradual Types: A User Study</title>
   <link>http://prl.ccs.neu.edu/blog/2018/12/11/the-behavior-of-gradual-types-a-user-study/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2018-12-11-the-behavior-of-gradual-types-a-user-study</guid>
   <pubDate>Tue, 11 Dec 2018 19:50:33 UT</pubDate>
   <author>PRL</author>
   <description>&lt;!-- more--&gt;

&lt;blockquote&gt;
 &lt;p&gt;Note: this post is an extended abstract for the paper &lt;em&gt;The Behavior of Gradual Types: A User Study&lt;/em&gt; by Preston Tunnell&amp;mdash;Wilson, Ben Greenman, Justin Pombrio, and Shriram Krishnamurthi. For the full paper, datasets, and slides, &lt;a href="http://www.ccs.neu.edu/home/types/publications/publications.html#tgpk-dls-2018"&gt;click here&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The long-term goal of gradual typing is to build languages that offer the  &amp;ldquo;best&amp;rdquo; of both static and dynamic typing. Researchers disagree, however, on what the semantics of a mixed-typed language  should be; there are &lt;a href="/blog/2018/10/06/a-spectrum-of-type-soundness-and-performance/"&gt;at least three competing proposals&lt;/a&gt;  for combining a dynamically-typed language with a similar statically-typed language.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;It&amp;rsquo;s an interesting situation. There are dozens of papers on the semantics of gradual types&amp;mdash;and &lt;a href="http://www.ccs.neu.edu/home/types/resources/talks/tgpk-dls-2018.pdf"&gt;many claim&lt;/a&gt; to have developers in mind&amp;mdash;but zero papers that ask developers what they think.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To help inform the discussion, we recently designed a &lt;a href="&amp;lt;http://cs.brown.edu/research/plt/dl/dls2018&amp;gt;"&gt;survey&lt;/a&gt;  to see what programmers think of three mixed-typed semantics. The survey is based on 8 example programs; we selected these 8 programs because the set as a whole tells the three mixed-typed semantics apart. For each program, the survey presents a few possible outcomes of running the  program and asks participants for their opinion on each outcome.&lt;/p&gt;

&lt;p&gt;The image below shows one program from the survey:&lt;/p&gt;

&lt;p&gt; &lt;img src="/img/gtsurvey-example-program.png" alt="Figure 1: example program" /&gt;&lt;/p&gt;

&lt;p&gt;This program creates an array, passes it between typed and untyped variables,  and performs write &amp;amp; read operations. What should happen when we run this program? One option is to ignore the type annotations and return the second element  of the array (&lt;code&gt;"bye"&lt;/code&gt;). A second option is to reject the write operation (on line 4) because it attempts  to write a number to a variable of type &lt;code&gt;Array(String)&lt;/code&gt;. A third option is to reject the assignment after the read operation (on line 5)  because it attempts to assign a string to a variable of type &lt;code&gt;Number&lt;/code&gt;. These are the three behaviors in the survey:&lt;/p&gt;

&lt;p&gt; &lt;img src="/img/gtsurvey-example-behaviors.png" alt="Figure 2: behaviors for the example question" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;A fourth option is to reject the assignment of an &lt;code&gt;Array(String)&lt;/code&gt; to a variable of type &lt;code&gt;Array(Number)&lt;/code&gt;. A few participants left comments asking for this behavior. See the &lt;a href="&amp;lt;http://cs.brown.edu/research/plt/dl/dls2018&amp;gt;"&gt;anonymized responses&lt;/a&gt; for their comments, and see &lt;a href="&amp;lt;http://cs.brown.edu/~sk/Publications/Papers/Published/tgpk-beh-grad-types-user-study&amp;gt;"&gt;the paper&lt;/a&gt; for why we left that behavior out.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For each behavior, we asked for respondents&amp;rsquo; preference along two independent dimensions:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Do you &lt;em&gt;like&lt;/em&gt; or &lt;em&gt;dislike&lt;/em&gt; this behavior?&lt;/li&gt;
 &lt;li&gt;Does it match your &lt;em&gt;expectation&lt;/em&gt; as a programmer?&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Combined, the dimensions lead to four possible &lt;em&gt;attitudes&lt;/em&gt;: Like and Expected,  Like and Unexpected, Dislike and Expected, Dislike and Unexpected. The full example question, with attitudes and space for comments, is below.&lt;/p&gt;

&lt;p&gt; &lt;img src="/img/gtsurvey-example-question.png" alt="Figure 3: complete question" /&gt;&lt;/p&gt;

&lt;p&gt;We administered the survey to three populations &amp;mdash; software engineers,  students, and Mechanical Turk workers &amp;mdash; and thereby collected three sets of  attitudes for each question. The results for the running example are below:&lt;/p&gt;

&lt;p&gt; &lt;img src="/img/gtsurvey-example-data.png" alt="Figure 4: results for Question 7" /&gt;&lt;/p&gt;

&lt;p&gt;The figure is a matrix of three columns (one for each population)  and three rows (one for each behavior). Each cell of the matrix contains a bar chart showing the attitudes  that we collected.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;Unlike the survey question, the behaviors in the results are labeled as &lt;strong&gt;Deep&lt;/strong&gt;, &lt;strong&gt;Erasure&lt;/strong&gt;, and &lt;strong&gt;Shallow&lt;/strong&gt;. These names describe the three mixed-typed semantics.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For this question, the software engineers (left column, green bars)  mostly picked the &amp;ldquo;Dislike and Unexpected&amp;rdquo; attitude for every behavior. The students (mid column, blue bars) also show consensus on &amp;ldquo;Dislike and  Unexpected&amp;rdquo; for the &lt;strong&gt;Deep&lt;/strong&gt; and &lt;strong&gt;Erasure&lt;/strong&gt; behaviors; however, they are split  for the &lt;strong&gt;Shallow&lt;/strong&gt; behavior. The Mechanical Turk workers are divided on every behavior.&lt;/p&gt;

&lt;p&gt;See &lt;a href="&amp;lt;http://cs.brown.edu/~sk/Publications/Papers/Published/tgpk-beh-grad-types-user-study&amp;gt;"&gt;the paper&lt;/a&gt; for the other questions and responses.&lt;/p&gt;

&lt;p&gt;Overall, our main finding is that respondents preferred behaviors that enforced  full types and reported runtime mismatches as early as possible. The takeaway is thus:&lt;/p&gt;

&lt;p style="margin-left: 40px; margin-right: 40px"&gt;if you are designing a mixed-typed language and choose &lt;strong&gt;not&lt;/strong&gt; to enforce full types, then make sure to explain this behavior to users!&lt;/p&gt;

&lt;p&gt;Put lots of example programs in the language&amp;rsquo;s documentation. The programs in the survey can be adapted to explain how your chosen  behavior differs from alternatives.&lt;/p&gt;

&lt;h2 id="questions"&gt;Questions&lt;/h2&gt;

&lt;p&gt;Here are some good questions we&amp;rsquo;ve gotten that are not clearly answered in the paper.&lt;/p&gt;

&lt;h4 id="q-did-any-respondents-expect-more-than-one-behavior"&gt;Q. Did any respondents &amp;ldquo;expect&amp;rdquo; more than one behavior?&lt;/h4&gt;

&lt;p&gt;Yes, 59% &lt;!-- 20/34--&gt; of the software engineers and 82% &lt;!-- 14/17--&gt; of the students selected &amp;ldquo;Liked and Expected&amp;rdquo; and/or &amp;ldquo;Dislike and Expected&amp;rdquo; for different behaviors on the same program.&lt;/p&gt;
&lt;!-- They probably interpreted "Expected" as--&gt;
&lt;!--  "the program does something that makes sense", rather than--&gt;
&lt;!--  "the program does the one thing that I believe it should do".--&gt;
&lt;!-- ids for "double-expect" S.Es : R_24bz47lgcAOkCux R_2R4dZ1l0t3yx6fW R_b7yMVe7VtmmsrHb R_31MXSUfCyDE8FdG R_6LGXyOirYNtYWd3 R_2qyMZBAs74PrsSz R_2ASFRBh2jfuRgP1 R_1PUc0AUEzdXKGt8 R_2dL60N9oPIkbvWY R_1BXXqYyxH7R4r9l R_1ON2sxGalcODyAd R_1oyZasBudU5gKPS R_1FIHgkQbWGaxuHd R_b1s2YMBWCrCRvxf R_29t0zWxkQsfb9FT R_2fevZOrFGzS6JLf R_8Dn6NMjDyigT59n R_2pRG370z3cBUaKv R_2qDXTFI53ntWMu4 R_ZI8AwATueqyWwOR--&gt;
&lt;!-- ids for "double-expect" students : R_9B6WHWEX5l0DskN R_22VAu37cGWQPQx1 R_3hgYSaGy2tbyY3G R_3rTbAqgn1rhQK4d R_r3HqAP1yGRXHaZX R_1l05qvQ1sYOCcCF R_3qaMT9xR7CRYg2Y R_1Li0sGHkxk1VfcA R_24ITtgvBzg9RpE3 R_3HzshHbDWkayp4t R_5mtEFLtSX0iPVOp R_1IR6vdpmVw4OCqV R_2XpWlkKjH9LQqln R_DoQrROe0dcb1YJz--&gt;

&lt;h4 id="q-did-the-respondents-have-a-prior-preference-for-static-or-dynamic-typing"&gt;Q. Did the respondents have a prior preference for static or dynamic typing?&lt;/h4&gt;

&lt;p&gt;Near the end of the survey we asked: &amp;ldquo;Which do you prefer, typed or untyped programming?&amp;rdquo;. See table 2 of &lt;a href="&amp;lt;http://cs.brown.edu/~sk/Publications/Papers/Published/tgpk-beh-grad-types-user-study&amp;gt;"&gt;the paper&lt;/a&gt; for coded responses to this question,  or the &lt;a href="&amp;lt;http://cs.brown.edu/research/plt/dl/dls2018&amp;gt;"&gt;anonymized responses&lt;/a&gt; for the ground truth. Most preferred typed programming.&lt;/p&gt;</description></item>
  <item>
   <title>Java and Migratory Typing</title>
   <link>http://prl.ccs.neu.edu/blog/2018/12/02/java-and-migratory-typing/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2018-12-02-java-and-migratory-typing</guid>
   <pubDate>Sun, 02 Dec 2018 14:41:53 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;The &lt;em&gt;transient&lt;/em&gt; approach to migratory typing (circa &lt;a href="http://homes.sice.indiana.edu/mvitouse/papers/dls14.pdf"&gt;2014&lt;/a&gt;)  is similar to type erasure in Java (circa &lt;a href="https://docs.oracle.com/javase/1.5.0/docs/relnotes/features.html"&gt;2004&lt;/a&gt;)  in a few interesting ways.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h2 id="migratory-typing"&gt;Migratory typing&lt;/h2&gt;

&lt;p&gt;The goal of &lt;em&gt;migratory typing&lt;/em&gt; is to enrich the type system of a language  without breaking backwards compatibility. Ideally, code that uses the enriched types:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;(G1) benefits from new ahead-of-time checks,&lt;/li&gt;
 &lt;li&gt;(G2) benefits from stronger run-time guarantees, and&lt;/li&gt;
 &lt;li&gt;(G3) may interact with all kinds of existing code.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;There are tradeoffs involved in the implementation of a migratory typing  system, however, and (as we will see) different implementations may focus on  different goals than the three above.&lt;/p&gt;

&lt;p&gt;A typical migratory typing system adds a static type checker to a dynamically  typed language (&lt;a href="/blog/2018/10/06/a-spectrum-of-type-soundness-and-performance/index.html"&gt;examples&lt;/a&gt;),  but one could also extend the type system of a statically-typed language;  for example, by &lt;a href="https://hal.inria.fr/hal-01629909v2"&gt;adding dependent types&lt;/a&gt;. In this sense, Java 1.5.0 is a migratory typing system for pre-generics Java. The addition of generic types enabled new ahead-of-time checks and maintained backwards  compatibility with existing Java code.&lt;/p&gt;

&lt;p&gt;Java&amp;rsquo;s implementation of migratory typing has some interesting things in common  with the &lt;em&gt;transient&lt;/em&gt; implementation strategy recently proposed by  Michael Vitousek and collaborators (&lt;a href="http://homes.sice.indiana.edu/mvitouse/papers/dls14.pdf"&gt;DLS&amp;rsquo;14&lt;/a&gt;, &lt;a href="https://mail.google.com/mail/u/0/h/1atrn21qlyrrh/?&amp;amp;"&gt;POPL&amp;rsquo;17&lt;/a&gt;). The goal of this post is to demonstrate the connections.&lt;/p&gt;

&lt;h2 id="erasure-migratory-typing"&gt;Erasure migratory typing&lt;/h2&gt;

&lt;p&gt;Before we compare Java 1.5.0 to transient, let&amp;rsquo;s review a simpler strategy:  the &lt;em&gt;erasure&lt;/em&gt; approach to migratory typing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; is a great (modern) example of the erasure approach. TypeScript is a migratory typing system for JavaScript. A TypeScript module gets validated by an ahead-of-time type checker and  compiles to JavaScript. After compilation, any JavaScript program may import bindings  from the generated code. Conversely, a TypeScript module may import bindings from a JavaScript module  by declaring a static type for each binding.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;The &lt;a href="http://definitelytyped.org/"&gt;DefinitelyTyped&lt;/a&gt; repository provides TypeScript type definitions for many JavaScript libraries.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The TypeScript compiler erases types;  every type &lt;code&gt;T&lt;/code&gt; in the source code translates to the universal &amp;ldquo;JavaScript type&amp;rdquo;. For instance, a TypeScript function declaration compiles to an untyped  JavaScript function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(function (n0 : number, n1 : number) { return n0 + n1; })

// ==(compiles to)==&amp;gt;

(function (n0, n1) { return n0 + n1; })&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TypeScript satisfies goals &lt;strong&gt;G1&lt;/strong&gt; and &lt;strong&gt;G3&lt;/strong&gt; for a migratory typing system  because its type checker adds ahead-of-time checks and its  compiler outputs JavaScript. TypeScript does not satisfy goal &lt;strong&gt;G2&lt;/strong&gt; because the compiler erases types. In terms of the example above, the compiled function may be invoked with any  pair of JavaScript values; the variable &lt;code&gt;n0&lt;/code&gt; is not guaranteed to point  to a &lt;code&gt;number&lt;/code&gt; at run-time. On one hand, this means the type annotations have no effect on the behavior  of a program &amp;mdash; and in particular, cannot be trusted for debugging. On the other hand, it means that an experienced JavaScript programmer can  re-use their knowledge to predict the behavior of a TypeScript program.&lt;/p&gt;

&lt;p&gt;In an ordinary program, the run-time guarantees of TypeScript are simply  the run-time guarantees of JavaScript:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;if a TypeScript expression &lt;code&gt;e&lt;/code&gt; has the static type &lt;code&gt;T&lt;/code&gt; and evaluates to  a value &lt;code&gt;v&lt;/code&gt;,&lt;/li&gt;
 &lt;li&gt;then the only guarantee is that &lt;code&gt;v&lt;/code&gt; is a valid JavaScript value  (e.g., &lt;code&gt;T&lt;/code&gt; could be &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; could be an incompatible object).&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="transient-migratory-typing"&gt;Transient migratory typing&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/mvitousek/reticulated"&gt;Reticulated&lt;/a&gt; is a migratory typing  system for Python that follows a &lt;em&gt;transient&lt;/em&gt; implementation strategy. A Reticulated module gets type-checked and compiles to a Python module that  defends itself from certain type-invalid inputs through the use of  assertions that run in near-constant time. The type-checking addresses goal &lt;strong&gt;G1&lt;/strong&gt;,  the compilation to Python provides interoperability (goal &lt;strong&gt;G3&lt;/strong&gt;),  and the assertions partially meet goal &lt;strong&gt;G2&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;These &lt;em&gt;certain&lt;/em&gt; inputs are the ones that would cause a standard typed operational semantics to reach an undefined state. For a discussion of &lt;em&gt;near-constant&lt;/em&gt;, see &lt;a href="http://www.ccs.neu.edu/home/types/publications/publications.html#gm-pepm-2018"&gt;&lt;em&gt;On the Cost of Type-Tag Soundness&lt;/em&gt;, section 2&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For example, here is a Reticulated function  that computes the average of a list of numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Reticulated (commit e478343)
def average(nums : List(Float)) -&amp;gt; Float:
  if ns:
    return sum(ns) / len(ns)
  else:
    raise ValueError("average: expected non-empty list")&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and here is the Python code it compiles to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from retic.runtime import *
from retic.transient import *
from retic.typing import *

def average(nums):
    check_type_list(nums)
    if ns:
        return check_type_float((check_type_function(sum)(ns) / check_type_function(len)(ns)))
    else:
        raise check_type_function(ValueError)('average: expected non-empty list')&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
 &lt;p&gt;Note: the Reticulated syntax for type annotations is similar to the one proposed in &lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt;, but not identical. For example, Reticulated does not require forward references to be embedded in strings.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The Reticulated compiler removes all type annotations and inserts &lt;code&gt;check_type&lt;/code&gt;  assertions throughout the code. In &lt;code&gt;average&lt;/code&gt;, these assertions check that: (1) the input is a list,  (2) the output is a &lt;code&gt;float&lt;/code&gt;, (3) and the names &lt;code&gt;sum&lt;/code&gt; &lt;code&gt;len&lt;/code&gt; and  &lt;code&gt;ValueError&lt;/code&gt; point to callable values. That&amp;rsquo;s all. The assertions &lt;strong&gt;do not check&lt;/strong&gt; that &lt;code&gt;nums&lt;/code&gt; contains only floating-point  numbers.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;The assertions also do not check that the function bound to &lt;code&gt;sum&lt;/code&gt; is defined for a single argument, which is arguably a bug. Scaling a model to an implementation is always challenging.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If &lt;code&gt;nums&lt;/code&gt; contains something other than floating point numbers, then the  call to &lt;code&gt;average&lt;/code&gt; may cause &lt;code&gt;sum&lt;/code&gt; to raise an exception or it may silently  compute a nonsense result. The behavior depends on the implementation of &lt;code&gt;sum&lt;/code&gt; in the same way that  the behavior of a TypeScript function depends on any JavaScript functions  that it invokes.&lt;/p&gt;

&lt;p&gt;Reticulated does not erase types, nor does it fully enforce types. Every type in a Reticulated module translates to its  top-level type constructor &lt;code&gt;C(T)&lt;/code&gt;, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  C(Float)                = Float
  C(List(Float))          = List
  C(List(Float) -&amp;gt; Float) = -&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consequently, Reticulated has a slightly stronger run-time guarantee than Python:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;if &lt;code&gt;e&lt;/code&gt; is an expression with static type &lt;code&gt;T&lt;/code&gt; that evaluates to a value &lt;code&gt;v&lt;/code&gt;,&lt;/li&gt;
 &lt;li&gt;then &lt;code&gt;v&lt;/code&gt; is guaranteed to have a top-level shape that matches the &lt;code&gt;C(T)&lt;/code&gt;  constructor.&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="java-migratory-typing"&gt;Java migratory typing&lt;/h2&gt;

&lt;p&gt;Java 1.5.0 added &lt;a href="https://www.jcp.org/en/jsr/detail?id=14"&gt;generic types&lt;/a&gt;  to the Java 1.4.0 type system. The benefit of generics is that a programmer can:  write one class definition,  use the definition in a few different contexts,  and receive specific feedback from the type checker in each context.&lt;/p&gt;

&lt;h3 id="review-generic-types"&gt;Review: generic types&lt;/h3&gt;

&lt;p&gt;Suppose we want to write a &lt;code&gt;Box&lt;/code&gt; class that holds some kind of value;  the value could be an &lt;code&gt;Integer&lt;/code&gt; or a &lt;code&gt;String&lt;/code&gt; or anything else. Here is a pre-generics definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Box {
  private Object val;

  public Box(Object val) { this.set(val); }

  public void set(Object val) { this.val = val; }

  public Object get() { return this.val; }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this definition is it possible to make boxes that hold different types  of values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// good!
Box iBox = new Box(new Integer(4));
Box sBox = new Box(new String("X"));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but it is also possible to &amp;ldquo;change the type&amp;rdquo; of the contents of a &lt;code&gt;Box&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// maybe bad!
iBox.set(new String("not a number"));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and some calls to &lt;code&gt;get&lt;/code&gt; must be followed by a type cast:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// annoying!
((String) sBox.get()).charAt(0);&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;With generics, we can give a name (e.g. &lt;code&gt;ValType&lt;/code&gt;) to &amp;ldquo;the type of the value inside a box&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class GBox&amp;lt;ValType&amp;gt; {
  private ValType val;

  public GBox(ValType val) { this.set(val); }

  public void set(ValType val) { this.val = val; }

  public ValType get() { return this.val; }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and now we can tell the type checker to check different boxes differently (satisfying goal &lt;strong&gt;G1&lt;/strong&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GBox&amp;lt;Integer&amp;gt; iBox = new GBox&amp;lt;Integer&amp;gt;(new Integer(0));
GBox&amp;lt;String&amp;gt; sBox = new GBox&amp;lt;String&amp;gt;(new String("A"));

// iBox.set(new String("not a number")); // Type Error, good!

sBox.get().charAt(0); // no cast, good!&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="backwards-compatibility--danger"&gt;Backwards compatibility &amp;amp; danger&lt;/h3&gt;

&lt;p&gt;Java generics are backwards-compatible with older code (goal &lt;strong&gt;G3&lt;/strong&gt;). This means that pre-generics code can interact with instances of a generic  class. Vice-versa, generic code can interact with pre-generics classes. Since pre-generics code is not aware of type parameters, these interactions  are potentially unsafe. For example, a pre-generics method can change the type of a &lt;code&gt;GBox&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Java 1.4.0 method
public static void evil(GBox b) { b.set(666); }

// Java 1.5.0 method
public static void test() {
  GBox&amp;lt;String&amp;gt; sBox = new GBox&amp;lt;String&amp;gt;(new String("A"));
  evil(sBox); // OK, but generates unchecked warning
  sBox.get().charAt(0);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above passes the type checker (with a warning about the &lt;code&gt;evil&lt;/code&gt; method),  and so it &lt;em&gt;seems&lt;/em&gt; as though running the code will run the nonsense  method call &lt;code&gt;666.charAt(0)&lt;/code&gt; and lead to evil behavior. The actual result, however, is a cast error immediately after the call  &lt;code&gt;sBox.get()&lt;/code&gt; returns.&lt;/p&gt;

&lt;p&gt;Based on the cast error, we can tell that  the compiler does not trust the type &lt;code&gt;GBox&amp;lt;String&amp;gt;&lt;/code&gt; and  inserts a run-time check that the result of the &lt;code&gt;.get()&lt;/code&gt; is a string object.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;&amp;ldquo;Calling legacy code from generic code is inherently dangerous; once you mix generic code with non-generic legacy code, all the safety guarantees that the generic type system usually provides are void.&amp;rdquo; &lt;a href="https://www.oracle.com/technetwork/java/javase/generics-tutorial-159168.pdf"&gt;Generics in the Java Programming Language, Section 6.1&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id="run-time-guarantees"&gt;Run-time guarantees&lt;/h3&gt;

&lt;p&gt;In order to support pre-generics and post-generics code on the same  &lt;a href="https://docs.oracle.com/javase/specs/jvms/se11/html/index.html"&gt;virtual machine&lt;/a&gt;,  the Java compiler &lt;a href="https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-4.6"&gt;erases&lt;/a&gt;  generic type parameters after type-checking.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;"The decision not to make all generic types [not erased] is one of the most crucial, and controversial design decisions involving the type system of the Java programming language.&lt;/p&gt;
 &lt;p&gt;"Ultimately, the most important motivation for this decision is compatibility with existing code." &lt;a href="https://docs.oracle.com/javase/specs/jls/se11/html/jls-4.html#jls-4.7"&gt;Java Language Specification, section 4.7&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;By contrast to Reticulated&amp;rsquo;s &lt;code&gt;C(T)&lt;/code&gt; transformation, the following &lt;code&gt;G(T)&lt;/code&gt;  transformation describes generic-type erasure,  where &lt;code&gt;T&amp;lt;T1&amp;gt;&lt;/code&gt; describes a type &lt;code&gt;T&lt;/code&gt; with parameter &lt;code&gt;T1&lt;/code&gt;  and &lt;code&gt;A[T1, T2]&lt;/code&gt; describes a type variable &lt;code&gt;A&lt;/code&gt; with lower bound &lt;code&gt;T1&lt;/code&gt; and upper bound &lt;code&gt;T2&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  G(T&amp;lt;T1&amp;gt;)     = G(T)
  G(A[T1, T2]) = G(T1)
  G(T)         = T      otherwise&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If generic-type erasure results in a type mismatch (e.g., in &lt;code&gt;sBox.get().charAt(0)&lt;/code&gt; above),  the compiler inserts a cast. The inserted casts led to the runtime error in the previous example, and  provide the following run-time guarantee:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;if &lt;code&gt;e&lt;/code&gt; is an expression with static type &lt;code&gt;T&lt;/code&gt; that evaluates to a value &lt;code&gt;v&lt;/code&gt;,&lt;/li&gt;
 &lt;li&gt;then &lt;code&gt;v&lt;/code&gt; is guaranteed to match the (bytecode) type &lt;code&gt;G(T)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="discussion"&gt;Discussion&lt;/h2&gt;

&lt;p&gt;TypeScript, Reticulated Python, and Java 1.5.0 each improved the type system  of an existing language, but maintained backwards compatibility with existing  code. The name &lt;a href="http://drops.dagstuhl.de/opus/volltexte/2017/7120/"&gt;migratory typing&lt;/a&gt;  describes this kind of language extension.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;a href="http://drops.dagstuhl.de/opus/volltexte/2015/5031/"&gt;Gradual typing&lt;/a&gt; is a similar; a gradual type system starts with a statically-typed language and adds dynamic typing in a principled way (&lt;a href="https://pleiad.cl/papers/2016/garciaAl-popl2016.pdf"&gt;example&lt;/a&gt;).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The TypeScript team had a choice between erasing types and enforcing types. They chose to erase types and run all code (typed or untyped) at the level  of JavaScript. (Some TypeScript &lt;a href="https://lorefnon.tech/2018/03/25/typescript-and-validations-at-runtime-boundaries/"&gt;libraries&lt;/a&gt;, however, can enforce some types.)&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;TypeScript is not the only erasure language, nor is it the first. The oldest (I think) is &lt;a href="http://www.softwarepreservation.org/projects/LISP/maclisp_family/"&gt;MACLISP&lt;/a&gt;. For an erasure manifesto, see &lt;a href="http://bracha.org/pluggableTypesPosition.pdf"&gt;Pluggable Type Systems&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The Reticulated team faced a similar choice, and chose to enforce the top-level  shape of values in typed code (&lt;a href="http://homes.sice.indiana.edu/mvitouse/papers/popl17.pdf"&gt;POPL 2017&lt;/a&gt;). It will be interesting to see if this guarantee helps developers maintain programs,  or if it is too shallow to be much use. The &lt;a href="https://www.pyret.org/index.html"&gt;Pyret&lt;/a&gt; language has been successful with  a similar, shallow approach.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;Note: the POPL 2017 paper advertises an &amp;ldquo;open-world soundness&amp;rdquo;, but I do not see how this idea is different from the older idea of soundness in a multi-language system (&lt;a href="https://www.eecs.northwestern.edu/~robby/pubs/papers/toplas09-mf.pdf"&gt;TOPLAS 2009&lt;/a&gt;, &lt;a href="https://www2.ccs.neu.edu/racket/pubs/dls06-tf.pdf"&gt;DLS 2006&lt;/a&gt;).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The Java team faced a &lt;em&gt;different&lt;/em&gt; choice because the Java Virtual Machine is  a typed programming language. The casts around type-erased generics provide a minimal level of safety  &amp;mdash; without casts, use of a generic object might corrupt the state of a VM instance. Nevertheless, the implementation of generic-type erasure + cast insertion  is very similar to Reticulated&amp;rsquo;s implementation of stronger guarantees for Python.&lt;/p&gt;

&lt;p&gt;Alternatively, Java could enforce generic types at run-time. Over the years there have been a few proposals to do so (&lt;a href="http://gafter.blogspot.com/2006/11/reified-generics-for-java.html"&gt;example 1&lt;/a&gt;,  &lt;a href="https://wiki.openjdk.java.net/display/valhalla/Main"&gt;example 2&lt;/a&gt;). The C# language has a similar type system and does enforce  generics at run-time (sources:  &lt;a href="https://mattwarren.org/2018/03/02/How-generics-were-added-to-.NET/"&gt;blog post&lt;/a&gt;,  &lt;a href="https://www.microsoft.com/en-us/research/publication/design-and-implementation-of-generics-for-the-net-common-language-runtime/"&gt;PLDI 2001 paper&lt;/a&gt;,  &lt;a href="https://dl.acm.org/citation.cfm?doid=378795.378797"&gt;backup link to paper&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id="acknowledgments"&gt;Acknowledgments&lt;/h2&gt;

&lt;p&gt;Thank you to &lt;a href="https://github.com/rmculpepper"&gt;Ryan Culpepper&lt;/a&gt; and &lt;a href="http://users.eecs.northwestern.edu/~jesse/"&gt;Jesse Tov&lt;/a&gt; for noticing the similarity between  Java&amp;rsquo;s generic-type erasure and transient migratory typing.&lt;/p&gt;</description></item>
  <item>
   <title>Disappearing Code</title>
   <link>http://prl.ccs.neu.edu/blog/2018/11/24/disappearing-code/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2018-11-24-disappearing-code</guid>
   <pubDate>Sat, 24 Nov 2018 09:52:58 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;Two experiences at &lt;a href="https://2018.splashcon.org/home"&gt;SPLASH 2018&lt;/a&gt; reminded me that software gets thrown away and replaced.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h3 id="story-1"&gt;Story 1&lt;/h3&gt;

&lt;p&gt;The first reminder came near the end of a &lt;a href="https://conf.researchr.org/event/sle-2018/papers-a-new-approach-for-software-correctness-and-reliability"&gt;talk&lt;/a&gt; by  &lt;a href="https://people.csail.mit.edu/rinard/"&gt;Martin Rinard&lt;/a&gt;. Once upon a time, Martin was working as a consultant and a firm asked him to  review a software package. (The firm wanted a second opinion about how the software computed its results.) The firm sent a zipfile; Martin found six versions of the code inside; the  firm said &amp;ldquo;well, please check all six versions&amp;rdquo;; and it turned out:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Version 1&lt;/strong&gt; : the source code was written in a domain-specific language  (DSL) that generated code for the application&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Version 2&lt;/strong&gt; : the DSL source was the same as version 1, but the generated  code was slightly modified&lt;/li&gt;
 &lt;li&gt;&amp;hellip;&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Version 6&lt;/strong&gt; : the generated code was the source code and the DSL was gone&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;The moral of Martin&amp;rsquo;s story was:   (1) the creators of a software system are often different from the maintainers,  and (2) researchers need to build tools to help these maintainers.&lt;/p&gt;

&lt;h3 id="story-2"&gt;Story 2&lt;/h3&gt;

&lt;p&gt;The second reminder came from a teaching assistant who said the  &lt;a href="https://www.cs.cornell.edu/courses/cs3110/2018fa/"&gt;functional programming course&lt;/a&gt;  at their institution was currently using a Python script  to test students&amp;rsquo; code. Once upon a time, I was a teaching assistant for the  &lt;a href="https://www.cs.cornell.edu/courses/cs3110/2014sp/"&gt;same course&lt;/a&gt; at the same  institution. We had trouble testing students&amp;rsquo; code via the Python script  left by the pre&amp;ndash;2013 course staff, so I wrote a  &lt;a href="https://gitlab.com/bengreenman/ocaml_tools/"&gt;command-line tool&lt;/a&gt; to handle the tests and other  compile/run/grade tasks. To keep history from repeating itself, I used the same language the course  teaches (OCaml) and wrote some documentation &amp;mdash; but it seems like that was  not enough. At any rate, writing the tool was a good exercise.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;In the end, everybody must understand for himself.&lt;/em&gt; &amp;mdash; &lt;a href="https://dl.acm.org/citation.cfm?id=3731"&gt;Per Martin-Löf&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id="reflection"&gt;Reflection&lt;/h3&gt;

&lt;p&gt;In each story, the maintainers of a software system threw away some old  code to make their job easier in the short term. How can we stop this &amp;ldquo;re-inventing the wheel&amp;rdquo; from happening?&lt;/p&gt;

&lt;p&gt;Martin Rinard&amp;rsquo;s solution is to let maintenance programmers keep their current  habits, but provide tools to make the short-term, pragmatic solutions into a  more robust systems. Search for "&lt;a href="https://people.csail.mit.edu/rinard/paper/osdi04.pdf"&gt;failure-oblivious computing&lt;/a&gt;"  to learn more (this was the topic of his &lt;a href="https://conf.researchr.org/event/sle-2018/papers-a-new-approach-for-software-correctness-and-reliability"&gt;talk&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In Story 1, the maintainers were able to avoid the DSL by modifying an  inherited blob of DSL-generated code. If the DSL did not generate code, history might have taken a different course;  it might be best to start with a language that offers tools for linguistic  re-use, and to build a DSL from these tools &amp;mdash; so there is no generated code. The Racket programming language is exploring this path. For a recent example, see the &lt;a href="https://www2.ccs.neu.edu/racket/pubs/icfp17-acf.pdf"&gt;video-lang paper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Story 2 test harness, however, was not generating code. Its maintainers discarded a &amp;ldquo;big&amp;rdquo; program written in a typed  functional language in favor of a script. Perhaps we need a language that allows mixing statically-typed and  dynamically-typed code (shouts out to  &lt;a href="https://www2.ccs.neu.edu/racket/pubs/icfp18-gf.pdf"&gt;my own research&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The best solution is probably to start with a team and keep the culture alive. Always pair program!&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id="addendum-comment-from-mitch-wand"&gt;Addendum: comment from Mitch Wand&lt;/h4&gt;

&lt;blockquote&gt;
 &lt;p&gt;The best solution is probably to start with a team and keep the culture alive. Always pair program!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ermm, this works better for sourdough bread than for people.&lt;/p&gt;

&lt;p&gt;Even in the not-so-real world of checking student solutions, there&amp;rsquo;s often no way of guaranteeing that one half of a pair will be around for the second round. They may be on co-op. Or the course will not be offered the next semster/year/etc. Or the course will change at the next offering (from OCaml to Python or from Racket to Java) so that large chunks of the infrastructure will have to be discarded or rewritten.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;real&amp;rdquo; solution is to write literate code (as we preached incessantly in PDP), so that the next reader will have at least some clue as about what you wrote. This just may be sufficient incentive to modify rather than rebuild from scratch.&lt;/p&gt;

&lt;p&gt;Ever the optimist, &amp;mdash;Mitch&lt;/p&gt;</description></item>
  <item>
   <title>A Spectrum of Type Soundness and Performance</title>
   <link>http://prl.ccs.neu.edu/blog/2018/10/06/a-spectrum-of-type-soundness-and-performance/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2018-10-06-a-spectrum-of-type-soundness-and-performance</guid>
   <pubDate>Sat, 06 Oct 2018 11:23:35 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;The literature on mixed-typed languages presents (at least) three fundamentally different ways of thinking about the integrity of programs that combine  statically typed and dynamically typed code. Recently, we have been sorting them out.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;blockquote&gt;
 &lt;p&gt;Note: this post is an extended abstract for the paper &lt;em&gt;A Spectrum of Type  Soundness and Performance&lt;/em&gt; by Ben Greenman and Matthias Felleisen.  For the full paper, slides, code, and a video presentation, visit  &lt;a href="http://www.ccs.neu.edu/home/types/publications/publications.html#gf-icfp-2018"&gt;http://www.ccs.neu.edu/home/types/publications/publications.html#gf-icfp-2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;A dynamically-typed language runs any program that &amp;ldquo;looks good&amp;rdquo; (i.e.,  passes some basic syntactic criteria. In Python a program cannot mix  indentation levels. In Racket a program cannot refer to unbound variables). A statically-typed language runs any program that both &amp;ldquo;looks good&amp;rdquo; and  is well-typed according to a type checker.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;mixed-typed&lt;/em&gt; language allows some combination of static and dynamic typing. There are many languages that fall in the mixed-typed category; figure 1 lists  a few, roughly arranged left-to-right by the year they first provided a way to  mix.&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="/img/mixed-typed-systems-by-year.png" alt="Figure 1: Some mixed-typed languages" /&gt;
 &lt;p class="caption"&gt;Figure 1: Some mixed-typed languages&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;These languages all try to combine static and dynamic typing in a useful way,  but they take VERY different approaches. For example:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;MACLISP&lt;/strong&gt; defines a syntax for type annotations but does not say how a compiler  should interpret the types; see section 14.2 of the &lt;a href="http://www.softwarepreservation.org/projects/LISP/MIT/Moon-MACLISP_Reference_Manual-Apr_08_1974.pdf"&gt;Moonual&lt;/a&gt;.  For example, a compiler may use types to generate specialized code that assumes  the type annotations are correct (and has undefined behavior otherwise).&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Strongtalk&lt;/strong&gt; includes a static type checker and DOES NOT use types to change the  behavior of a program.  For rationale, see the &lt;a href="http://bracha.org/pluggableTypesPosition.pdf"&gt;Pluggable Type Systems&lt;/a&gt; position paper.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Typed Racket&lt;/strong&gt; lets a program combine statically-typed modules and dynamically-typed  modules. The compiler inserts run-time checks at the boundaries between such  modules to detect any mismatches between the static types and incoming dynamically-typed  values.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Thorn&lt;/strong&gt; requires that every value in a program has a type, but allows  dynamically-typed contexts to manipulate values. In other words, every Thorn  value is an instance of a statically-declared class and classes may contain  dynamically-typed methods.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Reticulated&lt;/strong&gt; lets a program combine static and dynamic &lt;em&gt;expressions&lt;/em&gt; and  guarantees that the combination has a well-defined semantics (Vitousek, Swords, and Siek &lt;a href="https://dl.acm.org/citation.cfm?id=3009849"&gt;POPL 2017&lt;/a&gt;).&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;That makes five different systems. There are 15 other systems in the figure, and many more in the world. How can we make sense of this space? We claim: by understanding each system&amp;rsquo;s protocol for checking  dynamically-typed values at a &lt;em&gt;type boundary&lt;/em&gt; (between static and dynamic code).&lt;/p&gt;

&lt;h3 id="main-contribution"&gt;Main Contribution&lt;/h3&gt;

&lt;p&gt;In the paper &lt;a href="http://drops.dagstuhl.de/opus/volltexte/2015/5031/"&gt;&lt;em&gt;A Spectrum of Type Soundness and Performance&lt;/em&gt;&lt;/a&gt;,  we define a tiny mixed-typed language and show three ways to define the  behavior of programs &amp;mdash; based on three protocols for checking  dynamically-typed values that cross a boundary into statically-typed code.&lt;/p&gt;

&lt;p&gt;The three behaviors are inspired by existing languages. A &lt;strong&gt;higher order&lt;/strong&gt; behavior ensures that dynamically-typed  values match the static type at a boundary &amp;mdash; by checking the value when possible,  and by monitoring the value&amp;rsquo;s future interactions when necessary. A &lt;strong&gt;first order&lt;/strong&gt; behavior performs a yes-or-no check on dynamically-typed values  and never monitors their future behavior. An &lt;strong&gt;erasure&lt;/strong&gt; behavior does no checking whatsoever.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;Example (monitors): if typed code expects a function from numbers to numbers and receives an untyped function &lt;code&gt;f&lt;/code&gt;, then one way to enforce the type boundary is to wrap &lt;code&gt;f&lt;/code&gt; in a proxy to assert that every future call to &lt;code&gt;f&lt;/code&gt; returns a number. In this case, the proxy monitors the behavior of &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Concretely, the paper defines three formal semantics with the same names. The &lt;strong&gt;higher-order&lt;/strong&gt; semantics enforces full types at the boundaries (Section 2.3). The &lt;strong&gt;first-order&lt;/strong&gt; semantics enforces type constructors at the boundaries, and  furthermore enforces type constructors on every &amp;ldquo;selector&amp;rdquo; operation in typed  code, e.g., function application, data structure access (Section 2.5). The &lt;strong&gt;erasure&lt;/strong&gt; semantics simply ignores the types (Section 2.4).&lt;/p&gt;

&lt;p&gt;Each semantics satisfies a &lt;em&gt;different&lt;/em&gt; notion of soundness for mixed-typed  programs, and each notion is slightly weaker than soundness for fully-typed  programs. The paper states these theorems (Section 2) and the  &lt;a href="https://repository.library.northeastern.edu/files/neu:cj82rk279"&gt;online supplement&lt;/a&gt;  gives full proofs.&lt;/p&gt;

&lt;p&gt;The paper has more to say about the meta-theory. See section 2 and section 4.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;To the best of our knowledge, this paper is the first to explicitly acknowledge that different approaches to a mixed-typed language lead to different notions of soundness. Other papers state type soundness theorems for &lt;a href="https://dl.acm.org/citation.cfm?id=2676971"&gt;subset of the language&lt;/a&gt; (in the spirit of &lt;a href="http://soundiness.org/"&gt;soundiness&lt;/a&gt;) or use the name &amp;ldquo;type soundness&amp;rdquo; to describe &lt;a href="https://dl.acm.org/citation.cfm?id=2676971"&gt;a different property&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Next, we used the three semantics as a guide to arrive at three compilers for  Typed Racket. The higher-order compiler is the standard Typed Racket. The first-order compiler is something we built, based on the semantics. The erasure compiler simply ignores the type annotations &amp;mdash; similar to Typed Racket&amp;rsquo;s  &lt;a href="http://docs.racket-lang.org/ts-reference/Typed_Racket_Syntax_Without_Type_Checking.html"&gt;no-check&lt;/a&gt; language.&lt;/p&gt;

&lt;p&gt;Using this set-up, we measured the performance of mixed-typed programs via  each compiler using the method suggested by Takikawa et. al (&lt;a href="https://www2.ccs.neu.edu/racket/pubs/popl16-tfgnvf.pdf"&gt;POPL 2016&lt;/a&gt;). The programs we measured are the non-object-oriented ones from our &lt;a href="http://docs.racket-lang.org/gtp-benchmarks/index.html"&gt;benchmark suite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To some extent, the performance results confirm conjectures from the literature. The full results, however, include many surprises &amp;mdash; see section 3 of the paper,  section B of the &lt;a href="https://repository.library.northeastern.edu/files/neu:cj82rk279"&gt;supplement&lt;/a&gt;,  and/or the &lt;a href="http://www.ccs.neu.edu/home/types/publications/apples-to-apples/gf-icfp-2018-slides.pdf"&gt;slides&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="implications"&gt;Implications&lt;/h3&gt;

&lt;ol&gt;
 &lt;li&gt;The model in the paper is one way to understand the different approaches  to mixed-typed languages. See section 5 of the paper,  section D of the &lt;a href="https://repository.library.northeastern.edu/files/neu:cj82rk279"&gt;supplement&lt;/a&gt;,  or &lt;a href="http://www.ccs.neu.edu/home/types/publications/apples-to-apples/gf-icfp-2018-slides.pdf"&gt;slide 114&lt;/a&gt;.&lt;/li&gt;
 &lt;li&gt;Programmers using mixed-typed languages need to know what guarantees their  types provide.  (It is &lt;a href="https://twitter.com/jbandi/status/965005464638541825"&gt;not safe to assume that TypeScript types give the same guarantees as OCaml types&lt;/a&gt;!)  Section 4 of the paper contains many examples of how the different guarantees  may affect practice.&lt;/li&gt;
 &lt;li&gt;The relative performance of different approaches is more nuanced than the  literature suggests. Our paper gives a first systematic comparison based on  implementations that have clear areas for improvement. The question is:  can we find improvements that lead to asymptotic differences, or is it a  battle for constant factors?&lt;/li&gt;&lt;/ol&gt;

&lt;blockquote&gt;
 &lt;p&gt;Note: in this post, a &lt;em&gt;mixed-typed language&lt;/em&gt; is one that allows any combination of static and dynamic typing. A &lt;em&gt;gradually-typed language&lt;/em&gt; is one that allows a certain kind of mixing that satisfies properties defined by Siek, Vitousek, Cimini, and Boyland (&lt;a href="http://drops.dagstuhl.de/opus/volltexte/2015/5031/"&gt;SNAPL 2015&lt;/a&gt;).&lt;/p&gt;&lt;/blockquote&gt;</description></item>
  <item>
   <title>Sampling Gradual Typing Performance</title>
   <link>http://prl.ccs.neu.edu/blog/2018/05/08/sampling-gradual-typing-performance/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2018-05-08-sampling-gradual-typing-performance</guid>
   <pubDate>Tue, 08 May 2018 15:37:37 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;This post explains the sampling method introduced in the paper &lt;a href="http://www.ccs.neu.edu/home/types/publications/publications.html#gm-pepm-2018"&gt;&lt;em&gt;On the Cost of Type-Tag Soundness&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h2 id="quick-reference-how-to-apply-the-method"&gt;Quick Reference: How to apply the method&lt;/h2&gt;

&lt;ol&gt;
 &lt;li&gt;Find an untyped program, measure its running time.&lt;/li&gt;
 &lt;li&gt;Define a &lt;em&gt;granularity&lt;/em&gt; for type annotations (by-function, by-module, by-program, &amp;hellip;.).&lt;/li&gt;
 &lt;li&gt;Define a sample size &lt;strong&gt;s&lt;/strong&gt; and number of samples &lt;strong&gt;r&lt;/strong&gt;.&lt;/li&gt;
 &lt;li&gt;Randomly select &lt;strong&gt;s&lt;/strong&gt; &lt;em&gt;configurations&lt;/em&gt; uniformly at random, measure their running time.&lt;/li&gt;
 &lt;li&gt;Repeat the previous step &lt;strong&gt;r&lt;/strong&gt; times.&lt;/li&gt;
 &lt;li&gt;Pick a positive real number &lt;strong&gt;D&lt;/strong&gt;.&lt;/li&gt;
 &lt;li&gt;Count the proportion of configurations in each sample with running time less-than-or-equal-to &lt;strong&gt;D&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;Build a 95% confidence interval for the &lt;strong&gt;r&lt;/strong&gt; proportions computed in the previous step&lt;/li&gt;
 &lt;li&gt;Conclusion: there is a good chance that your interval contains the true proportion of configurations with running time less-than-or-equal-to &lt;strong&gt;D&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;h2 id="background-what-to-measure"&gt;Background: what to measure&lt;/h2&gt;

&lt;p&gt;A migratory typing system adds static typing to a dynamically-typed (or, untyped) language. The recipe for &amp;ldquo;adding static typing&amp;rdquo; has a few steps:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;add a syntax for type annotations&lt;/li&gt;
 &lt;li&gt;add a static type checker&lt;/li&gt;
 &lt;li&gt;add a semantics for statically-typed parts of the program&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;If the semantics for statically-typed parts of the program is &lt;strong&gt;not&lt;/strong&gt; the same  as the semantics for dynamically-typed parts, then it is important to measure  performance.&lt;/p&gt;

&lt;p&gt;The key question is: how does adding type annotations affect the  running time of a working program? We do not know how to answer this question directly.&lt;/p&gt;

&lt;p&gt;An easier question, that we can answer, is: for a few programs each with  one full set of type annotations, how does adding or removing the chosen type  annotations affect the running time of these programs?&lt;/p&gt;

&lt;p&gt;The next two sections give two methods for answering this question.&lt;/p&gt;

&lt;h2 id="exhaustive-method"&gt;Exhaustive Method&lt;/h2&gt;

&lt;p&gt;One way to answer our easier question is to remove type annotations one  &amp;ldquo;unit&amp;rdquo; at a time and measure the running time of all these partially-typed  programs. We call the &amp;ldquo;unit&amp;rdquo; the &lt;em&gt;granularity&lt;/em&gt; of the performance evaluation. For example, some choices for granularity are to remove types one module  at a time, to remove types one function at a time, or to remove types  one variable at a time. We call the &amp;ldquo;partially-typed programs&amp;rdquo; the &lt;em&gt;configurations&lt;/em&gt; of the original  dynamically-typed program. Note that the number of configurations depends on the choice of granularity  &amp;mdash; I can&amp;rsquo;t just use the word &lt;em&gt;configurations&lt;/em&gt; without telling you the  granularity I have in mind.&lt;/p&gt;

&lt;p&gt;After measuring the running time of all configurations, we can summarize the  results. One way to summarize is to pick a number &lt;strong&gt;D&lt;/strong&gt; and count the number of configurations  that run at most &lt;strong&gt;D&lt;/strong&gt; times slower than the original dynamically-typed program. If this number is large, then the takeaway is:  if &lt;em&gt;you&lt;/em&gt; are willing to accept at most a &lt;strong&gt;D&lt;/strong&gt;x slowdown, and you add your  own type annotations to your own program, then there&amp;rsquo;s some hope that your  configuration runs at most &lt;strong&gt;D&lt;/strong&gt; times slower than your original program.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;Credit for the exhaustive method: &lt;a href="https://www2.ccs.neu.edu/racket/pubs/popl16-tfgnvf.pdf"&gt;&lt;em&gt;Is Sound Gradual Typing Dead?&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://www2.ccs.neu.edu/racket/pubs/ecoop2015-takikawa-et-al.pdf"&gt;&lt;em&gt;Toward Practical Gradual Typing&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="simple-random-approximation-method"&gt;Simple Random Approximation Method&lt;/h2&gt;

&lt;p&gt;The method above does not scale to large programs or fine granularities  because it asks for an exponential number of measurements. E.g., if there are 20 units to add or remove types from, then there are 1 million  configurations to measure. Exponentials are bad.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ccs.neu.edu/home/types/publications/publications.html#gm-pepm-2018"&gt;&lt;em&gt;On the Cost of Type-Tag Soundness&lt;/em&gt;&lt;/a&gt;,  suggests a method based on simple random sampling that answers a similar question. Instead of measuring the true proportion of configurations that run at most  &lt;strong&gt;D&lt;/strong&gt; times slower than the original dynamically-typed program, we:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;pick a sample size &lt;strong&gt;s&lt;/strong&gt; (in the paper, we used &lt;strong&gt;s = 10M&lt;/strong&gt; where &lt;strong&gt;M&lt;/strong&gt; is the number of units),&lt;/li&gt;
 &lt;li&gt;pick a number of samples &lt;strong&gt;r&lt;/strong&gt; (in the paper, we used &lt;strong&gt;r = 10&lt;/strong&gt;),&lt;/li&gt;
 &lt;li&gt;and build a 95% confidence interval for the true proportion of configurations  that run at most &lt;strong&gt;D&lt;/strong&gt; times slower than the original program (from the  &lt;strong&gt;r&lt;/strong&gt; proportions of configurations that run at most &lt;strong&gt;D&lt;/strong&gt; times slower than the  original program in each of the &lt;strong&gt;r&lt;/strong&gt; samples).&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;The method is outlined above, described in the paper, and validated in that paper&amp;rsquo;s appendix. Please let us know if you have more questions.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;Maybe you&amp;rsquo;re wondering, &amp;ldquo;gee why do they keep writing out &amp;lsquo;configurations that  run at most &amp;hellip;.&amp;rsquo; instead of something shorter?&amp;rdquo;. Well, the short version is &lt;em&gt;&lt;strong&gt;D&lt;/strong&gt;-deliverable&lt;/em&gt; and it was introduced in the &lt;a href="https://www2.ccs.neu.edu/racket/pubs/popl16-tfgnvf.pdf"&gt;&lt;em&gt;Is Sound Gradual Typing Dead?&lt;/em&gt;&lt;/a&gt; paper. Unfortunately, (1) that paper instantiated &lt;strong&gt;D&lt;/strong&gt; to &lt;strong&gt;3&lt;/strong&gt;-deliverable in order to  explain a few graphs and (2) at least two published papers (&lt;a href="https://dl.acm.org/citation.cfm?id=3009849"&gt;paper 1&lt;/a&gt;, &lt;a href="https://dl.acm.org/citation.cfm?id=3133878"&gt;paper 2&lt;/a&gt;)  now cite us as saying &lt;strong&gt;3&lt;/strong&gt;x overhead is the cutoff between a good migratory  typing system and a bad one.&lt;/p&gt;
 &lt;p&gt;&amp;hellip;&lt;/p&gt;
 &lt;p&gt;If we can&amp;rsquo;t trust scientists to understand, then we &lt;em&gt;definitely&lt;/em&gt; can&amp;rsquo;t trust  you folks on the internet.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="faq"&gt;FAQ&lt;/h2&gt;

&lt;h3 id="q-what-is-the-sampling-method-useful-for"&gt;Q. What is the sampling method useful for?&lt;/h3&gt;

&lt;ul&gt;
 &lt;li&gt;Making a confidence interval for the true proportion of configurations that  run at most &lt;strong&gt;D&lt;/strong&gt; times slower than some baseline, for your favorite value of &lt;strong&gt;D&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;

&lt;h3 id="q-what-is-the-sampling-method-not-useful-for"&gt;Q. What is the sampling method &lt;strong&gt;not&lt;/strong&gt; useful for?&lt;/h3&gt;

&lt;ul&gt;
 &lt;li&gt;Finding the slowest configuration.&lt;/li&gt;
 &lt;li&gt;Finding the average running time of all configurations.&lt;/li&gt;
 &lt;li&gt;Evaluations where &amp;ldquo;removing types&amp;rdquo; might involve changing &lt;strong&gt;List[Int]&lt;/strong&gt; to &lt;strong&gt;List[Dyn]&lt;/strong&gt;, etc.&lt;/li&gt;
 &lt;li&gt;Situations where its wrong to assume that a programmer will start from untyped and pick a configuration uniformly at random&lt;/li&gt;
 &lt;li&gt;&amp;hellip;. many more &amp;hellip;.&lt;/li&gt;&lt;/ul&gt;

&lt;h3 id="q-why-is-it-okay-to-choose-d-after-collecting-the-samples"&gt;Q. Why is it okay to choose &lt;strong&gt;D&lt;/strong&gt; after collecting the samples?&lt;/h3&gt;

&lt;p&gt;The &amp;ldquo;quick reference&amp;rdquo; at the top of this post suggests choosing a value for &lt;strong&gt;D&lt;/strong&gt;  (the cutoff between good and bad performance) after sampling configurations  and measuring their running time. This may sound strange, because (1) the value of &lt;strong&gt;D&lt;/strong&gt; affects our bottom-line  judgment about the proportion of configurations with good performance, and (2)  shouldn&amp;rsquo;t and value that affects the bottom line be fixed before taking samples? (To avoid accidental &lt;a href="https://en.wikipedia.org/wiki/Data_dredging"&gt;data dredging&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The reason it is ok to pick &lt;strong&gt;D&lt;/strong&gt; after taking the sample is that the  running times in the sample are independent of the choice of &lt;strong&gt;D&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, if one person chose &lt;strong&gt;D=3&lt;/strong&gt; and a second person chose &lt;strong&gt;D=9&lt;/strong&gt;,  both would follow the same protocol independent of &lt;strong&gt;D&lt;/strong&gt; to take samples.&lt;/p&gt;

&lt;h3 id="q-how-does-migratory-typing-relate-to-gradual-typing"&gt;Q. How does migratory typing relate to gradual typing?&lt;/h3&gt;

&lt;p&gt;Gradual typing is not just about adding a type system to an existing programming  language. See &lt;a href="http://drops.dagstuhl.de/opus/volltexte/2015/5031/"&gt;&lt;em&gt;Refined Criteria for Gradual Typing&lt;/em&gt;&lt;/a&gt;  and &lt;a href="http://drops.dagstuhl.de/opus/volltexte/2017/7120/"&gt;&lt;em&gt;Migratory Typing: 10 Years Later&lt;/em&gt;&lt;/a&gt;  for details.&lt;/p&gt;

&lt;h3 id="q-do-you-have-code-i-can-use-to-plot-sampling-data"&gt;Q. Do you have code I can use to plot sampling data?&lt;/h3&gt;

&lt;p&gt;Yes, start here:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://docs.racket-lang.org/gtp-plot/index.html#%28def._%28%28lib._gtp-plot%2Fplot..rkt%29._samples-plot%29%29"&gt;http://docs.racket-lang.org/gtp-plot/index.html#%28def._%28%28lib._gtp-plot%2Fplot..rkt%29._samples-plot%29%29&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Please ask questions and open issues if you have trouble. The source is here:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://github.com/bennn/gtp-plot"&gt;https://github.com/bennn/gtp-plot&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h3 id="q-where-is-code-for-the-sampling-paper"&gt;Q. Where is code for the sampling paper?&lt;/h3&gt;

&lt;p&gt;Start here:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://pkgd.racket-lang.org/pkgn/package/gm-pepm-2018"&gt;https://pkgd.racket-lang.org/pkgn/package/gm-pepm-2018&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Source is here:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://github.com/nuprl/retic_performance"&gt;https://github.com/nuprl/retic_performance&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="closing-thoughts"&gt;Closing Thoughts&lt;/h2&gt;

&lt;p&gt;Statistics is easy to do wrong. Please let us know if you think our method is doing bad statistics.&lt;/p&gt;</description></item>
  <item>
   <title>The Racket School 2018: Create your own language</title>
   <link>http://prl.ccs.neu.edu/blog/2018/04/27/the-racket-school-2018-create-your-own-language/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2018-04-27-the-racket-school-2018-create-your-own-language</guid>
   <pubDate>Fri, 27 Apr 2018 21:35:22 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;The Racket School 2018: Create your own language • 9–13 July • Salt Lake City&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;The Racket team has spent over thirty years developing and refining a coherent intellectual tradition for studying and building programming languages. This year’s school will introduce participants to Racket’s framework for language-oriented programming, which the summer school faculty recently spelled out in a a cover article in the &lt;a href="https://tinyurl.com/RacketCACM"&gt;Communications of the ACM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Concretely, the 2018 Racket Summer School will cover the following topics:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;the spectrum of programming languages;&lt;/li&gt;
 &lt;li&gt;modules and syntax, or languages as libraries;&lt;/li&gt;
 &lt;li&gt;DrRacket’s support for language-oriented programming;&lt;/li&gt;
 &lt;li&gt;a domain-specific language for adding types to languages;&lt;/li&gt;
 &lt;li&gt;tools and techniques for implementing notational conveniences; and&lt;/li&gt;
 &lt;li&gt;research challenges in language-oriented programming.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;If these topics intrigue you, attend the Racket Summer School:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://summer-school.racket-lang.org/2018/"&gt;http://summer-school.racket-lang.org/2018/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;This is not your run-of-the-mill summer school. We will do our best to make it exciting, entertaining, and useful to a broad spectrum of attendees, both academic and industrial.&lt;/p&gt;

&lt;p&gt;P.S. We will send you your first problem set in June, a month before the summer school to whet your appetite.&lt;/p&gt;</description></item>
  <item>
   <title>PLT Redex FAQ</title>
   <link>http://prl.ccs.neu.edu/blog/2017/09/25/plt-redex-faq/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2017-09-25-plt-redex-faq</guid>
   <pubDate>Mon, 25 Sep 2017 23:39:16 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;A short guide to Redex concepts, conventions, and common mistakes.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;To contribute to this FAQ, submit issues and pull requests to:  &lt;a href="https://github.com/nuprl/website/"&gt;https://github.com/nuprl/website/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id="q-what-is-redex-useful-for"&gt;Q. What is Redex useful for?&lt;/h3&gt;

&lt;ol&gt;
 &lt;li&gt;declaring &lt;a href="https://en.wikipedia.org/wiki/Regular_tree_grammar"&gt;regular tree grammars&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;defining &lt;em&gt;pattern&lt;/em&gt;-based judgments and relations on &lt;em&gt;terms&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;testing properties of the above&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;More generally, Redex is helpful for experimenting with a programming language  design, and helping you decide what you might want to prove about a language.&lt;/p&gt;

&lt;h3 id="q-what-is-redex-not-useful-for"&gt;Q. What is Redex &lt;strong&gt;not&lt;/strong&gt; useful for?&lt;/h3&gt;

&lt;p&gt;Proving theorems about a grammar, judgment, or relation.&lt;/p&gt;

&lt;h3 id="q-what-is-a-term"&gt;Q. What is a &lt;em&gt;term&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;Informally, a term is:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;a Redex &amp;ldquo;atom&amp;rdquo;, or&lt;/li&gt;
 &lt;li&gt;an object that represents a sequence of characters.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;More formally, a term is the result of evaluating &lt;strong&gt;(term X)&lt;/strong&gt;, where &lt;strong&gt;X&lt;/strong&gt; is  any syntactically-correct Racket expression.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ racket
Welcome to Racket v6.10.0.3.
&amp;gt; (require redex/reduction-semantics)
&amp;gt; (term 42)
42
&amp;gt; (term (+ 2 2))
'(+ 2 2)
&amp;gt; (term ("hello" world (#false)))
'("hello" world (#f))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some terms may look strange. That&amp;rsquo;s OK, because a term by itself has no meaning.&lt;/p&gt;

&lt;p&gt;Terms can refer to previously-defined values using the &lt;strong&gt;unquote&lt;/strong&gt; escape.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; (define x (term 42))
&amp;gt; (term (+ 2 x))
'(+ 2 x)
&amp;gt; (term (+ ,x (unquote x)))
'(+ 42 42)&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q-what-is-a-redex-model"&gt;Q. What is a &lt;em&gt;Redex model&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;A Redex model is collection of tools for working with terms. The tools may include:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;em&gt;languages&lt;/em&gt;, to define a grammar for terms&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;judgments&lt;/em&gt;, to describe properties of terms or relations between terms&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;metafunctions&lt;/em&gt;, to transform terms&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;reduction relations&lt;/em&gt;, to define a term rewriting system&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;The goal of these tools is to encode a &amp;ldquo;real thing&amp;rdquo; (maybe, a programming language)  using Redex terms.&lt;/p&gt;

&lt;h3 id="q-what-is-a-language"&gt;Q. What is a language?&lt;/h3&gt;

&lt;p&gt;A Redex &lt;em&gt;language&lt;/em&gt; is a named set of non-terminals, &lt;em&gt;patterns&lt;/em&gt;, and &lt;em&gt;binding forms&lt;/em&gt;. For example, a Redex model of the natural numbers might start with this language:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-language nat
  [N ::= Zero
         (Plus1 N)])&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
 &lt;li&gt;the name of the language is &lt;strong&gt;nat&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;the non-terminal &lt;strong&gt;N&lt;/strong&gt; is associated with two patterns: &lt;strong&gt;Zero&lt;/strong&gt; and &lt;strong&gt;(Plus1 N)&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;there are no &lt;em&gt;binding forms&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Each pattern describes a syntactic category of terms. Each non-terminal gives a name to the union of the patterns that follow it.&lt;/p&gt;

&lt;p&gt;The non-terminal &lt;strong&gt;N&lt;/strong&gt; describes all terms that are either:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;the symbol &lt;strong&gt;Zero&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;lists of the form &lt;strong&gt;(Plus1 N)&lt;/strong&gt;, where &lt;strong&gt;N&lt;/strong&gt; is either &lt;strong&gt;Zero&lt;/strong&gt; or another &amp;ldquo;Plus1&amp;rdquo;&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(term Zero)
(term (Plus1 Zero))
(term (Plus1 (Plus1 Zero)))
(term (Plus1 (Plus1 (Plus1 Zero))))
;; .... and so on&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a language has binding forms, then some terms can introduce names. See the question on &lt;em&gt;binding forms&lt;/em&gt; (below) for an example.&lt;/p&gt;

&lt;h3 id="q-what-is-a-pattern"&gt;Q. What is a pattern?&lt;/h3&gt;

&lt;p&gt;A pattern is a sequence of characters and variables. If you have: (1) a language, and (2) a pattern that contains &lt;em&gt;named non-terminals&lt;/em&gt; from the language,  then you can ask whether a Redex term matches the pattern.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;named non-terminal&lt;/em&gt; for a language &lt;strong&gt;L&lt;/strong&gt; is an identifier made of:  (1) a non-terminal from &lt;strong&gt;L&lt;/strong&gt;, (2) an underscore (&lt;strong&gt;_&lt;/strong&gt;), and (3) any other identifier. See the FAQ entry below.&lt;/p&gt;

&lt;p&gt;For example, &lt;strong&gt;(redex-match? L p t)&lt;/strong&gt; returns &lt;strong&gt;#true&lt;/strong&gt; if the term &lt;strong&gt;t&lt;/strong&gt; matches  the pattern &lt;strong&gt;p&lt;/strong&gt; relative to the language &lt;strong&gt;L&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-language nat
  [N ::= Zero (Plus1 N)])

(redex-match? nat N_some-name (term Zero))
;; #true
(redex-match? nat (Plus1 N_a) (term Zero))
;; #false
(redex-match? nat (Plus1 N_0) (term (Plus1 (Plus1 Zero))))
;; #true&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;strong&gt;(redex-match? L p t)&lt;/strong&gt; is &lt;strong&gt;#true&lt;/strong&gt;, then &lt;strong&gt;(redex-match L p t)&lt;/strong&gt; shows how  named non-terminals in the pattern bind to subterms of &lt;strong&gt;t&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(redex-match nat N_0 (term Zero))
;; (list (match (list (bind 'N_0 'Zero))))
(redex-match nat (Plus1 N_0) (term Zero))
;; #f
(redex-match nat (Plus1 N_0) (term (Plus1 (Plus1 Zero))))
;; (list (match (list (bind 'N_0 '(Plus1 Zero)))))&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q-what-is-a-named-non-terminal"&gt;Q. What is a named non-terminal?&lt;/h3&gt;

&lt;p&gt;A named non-terminal in a language &lt;strong&gt;L&lt;/strong&gt; is an identifier of the form &lt;strong&gt;X_Y&lt;/strong&gt;, where:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;X&lt;/strong&gt; is a non-terminal from &lt;strong&gt;L&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Y&lt;/strong&gt; is any identifier&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;The name helps when one pattern contains multiple occurrences of the same non-terminal. If you want the two occurrences to bind the same term, then use the same name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-language trees
  [binary-tree ::= Leaf
                   (Node binary-tree binary-tree)])

(redex-match trees
  (Node binary-tree_left binary-tree_right)
  (term (Node Leaf (Node Leaf Leaf))))
;; (list
;;  (match
;;   (list (bind 'binary-tree_left 'Leaf)
;;         (bind 'binary-tree_right '(Node Leaf Leaf)))))&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q-what-else-can-patterns-express"&gt;Q. What else can patterns express?&lt;/h3&gt;

&lt;p&gt;Redex patterns may contain special identifiers to guide pattern-matching. For instance:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;The &lt;strong&gt;_&lt;/strong&gt; pattern matches any term (and does not bind).&lt;/li&gt;
 &lt;li&gt;A pattern &lt;strong&gt;(p &amp;hellip;)&lt;/strong&gt; matches any sequence whose elements match the pattern &lt;strong&gt;p&lt;/strong&gt;.  If the pattern &lt;strong&gt;p&lt;/strong&gt; is a named non-terminal, then the non-terminal binds  a sequence of subterms.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(redex-match? nat (Plus1 _) (term (Plus1 9)))
;; #true
(redex-match? nat (N_0 ...) (term ()))
;; #true
(redex-match? nat (N_0 ...) (term (Zero)))
;; #true
(redex-match nat (N_0 ...) (term (Zero Zero Zero)))
;; (list (match (list (bind 'N_0 '(Zero Zero Zero)))))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href="http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28tech._pattern%29"&gt;the Redex reference&lt;/a&gt; for the full pattern language,  including the &lt;em&gt;named and unique non-terminals&lt;/em&gt; of the form &lt;strong&gt;X_!_Y&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id="q-what-can-patterns-not-express"&gt;Q. What can patterns &lt;strong&gt;not&lt;/strong&gt; express?&lt;/h3&gt;

&lt;ul&gt;
 &lt;li&gt;Disjunctions of patterns, e.g., &amp;ldquo;number or boolean&amp;rdquo;.  (Use a language non-terminal.)&lt;/li&gt;
 &lt;li&gt;Negations of patterns. (Compose &lt;strong&gt;not&lt;/strong&gt; with &lt;strong&gt;redex-match?&lt;/strong&gt;.)&lt;/li&gt;
 &lt;li&gt;Some non-regular patterns. (Named  dots &lt;a href="http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28tech._pattern%29"&gt;&lt;code&gt;..._N&lt;/code&gt;&lt;/a&gt;  or &lt;a href="http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._define-language%29%29"&gt;&lt;code&gt;define-language&lt;/code&gt;&lt;/a&gt;  with a side condition may be able to help.)&lt;/li&gt;&lt;/ul&gt;

&lt;h3 id="q-what-is-a-judgment"&gt;Q. What is a judgment?&lt;/h3&gt;

&lt;p&gt;A Redex &lt;em&gt;judgment&lt;/em&gt; form defines a relation on terms. The relation is defined by a set of inference rules.&lt;/p&gt;

&lt;p&gt;Programming languages papers use inference rules all the time. Redex can express many of the judgments in papers; for example:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;well-formedness conditions (i.e., whether a term contains free variables)&lt;/li&gt;
 &lt;li&gt;type checking rules&lt;/li&gt;
 &lt;li&gt;type inference rules&lt;/li&gt;
 &lt;li&gt;evaluation relations&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Every judgment needs (1) a language (2) a mode (3) a contract (4) a set of inference rules. For example, the following judgment defines an equality relation on natural numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-language nat
  [N ::= Zero (Plus1 N)])

(define-judgment-form nat
  #:mode (N= I I)
  #:contract (N= N N)
  [
   --- Zero=
   (N= Zero Zero)]
  [
   (where (Plus1 N_0--) N_0)
   (where (Plus1 N_1--) N_1)
   (N= N_0-- N_1--)
   --- Plus1=
   (N= N_0 N_1)])&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
 &lt;li&gt;the language is &lt;strong&gt;nat&lt;/strong&gt;; Redex uses the language to interpret patterns&lt;/li&gt;
 &lt;li&gt;the mode is &lt;strong&gt;(N= I I)&lt;/strong&gt;; this means &lt;strong&gt;N=&lt;/strong&gt; is the name of a judgment that  expects two input terms (or, &lt;strong&gt;N=&lt;/strong&gt; is a binary relation on terms)&lt;/li&gt;
 &lt;li&gt;the contract is &lt;strong&gt;(N= N N)&lt;/strong&gt;; in other words, &lt;strong&gt;N=&lt;/strong&gt; expects two terms that  match the &lt;strong&gt;N&lt;/strong&gt; non-terminal from the &lt;strong&gt;nat&lt;/strong&gt; language&lt;/li&gt;
 &lt;li&gt;there are two inference rules, named &lt;strong&gt;Zero=&lt;/strong&gt; and &lt;strong&gt;Plus1=&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;the &lt;strong&gt;Zero=&lt;/strong&gt; rule states that &lt;strong&gt;(N= Zero Zero)&lt;/strong&gt; always holds&lt;/li&gt;
 &lt;li&gt;the &lt;strong&gt;Plus1=&lt;/strong&gt; rule states that &lt;strong&gt;(N= N_0 N_1)&lt;/strong&gt; holds if &lt;strong&gt;N_0&lt;/strong&gt; and &lt;strong&gt;N_1&lt;/strong&gt;  are both &lt;strong&gt;Plus1&lt;/strong&gt; terms whose contents are related by &lt;strong&gt;N=&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;The &lt;strong&gt;where&lt;/strong&gt; clauses are &lt;em&gt;guards&lt;/em&gt;. When Redex tries to apply a rule with premises of the form  &lt;strong&gt;(where pattern term)&lt;/strong&gt;, it checks that each pattern matches the corresponding term. If not, Redex stops applying the rule. See &lt;a href="http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._define-judgment-form%29%29"&gt;the Redex reference&lt;/a&gt; for more.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(judgment-holds (N= Zero Zero))
;; #true
(judgment-holds (N= (Plus1 (Plus1 Zero)) (Plus1 (Plus1 Zero))))
;; #false
(judgment-holds (N= (Plus1 Zero) (Plus1 (Plus1 Zero))))
;; #true&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: the inference rules form a &lt;em&gt;set&lt;/em&gt;, not a &lt;em&gt;sequence&lt;/em&gt;. So when you ask Redex whether &lt;strong&gt;(judgment-holds (N= Zero Zero))&lt;/strong&gt;, it applies  all rules that match &lt;strong&gt;(N= Zero Zero)&lt;/strong&gt;. For &lt;strong&gt;N=&lt;/strong&gt; this is just one rule, but in general it could be many rules.&lt;/p&gt;

&lt;h3 id="q-what-is-a-judgment-form-mode"&gt;Q. What is a judgment form &lt;strong&gt;#:mode&lt;/strong&gt;?&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;#:mode&lt;/strong&gt; declaration expects a list of the form &lt;strong&gt;(id pos-use &amp;hellip;)&lt;/strong&gt;,  where &lt;strong&gt;id&lt;/strong&gt; is an identifier and each &lt;strong&gt;pos-use&lt;/strong&gt; is either  &lt;strong&gt;I&lt;/strong&gt; or &lt;strong&gt;O&lt;/strong&gt;. These declarations say four things:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;&lt;strong&gt;id&lt;/strong&gt; is the name of a new judgment form&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;id&lt;/strong&gt; expects &lt;strong&gt;N&lt;/strong&gt; arguments, where &lt;strong&gt;N&lt;/strong&gt; is the number of &lt;strong&gt;pos-use&lt;/strong&gt; symbols&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;id&lt;/strong&gt; expects an &lt;em&gt;input&lt;/em&gt; at each position where the mode contains an &lt;strong&gt;I&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;id&lt;/strong&gt; produces an &lt;em&gt;output&lt;/em&gt; at each position where the mode contains an &lt;strong&gt;O&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;For example, a type inference judgment may take an expression as input and output a type. Here&amp;rsquo;s a fast and easy type inference judgment for arithmetic expressions. Given any term &lt;strong&gt;e_0&lt;/strong&gt;, the judgment outputs the type &lt;strong&gt;Int&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-language Arith
  (e ::= integer (e + e))
  (τ ::= Int))

(define-judgment-form Arith
  #:mode (infer-type I O)
  #:contract (infer-type e τ)
  [
   --- T-Int
   (infer-type e_0 Int)])&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q-what-can-judgments-not-express"&gt;Q. What can judgments &lt;strong&gt;not&lt;/strong&gt; express?&lt;/h3&gt;

&lt;p&gt;Redex does not support inference rules that require guessing.&lt;/p&gt;

&lt;p&gt;One example of this is a transitivity rule: "&lt;strong&gt;τ_0&lt;/strong&gt; is related to &lt;strong&gt;τ_2&lt;/strong&gt;  if there exists a &lt;strong&gt;τ_1&lt;/strong&gt; such that &lt;strong&gt;τ_0&lt;/strong&gt; is related to &lt;strong&gt;τ_1&lt;/strong&gt; and &lt;strong&gt;τ_1&lt;/strong&gt; is  related to &lt;strong&gt;τ_2&lt;/strong&gt;". The following example tries to define a transitive subtyping (&lt;strong&gt;&amp;lt;:&lt;/strong&gt;) relation,  but Redex rejects the &lt;strong&gt;S-Trans&lt;/strong&gt; rule.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-language SomeTypes
  (τ ::= (→ τ τ) Integer))

(define-judgment-form SomeTypes
  #:mode (&amp;lt;: I I)
  #:contract (&amp;lt;: τ τ)
  [
   (&amp;lt;: τ_0 τ_1)
   (&amp;lt;: τ_1 τ_2)
   --- S-Trans
   (&amp;lt;: τ_0 τ_2)]
  [
   --- S-Refl
   (&amp;lt;: τ_0 τ_0)]
  [
   (&amp;lt;: τ_dom-1 τ_dom-0)
   (&amp;lt;: τ_cod-0 τ_cod-1)
   --- S-Arrow
   (&amp;lt;: (→ τ_dom-0 τ_cod-0) (→ τ_dom-1 τ_cod-1))])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error is that in the rule &lt;strong&gt;S-Trans&lt;/strong&gt;,  the named non-terminal &lt;strong&gt;τ_1&lt;/strong&gt; appears in an input position but is not bound to a term.&lt;/p&gt;

&lt;h3 id="q-what-is-a-metafunction"&gt;Q. What is a metafunction?&lt;/h3&gt;

&lt;p&gt;A metafunction is a term-level function on terms.&lt;/p&gt;

&lt;p&gt;Every metafunction needs: (1) a language (2) a name (3) a contract (4) a sequence of guarded input/output cases.&lt;/p&gt;

&lt;p&gt;Here is a metafunction that returns &lt;strong&gt;#true&lt;/strong&gt; when given two equal natural numbers. The definition is similar to the &lt;strong&gt;N=&lt;/strong&gt; judgment form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-metafunction nat
  N=? : N N -&amp;gt; boolean
  [(N=? Zero Zero)
   #true]
  [(N=? N_0 N_1)
   (N=? N_0-- N_1--)
   (where (Plus1 N_0--) N_0)
   (where (Plus1 N_1--) N_1)]
  [(N=? N_0 N_1)
   #false])&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
 &lt;li&gt;the metafunction is named &lt;strong&gt;N=?&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;its contract is &lt;strong&gt;N N -&amp;gt; boolean&lt;/strong&gt;, this means &lt;strong&gt;N=?&lt;/strong&gt; expects 2 terms that  match the &lt;strong&gt;N&lt;/strong&gt; pattern and returns a term that matches the pattern &lt;strong&gt;boolean&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;there are three cases; the second case is guarded by two &lt;strong&gt;where&lt;/strong&gt; clauses&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Any occurrence of &lt;strong&gt;(N=? &amp;hellip;.)&lt;/strong&gt; in any term is evaluated.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(term (N=? (Plus1 (Plus1 Zero)) (Plus1 (Plus1 Zero))))
;; #true
(term ((N=? Zero Zero) Zero))
;; '(#true Zero)
(term (N=? (Plus1 Zero) (Plus1 (Plus1 Zero))))
;; #false&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any occurrence of &lt;strong&gt;N=?&lt;/strong&gt; outside a &lt;strong&gt;term&lt;/strong&gt; is an error.&lt;/p&gt;

&lt;p&gt;Metafunction &lt;strong&gt;where&lt;/strong&gt;-clauses are analogous to judgment form &lt;strong&gt;where&lt;/strong&gt;-clauses. See &lt;a href="http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28tech._metafunction%29"&gt;the Redex reference&lt;/a&gt; for more.&lt;/p&gt;

&lt;p&gt;Note: the cases in a metafunction form a &lt;em&gt;sequence&lt;/em&gt;, not a &lt;em&gt;set&lt;/em&gt;. To evaluate a metafunction application, Redex tries each case in order  and returns the result of the first case that (1) matches the call-site (2)  for which all guards succeed.&lt;/p&gt;

&lt;h3 id="q-should-i-use-a-metafunction-or-a-judgment-form"&gt;Q. Should I use a metafunction or a judgment form?&lt;/h3&gt;

&lt;p&gt;Use a judgment form.&lt;/p&gt;

&lt;p&gt;Metafunctions are handy, but judgments are easier to read and debug and maintain.&lt;/p&gt;

&lt;h3 id="q-what-is-a-reduction-relation"&gt;Q. What is a reduction relation?&lt;/h3&gt;

&lt;p&gt;A reduction relation is a set of term-rewriting rules.&lt;/p&gt;

&lt;p&gt;Every reduction relation needs: (1) a language (2) a domain (3) a set of rewrite rules.&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;The language tells Redex how to interpret patterns.&lt;/li&gt;
 &lt;li&gt;The domain is a pattern.  Input to the reduction relation must match the pattern,  and output from the reduction relation must match the pattern.&lt;/li&gt;
 &lt;li&gt;The rewrite rules have the form &lt;strong&gt;(&amp;mdash;&amp;gt; term term guard &amp;hellip;)&lt;/strong&gt;.  The term on the left is the input, the term on the right is the output.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;See &lt;a href="http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._reduction-relation%29%29"&gt;the Redex reference&lt;/a&gt; for a full description of the guards.&lt;/p&gt;

&lt;p&gt;The preferred way to define a reduction relation is to define a language that includes three non-terminals:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;a non-terminal for the domain of the reduction relation&lt;/li&gt;
 &lt;li&gt;a non-terminal for a &lt;em&gt;subset&lt;/em&gt; of the domain that cannot reduce further&lt;/li&gt;
 &lt;li&gt;a non-terminal for evaluation contexts&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;An evaluation context is a term that contains a &lt;strong&gt;hole&lt;/strong&gt;. A reduction relation can match a term against an evaluation context to find  a sub-term to rewrite &amp;mdash; in particular, the sub-term that matches the &lt;strong&gt;hole&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the following example, &lt;strong&gt;bexp&lt;/strong&gt; is the domain of a reduction relation. A &lt;strong&gt;bexp&lt;/strong&gt; term represents a boolean expression, which can be &lt;strong&gt;#true&lt;/strong&gt; or  &lt;strong&gt;#false&lt;/strong&gt; or a conjunction of expressions or a disjunction of expressions. The boolean expressions &lt;strong&gt;#true&lt;/strong&gt; and &lt;strong&gt;#false&lt;/strong&gt; are also values (&lt;strong&gt;val&lt;/strong&gt;);  these cannot reduce further. The non-terminal &lt;strong&gt;E&lt;/strong&gt; is for evaluation contexts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-language Bool
  (bexp ::= #true #false (bexp ∧ bexp) (bexp ∨ bexp))
  (val ::= #true #false)
  (E ::= hole (E ∧ bexp) (val ∧ E) (E ∨ bexp) (val ∨ E)))

(define step
  (reduction-relation Bool
    #:domain bexp
    [--&amp;gt; (in-hole E (val_lhs ∧ val_rhs))
         (in-hole E val_new)
         ∧-step
         (where val_new ,(and (term val_lhs) (term val_rhs)))]
    [--&amp;gt; (in-hole E (val_lhs ∨ val_rhs))
         (in-hole E val_new)
         ∨-step
         (where val_new ,(or (term val_lhs) (term val_rhs)))]))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function &lt;strong&gt;apply-reduction-relation&lt;/strong&gt; applies a reduction relation to a  term and returns a list of ways that the term can step.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(apply-reduction-relation step (term #true))
;; '()
(apply-reduction-relation step (term (#true ∧ #true)))
;; '(#true)
(apply-reduction-relation step (term (#true ∧ #false)))
;; '(#false)
(apply-reduction-relation step (term ((#true ∨ #false) ∧ #true)))
;; '((#true ∧ #true))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three things about the reduction relation &lt;strong&gt;step&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;Using &lt;strong&gt;in-hole&lt;/strong&gt; on the first argument of &lt;strong&gt;&amp;mdash;&amp;gt;&lt;/strong&gt; searches a term  for a subterm that Redex can apply a reduction rule to.&lt;/li&gt;
 &lt;li&gt;Using &lt;strong&gt;in-hole&lt;/strong&gt; on the second argument of &lt;strong&gt;&amp;mdash;&amp;gt;&lt;/strong&gt; puts a new value  back into the &lt;strong&gt;hole&lt;/strong&gt; in the evaluation context.&lt;/li&gt;
 &lt;li&gt;The unquote operator (&lt;strong&gt;,&lt;/strong&gt;) escapes to &amp;ldquo;Racket mode&amp;rdquo; (see below) to evaluate  a conjunction or disjunction.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;A judgment or metafunction is a formal alternative to &amp;ldquo;escaping to Racket&amp;rdquo;,  but escaping can be convenient.&lt;/p&gt;

&lt;p&gt;Note: the cases in a reduction relation form a &lt;em&gt;set&lt;/em&gt;, not a &lt;em&gt;sequence&lt;/em&gt;. If more than one case matches, Redex applies them all.&lt;/p&gt;

&lt;h3 id="q-what-is-racket-mode-what-is-redex-mode"&gt;Q. What is &amp;ldquo;Racket mode&amp;rdquo;? What is &amp;ldquo;Redex mode&amp;rdquo;?&lt;/h3&gt;

&lt;p&gt;Code in a Redex model is sometimes evaluated in &amp;ldquo;Racket mode&amp;rdquo; and  sometimes evaluated in &amp;ldquo;Redex mode&amp;rdquo;. Racket mode evaluates Racket syntax to Racket values. Redex mode evaluates Racket syntax (possibly containing metafunction names) to terms.&lt;/p&gt;

&lt;p&gt;Key points:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;A Redex program starts in Racket mode.&lt;/li&gt;
 &lt;li&gt;The &lt;strong&gt;X&lt;/strong&gt; in &lt;strong&gt;(term X)&lt;/strong&gt; is evaluated in Redex mode &amp;hellip;&lt;/li&gt;
 &lt;li&gt;&amp;hellip; unless &lt;strong&gt;X&lt;/strong&gt; contains unquoted sub-expressions. Unquoting escapes to Racket mode &amp;hellip;&lt;/li&gt;
 &lt;li&gt;&amp;hellip; and &lt;strong&gt;term&lt;/strong&gt;s inside an unquoted sub-expression are evaluated in Redex mode.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;In other words, &lt;strong&gt;term&lt;/strong&gt; enters Redex mode and &lt;strong&gt;unquote&lt;/strong&gt; (&lt;strong&gt;,&lt;/strong&gt;) escapes back to Racket.&lt;/p&gt;

&lt;p&gt;Redex implicitly switches to Redex mode in a few other places, for example:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;the right-side of a &lt;strong&gt;where&lt;/strong&gt; clause is in Redex mode&lt;/li&gt;
 &lt;li&gt;the result of a metafunction is in Redex mode&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;When in doubt, try using an &lt;strong&gt;unquote&lt;/strong&gt;. Redex will raise an exception if it finds an unquote in Racket mode.&lt;/p&gt;

&lt;h3 id="q-are-side-conditions-evaluated-in-racket-mode-or-redex-mode"&gt;Q. Are &lt;strong&gt;side-condition&lt;/strong&gt;s evaluated in &amp;ldquo;Racket mode&amp;rdquo; or &amp;ldquo;Redex mode&amp;rdquo;?&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;(side-condition e)&lt;/strong&gt; sometimes evaluates &lt;strong&gt;e&lt;/strong&gt; as a Racket expression  and sometimes evaluates &lt;strong&gt;e&lt;/strong&gt; as a Redex expression.&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;reduction relations and metafunctions expect a &lt;strong&gt;Racket&lt;/strong&gt; expression&lt;/li&gt;
 &lt;li&gt;judgments expect a &lt;strong&gt;Redex&lt;/strong&gt; expression&lt;/li&gt;&lt;/ul&gt;

&lt;h3 id="q-what-is-a-binding-form"&gt;Q. What is a binding form?&lt;/h3&gt;

&lt;p&gt;In the lambda calculus, &lt;strong&gt;λ&lt;/strong&gt;-terms bind variables. A term &lt;strong&gt;(λ x M)&lt;/strong&gt; means that any free occurrence of &lt;strong&gt;x&lt;/strong&gt; in the sub-term &lt;strong&gt;M&lt;/strong&gt;  refers to the &lt;strong&gt;x&lt;/strong&gt; from the &lt;strong&gt;λ&lt;/strong&gt;-term.&lt;/p&gt;

&lt;p&gt;Redex can express this idea with a binding form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-language Λ
  [e ::= (e e) x (λ x e)]
  [x ::= variable-not-otherwise-mentioned]
  #:binding-forms
  (λ x_0 e_0 #:refers-to x_0))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: all the non-terminals in a language must be defined before the &lt;strong&gt;#:binding-forms&lt;/strong&gt; keyword. If a non-terminal definition appears after the &lt;strong&gt;#:binding-forms&lt;/strong&gt; keyword, then Redex will interpret the &amp;ldquo;definition&amp;rdquo; as a binding form.&lt;/p&gt;

&lt;p&gt;Binding forms work together with Redex&amp;rsquo;s functions for substitution and  alphabetic equivalence.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(alpha-equivalent? Λ
  (term (λ x x))
  (term (λ y y))))
;; #true

(define-metafunction Λ
  test-substitute : e -&amp;gt; e
  [(test-substitute (λ x_0 e_0))
   (substitute e_0 x_0 y)])
(term (test-substitute (λ z (z z))))
;; '(y y)&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q-what-is--what-is-"&gt;Q. What is &lt;strong&gt;&amp;hellip;&lt;/strong&gt;? What is &lt;strong&gt;&amp;hellip;.&lt;/strong&gt;?&lt;/h3&gt;

&lt;p&gt;Three dots (&lt;strong&gt;&amp;hellip;&lt;/strong&gt;) is for building patterns. If &lt;strong&gt;p&lt;/strong&gt; is a pattern then &lt;strong&gt;(p &amp;hellip;)&lt;/strong&gt; matches any list whose elements all  match &lt;strong&gt;p&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-language L)
(redex-match? L (number ... boolean ...) (term (1 2 #true #true)))
;; #true&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Four dots (&lt;strong&gt;&amp;hellip;.&lt;/strong&gt;) may be used in &lt;a href="http://docs.racket-lang.org/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._define-extended-language%29%29"&gt;&lt;strong&gt;define-extended-language&lt;/strong&gt;&lt;/a&gt;  to extend a previosly-defined non-terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define-language C
  (keyword ::= auto break case))
(define-extended-language C++
  C
  (keyword ::= .... class))

(redex-match? C keyword (term auto))
;; #true
(redex-match? C keyword (term class))
;; #false
(redex-match? C++ keyword (term auto))
;; #true
(redex-match? C++ keyword (term class))
;; #true&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="q-where-to-learn-more-about-redex"&gt;Q. Where to learn more about Redex?&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Critical path&amp;rdquo; resources:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Redex documentation: &lt;a href="http://docs.racket-lang.org/redex/index.html"&gt;http://docs.racket-lang.org/redex/index.html&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;A longer tutorial: &lt;a href="https://dvanhorn.github.io/redex-aam-tutorial/"&gt;https://dvanhorn.github.io/redex-aam-tutorial/&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Source code for this post: &lt;a href="https://github.com/nuprl/website/blob/master/blog/static/redex-faq.rkt"&gt;https://github.com/nuprl/website/blob/master/blog/static/redex-faq.rkt&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Redex source code (see &lt;code&gt;redex-lib/&lt;/code&gt;): &lt;a href="https://github.com/racket/redex"&gt;https://github.com/racket/redex&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&amp;ldquo;Procrastination&amp;rdquo; resources:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Tree Automata: &lt;a href="http://tata.gforge.inria.fr/"&gt;http://tata.gforge.inria.fr/&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;Should your Specification Language be Typed?&lt;/em&gt;: &lt;a href="http://lamport.azurewebsites.net/pubs/lamport-types.pdf"&gt;http://lamport.azurewebsites.net/pubs/lamport-types.pdf&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Source code for this post: &lt;a href="https://github.com/nuprl/website/blob/master/blog/_src/posts/2017-09-25-redex-faq.md"&gt;https://github.com/nuprl/website/blob/master/blog/_src/posts/2017-09-25-redex-faq.md&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description></item>
  <item>
   <title>Gradual Typing Across the Spectrum, part II</title>
   <link>http://prl.ccs.neu.edu/blog/2017/08/22/gradual-typing-across-the-spectrum-part-ii/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2017-08-22-gradual-typing-across-the-spectrum-part-ii</guid>
   <pubDate>Tue, 22 Aug 2017 15:54:06 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;Last week, Northeastern hosted a PI meeting for the &lt;a href="http://prl.ccs.neu.edu/gtp/"&gt;Gradual Typing Across the  Spectrum&lt;/a&gt; NSF grant. The meeting was made of 20+ researchers from four institutions,  and 12 technical talks. Schedule:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://prl.ccs.neu.edu/gtp/pi2017/pi2017.html"&gt;http://prl.ccs.neu.edu/gtp/pi2017/pi2017.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A common thread among the talks was the question:  &lt;em&gt;how to convert a research idea into a tool for software developers?&lt;/em&gt;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;In my mind, gradual typing &lt;em&gt;is&lt;/em&gt; an answer to one instance of this question. The research idea is strong static type systems, and the software developers  are the millions using dynamically typed languages. I know that static typing can make programs easier to write and maintain. The developers know that dynamic typing has benefits; moreover they know better  than to migrate their code from one language to another on a whim. Gradual typing is a linguistic solution to the problem of &lt;em&gt;adding&lt;/em&gt; the benefits  of static typing to a dynamically typed language.&lt;/p&gt;

&lt;p&gt;Enough opinions, let&amp;rsquo;s talk about the talks.&lt;/p&gt;

&lt;p&gt;The morning session consisted of four talks:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;a href="https://www.cs.umd.edu/people/milod"&gt;Milod Kazerounian&lt;/a&gt; (&lt;a href="https://www.cs.umd.edu/"&gt;UMD&lt;/a&gt;)  spoke about upgrading the &lt;a href="https://github.com/plum-umd/rdl"&gt;RDL&lt;/a&gt; type checker  for Ruby with support for refinement types.  The idea is to compile Ruby code and types to &lt;a href="https://emina.github.io/rosette/"&gt;Rosette&lt;/a&gt;,  and profit from &lt;a href="http://yices.csl.sri.com/papers/cav2007.pdf"&gt;SMT&lt;/a&gt;-assisted type checking.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;a href="http://ambrosebs.com/"&gt;Ambrose Bonnaire-Sergeant&lt;/a&gt; (&lt;a href="https://www.cs.indiana.edu/"&gt;IU&lt;/a&gt;, &lt;a href="http://ambrosebs.com/talks/squash-work-boston-pi-2017.pdf"&gt;slides&lt;/a&gt;)  has been inferring &lt;em&gt;useful&lt;/em&gt; &lt;a href="http://typedclojure.org/"&gt;Typed Clojure&lt;/a&gt; types through dynamic analysis of  Clojure programs. His tool observes how values flow through a program at run-time,  then lifts these observations into possibly-recursive, possibly-incorrect type  annotations. The surprising result is that the tool quickly (1&amp;ndash;2 seconds per  unit test, I think) infers types that can help a developer start annotating a program.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;a href="http://ccs.neu.edu/~types/"&gt;Ben Greenman&lt;/a&gt; (&lt;a href="http://www.ccis.northeastern.edu/"&gt;NEU&lt;/a&gt;, &lt;a href="http://homedirs.ccs.neu.edu/types/resources/talks/preservation-types.pdf"&gt;slides&lt;/a&gt;)  explained why he is implementing a semantics for &lt;a href="https://github.com/racket/typed-racket"&gt;Typed Racket&lt;/a&gt;  inspired by Michael Vitousek&amp;rsquo;s work on &lt;a href="http://homes.soic.indiana.edu/mvitouse/papers/popl17.pdf"&gt;Reticulated Python&lt;/a&gt;.  The &amp;ldquo;why&amp;rdquo; is &amp;ldquo;performance&amp;rdquo;. The Reticulated semantics will enforce a  notion of tag soundness in kind of &lt;a href="https://en.wikipedia.org/wiki/Deal_with_the_Devil"&gt;devils contract&lt;/a&gt;  to improve performance.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;a href="https://cs.brown.edu/~ptunnell/"&gt;Preston Tunnell-Wilson&lt;/a&gt; (&lt;a href="http://cs.brown.edu/"&gt;Brown&lt;/a&gt;, &lt;a href="http://cs.brown.edu/~sk/Publications/Papers/Published/tpk-crowdsource-lang-design/"&gt;ONWARD 2017&lt;/a&gt;)  recently sent questions about programming language design to  &lt;a href="https://www.mturk.com/mturk/welcome"&gt;Mechanical Turk&lt;/a&gt; workers.  Survey says, developers have extremely diverse opinions about what they &lt;em&gt;expect&lt;/em&gt;  and what they &lt;em&gt;want&lt;/em&gt; regarding scope, inheritance, and infix operators.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;In the early afternoon, we had two talks on similar themes as the morning session:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;a href="https://github.com/akuhlens"&gt;Andre Kuhlenschmidt&lt;/a&gt; (&lt;a href="https://www.cs.indiana.edu/"&gt;IU&lt;/a&gt;)  is exploring the design space of efficient implementations for run-time type checks.  The main challenge is how to &lt;em&gt;monitor&lt;/em&gt; higher-order data in a way that efficiently  performs type checks and can help the programmer debug any failed checks.  This talk presented data comparing two approaches to the program; I believe  the latter, improved approach is based on &lt;a href="http://homepages.inf.ed.ac.uk/wadler/papers/coercions/coercions.pdf"&gt;coercions&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;a href="https://zeinamigeed.com/"&gt;Zeina Migeed&lt;/a&gt; (&lt;a href="http://www.ccis.northeastern.edu/"&gt;NEU&lt;/a&gt;)  explained that there are many ways to adapt type soundness to a gradually  typed language, and presented some data comparing Typed Racket&amp;rsquo;s &lt;em&gt;generalized soudness&lt;/em&gt;  to Reticulated Python&amp;rsquo;s &lt;em&gt;tag soundness&lt;/em&gt;. The data suggests that tag soundness  never adds an order-of-magnitude slowdown.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Next on the schedule were two talks about implementing advanced type systems  in Racket&amp;rsquo;s macro expander (think: meta-level linguistic re-use, capture-avoiding  substitution for free!)&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;a href="https://github.com/iitalics"&gt;Milo Turner&lt;/a&gt; (&lt;a href="http://www.ccis.northeastern.edu/"&gt;NEU&lt;/a&gt;)  first showed how to implement &lt;a href="https://gankro.github.io/blah/linear-rust/#definitions-and-the-state-of-rust"&gt;linear and affine&lt;/a&gt;  type systems using &lt;a href="http://docs.racket-lang.org/syntax/Parsing_Syntax.html"&gt;syntax-parse&lt;/a&gt;,  and second presented a simpler implementation using the &lt;a href="http://docs.racket-lang.org/turnstile/index.html"&gt;Turnstile&lt;/a&gt; library.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;a href="http://www.davidchristiansen.dk/"&gt;David Christiansen&lt;/a&gt; (&lt;a href="https://www.cs.indiana.edu/"&gt;IU&lt;/a&gt;)  is building &lt;a href="https://github.com/david-christiansen/pudding"&gt;a proof assistant&lt;/a&gt;  in Racket. This talk focused on the design and implementation of proof  tactics.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;After a short break, we heard about something completely different:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://justinpombrio.net/"&gt;Justin Pombrio&lt;/a&gt; (&lt;a href="http://cs.brown.edu/"&gt;Brown&lt;/a&gt;, &lt;a href="http://cs.brown.edu/research/plt/dl/icfp2017/"&gt;ICFP 2017&lt;/a&gt;)  taught us to interpet the scoping rules of a &amp;ldquo;core&amp;rdquo; language as a preorder.  Using the preorder, he then showed how to &lt;em&gt;infer&lt;/em&gt; the scoping rules of  any &amp;ldquo;surface&amp;rdquo; language based on its translation to the &amp;ldquo;core&amp;rdquo;.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Last summer and fall, Jeremy Siek hosted two REUs (&lt;a href="https://www.nsf.gov/funding/pgm_summ.jsp?pims_id=5517&amp;amp;from=fund"&gt;research experience for undergraduates&lt;/a&gt;) at Indiana University. The two students gave the next talks:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;Di Zhong (&lt;a href="https://www.cs.indiana.edu/"&gt;IU&lt;/a&gt;)  talked about implementing interpreters in Racket, Python, and Haskell.  As I understand, this was a hands-on experience through &lt;a href="https://www.cis.upenn.edu/~bcpierce/tapl/"&gt;TAPL&lt;/a&gt;  and &lt;a href="https://redex.racket-lang.org/"&gt;the Redex book&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;a href="https://zeinamigeed.com/"&gt;Zeina Migeed&lt;/a&gt; (&lt;a href="https://www.cs.indiana.edu/"&gt;IU&lt;/a&gt;)  demonstrated her implementation of &lt;a href="http://theory.stanford.edu/~aiken/publications/papers/popl94.pdf"&gt;conditional types&lt;/a&gt;  for &lt;a href="https://github.com/mvitousek/reticulated"&gt;Reticulated&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Finally,&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://nikivazou.github.io/"&gt;Niki Vazou&lt;/a&gt; (&lt;a href="https://www.cs.umd.edu/"&gt;UMD&lt;/a&gt;)  presented a theory of gradual refinement types.  Any &amp;ldquo;holes&amp;rdquo; in the refinements introduce a search problem; type checking  attempts to solve the problem by finding a predicate that unifies a function  definition and its callers.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;This meeting was a great opportunity to reflect on the recent past and  share opinions on what&amp;rsquo;s worth pursuing in the future. Many thanks to the participants, and to the NSF for the support!&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;If you want to know about the future, you need to ask the young people who will create it. Young people don&amp;rsquo;t know what can&amp;rsquo;t be done, and so they go ahead and do it. &amp;mdash; &lt;a href="https://www.youtube.com/watch?v=sM1bNR4DmhU"&gt;Ivan Sutherland&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description></item>
  <item>
   <title>Trees, 1973</title>
   <link>http://prl.ccs.neu.edu/blog/2017/07/19/trees-1973/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2017-07-19-trees-1973</guid>
   <pubDate>Wed, 19 Jul 2017 21:48:56 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;From the PRL archives:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;I think that I shall never see a matrix lovely as a tree. &amp;mdash; &lt;a href="/img/gls-trees-poem-1979.pdf"&gt;&lt;em&gt;Trees&lt;/em&gt;&lt;/a&gt;, by Guy L. Steele Jr., MIT, 1973&lt;/p&gt;&lt;/blockquote&gt;
&lt;!-- more--&gt;

&lt;hr /&gt;

&lt;p&gt;You might recognize the opening line from Joyce Kilmer&amp;rsquo;s 1914 poem &lt;a href="https://en.wikipedia.org/wiki/Trees_(poem)"&gt;&lt;em&gt;Trees&lt;/em&gt;&lt;/a&gt;, or from Radia Perlman&amp;rsquo;s &lt;a href="/img/p-sigcomm-1985.pdf"&gt;&lt;em&gt;Algorhyme&lt;/em&gt;&lt;/a&gt; (published 1985).&lt;/p&gt;

&lt;p&gt;The poem is online in &lt;a href="http://mercury.lcs.mit.edu/~jnc/humour/lisp.tree"&gt;at least one other place&lt;/a&gt;, but the copy linked above (from &lt;a href="https://archive.org/details/byte-magazine"&gt;BYTE magazine&lt;/a&gt;) comes with a footnote on &lt;em&gt;How this poem came to be printed&lt;/em&gt;.&lt;/p&gt;</description></item>
  <item>
   <title>Continuations</title>
   <link>http://prl.ccs.neu.edu/blog/2017/07/17/continuations/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2017-07-17-continuations</guid>
   <pubDate>Mon, 17 Jul 2017 12:52:07 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;From the PRL archives:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;It was also a concept that grabbed my mind, ran off with it, and only returned it after substantial renovation and expansion. &amp;mdash; &lt;a href="/img/nall-continuations-1983.pdf"&gt;&lt;em&gt;Continuations&lt;/em&gt;&lt;/a&gt; by Alan Nall, Indiana University, 1983&lt;/p&gt;&lt;/blockquote&gt;
&lt;!-- more--&gt;

&lt;hr /&gt;

&lt;p&gt;I first encountered this essay on continuations in a green folder in the PRL. It turns out, the author spent a semester at Indiana University working on the  &lt;a href="http://wiki.c2.com/?SameFringeProblem"&gt;same fringe problem&lt;/a&gt; for a graduate-level programming languages course. According to &lt;a href="https://www.cs.indiana.edu/~dfried/"&gt;the instructor&lt;/a&gt;:  &amp;ldquo;What he said was true. He could not stop thinking about the problem the entire semester.&amp;rdquo; This essay was a kind of final exam.&lt;/p&gt;</description></item>
  <item>
   <title>Quotes and Stories from "Turing 50"</title>
   <link>http://prl.ccs.neu.edu/blog/2017/06/24/quotes-and-stories-from-turing-50/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2017-06-24-quotes-and-stories-from-turing-50</guid>
   <pubDate>Sat, 24 Jun 2017 20:00:52 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;The ACM recently hosted &lt;a href="https://www.acm.org/turing-award-50"&gt;a celebration of 50 years of the A.M. Turing award&lt;/a&gt;. These are some notes and thoughts from the event, including how Fred Brooks once rented a bus, Don Knuth&amp;rsquo;s outrageous implementation of batch processing, and Judea Pearl&amp;rsquo;s theory of homo sapiens.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;script&gt;document.createElement('dialog');&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Conventions / Disclaimers:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;The blockquotes below are paraphrased, may be incorrect, and may be incorrectly attributed.  Make sure to watch the ACM&amp;rsquo;s live stream before quoting anything here!!!&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;Section-breaks are labeled as &amp;ldquo;panel&amp;rdquo;, &amp;ldquo;talk&amp;rdquo;, &amp;ldquo;question&amp;rdquo;, etc.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;This is intentionally &amp;ldquo;bad writing&amp;rdquo; in the Peter Lee sense (see below)  &amp;mdash; primarily &amp;ldquo;what I saw&amp;rdquo;, very little about &amp;ldquo;what I thought and felt&amp;rdquo;.  A summary in my own words just wouldn&amp;rsquo;t do justice to the panelists.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;The &amp;ldquo;Augmented Reality&amp;rdquo; session was my favorite.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h3 id="opening-remarks"&gt;Opening Remarks&lt;/h3&gt;

&lt;h4 id="alan-turing-is-with-us-today"&gt;&lt;em&gt;Alan Turing is with us today&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;At the start of the event, the &lt;a href="http://users.ecs.soton.ac.uk/wh/"&gt;emcee&lt;/a&gt; unveiled a bronze bust of Alan Turing. This statue was on display at center stage during the whole event.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a good sculpture and it&amp;rsquo;s good we remember Alan Turing, but I&amp;rsquo;m sad  that the ACM would encourage this kind of idol-worship. Let&amp;rsquo;s not forget Turing&amp;rsquo;s excellent teachers and colleagues!&lt;/p&gt;

&lt;h3 id="talk-impact-of-turing-recipients-work"&gt;talk: Impact of Turing Recipients&amp;rsquo; Work&lt;/h3&gt;

&lt;h5 id="barbara-liskov"&gt;Barbara Liskov&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;the first awards recognized achievements in the standard fields of theory, AI, and systems&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;hostile environment around the first awards, trepidation about future awards&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;with Unix, Ritchie and Thompson got the design right&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;Niklaus Wirth: &amp;ldquo;If I understood how important Pcode was, I would have spent more time designing it&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="thoughts"&gt;thoughts&lt;/h4&gt;

&lt;p&gt;What is &amp;ldquo;systems&amp;rdquo; &amp;mdash; does that even have a definition? And Unix is definitely NOT an example of a &amp;ldquo;right design&amp;rdquo;; rather it&amp;rsquo;s a  landmark of &lt;a href="https://www.dreamsongs.com/WorseIsBetter.html"&gt;worse is better&lt;/a&gt; design.&lt;/p&gt;

&lt;h3 id="panel-advances-in-deep-neural-networks"&gt;panel: Advances in Deep Neural Networks&lt;/h3&gt;

&lt;h4 id="stuart-russell"&gt;Stuart Russell&lt;/h4&gt;

&lt;blockquote&gt;
 &lt;p&gt; &lt;em&gt;I work in all areas of AI except for deep learning&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="judea-pearl"&gt;Judea Pearl&lt;/h4&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I am a foreigner in this field &amp;hellip; left because human beings are not good at handling information &amp;hellip; people are very good with causal inference, not with statistical inference &amp;hellip; deep learning is statistical&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;there is a very old existence proof, homo sapiens took over the planet &amp;hellip; I believe because they had an internal model of their environment &amp;hellip; a drawing of a lion with wings is evidence of this model, you have  to have such a model before you can experiment with it and imagine &amp;hellip; snakes have superb optics, result of a long  evolution process &amp;hellip; very specific but they cannot build eyeglasses &amp;hellip; humans have an internal model, can build a market based on promises  and build large communities based on promises&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;I see four levels &amp;hellip; second level is predicting events, if I do X then what? &amp;hellip; third level is counterfactual, if I did things differently then how would the outcome change &amp;hellip; very hard to advance between levels, are we working to help machine learning &amp;lsquo;level up&amp;rsquo;?&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;data science is about the relation between data and reality &amp;hellip; data alone is not data science&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="michael-jordan"&gt;Michael Jordan&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;today we can&amp;rsquo;t think without holding a piece of metal&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;machine learning is part of computer science rather than AI &amp;hellip; AI is about how to make human &amp;hellip; machine learning is about allocating resources &amp;hellip; matrices are not all of human intelligence &amp;hellip; neural nets are part of a wider toolbox &amp;hellip; too much hype in NLP its just syntax&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;huge gap between syntax and semantics &amp;hellip; chat bots are just syntax, don&amp;rsquo;t learn &amp;hellip; faking intelligence with neural nets, so well that you can build a company &amp;hellip;&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;real metric is task completion&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;if I say &amp;lsquo;a GLEEB walked across the airport&amp;rsquo; then true intelligence can make a lot of educated guesses about a &amp;lsquo;GLEEB&amp;rsquo; without any other context&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fei-fei-li"&gt;Fei-Fei Li&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I disagree, ML is part of AI &amp;hellip; understanding intelligence and making intelligent methods for solving AI problems&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;to quote Churchhill &amp;lsquo;its not beginning of end, not end, not beginning of end, probably end of beginning&amp;rsquo;&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;todays AI powered by hardware and data&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;AI cannot yet find our keys&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;quote: &amp;lsquo;todays AI is making a perfect chess move while the world is on fire&amp;rsquo; &amp;hellip; ignores context&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="stuart-russell"&gt;Stuart Russell&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;Turing &amp;hellip; a program is a mathematical object &amp;hellip; math community did not recognize this&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;lots of grad student descent &amp;hellip; tuning to get performance &amp;hellip; deep learning is neglecting the problem of exponential data &amp;hellip; deep learning is just circuits, circuits lack expressive power &amp;hellip; a human can process data from CERN but a neural net cannot, need to know physics&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;probabilistic programming, somewhat under the radar, maybe on the right track &amp;hellip; 10-line program running/generating/updating a large network of possibilities &amp;hellip; more composable and flexible&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="ilya-sutskever"&gt;Ilya Sutskever&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;why I like deep learning &amp;hellip; philosophically satisfying &amp;hellip; the hypothesis class is a circuit &amp;hellip; powerful hypothesis class not too many parameters &amp;hellip; can actually find circuits &amp;hellip; &amp;lsquo;violates all theory&amp;rsquo; &amp;hellip; really amazing &amp;hellip; humans can see and hear pretty fast, even though our neurons are pretty slow, perhaps because we do a massively parallel process that doesn&amp;rsquo;t take many steps &amp;hellip; works well enough to be useful&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;models e.g. for vision are very hard to understand &amp;hellip; fight fire with fire &amp;hellip; incomprehensible solution to incomprehensible problem&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="raquel-urtasun"&gt;Raquel Urtasun&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;the breakthrough in neural nets is not algorithms &amp;hellip; it is tricks, hardware, and grad students&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;with neural nets we forget about modeling, uncertainty, and prior knowledge &amp;hellip; perception is a canonical example&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-boundaries"&gt;question: boundaries&lt;/h4&gt;

&lt;h5 id="judea-pearl"&gt;Judea Pearl:&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;glad to see people in deep learning understand its limitations &amp;hellip; is there a clearer definition of the boundaries? Are you worried about bridging the levels factual/inferential/counterfactural?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="michael-jordan"&gt;Michael Jordan&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;the big problem is decision making under uncertainty&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fei-fei-li"&gt;Fei-Fei Li&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;cognition is a hard problem&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="judea-pearl"&gt;Judea Pearl&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;do you have a clear idea of the boundaries?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="michael-jordan"&gt;Michael Jordan&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;neural nets use back-propagation &amp;hellip; its non-modular, sad fact &amp;hellip; performance and explainability is the tradeoff &amp;hellip; then again people are non-modular&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="stuart-russell"&gt;Stuart Russell&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;AlphaGo is not deep learning &amp;hellip; basically an improved version of the machines Arthur Samuel made in the late 1950s &amp;hellip; the interesting code is in C++ &amp;hellip; rules of go, next moves, searching future states &amp;hellip; depends on transitive closure&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="judea-pearl"&gt;Judea Pearl&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;can AlphaGo take advice from a human?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="michael-jordan"&gt;Michael Jordan&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;not currently, but that would be a new policy to add to the toolbox &amp;hellip; just as neural nets are one tool within AlphaGo&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="raquel-urtasun"&gt;Raquel Urtasun&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;no reason to ask if deep learning is going to solve all problems&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-education"&gt;question: education?&lt;/h4&gt;

&lt;h5 id="judea-pearl"&gt;Judea Pearl&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;indeed, what DO you teach in your neural networks classes?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fei-fei-li"&gt;Fei-Fei Li&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;&amp;hellip; chain rule, Taylor expansion&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="judea-pearl"&gt;Judea Pearl&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;teaching is communicating truths &amp;hellip; what is true about neural nets? what are some things that will definitely not happen?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="stuart-russell"&gt;Stuart Russell&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;Peter Norvig and I have a problem with our AI book &amp;hellip; chapter on vision, chapter on speech, will probably post just point to the neural nets chapter &amp;hellip; we don&amp;rsquo;t really understand! &amp;hellip; really selling students short&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fei-fei-li"&gt;Fei-Fei Li&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;in labs we talk about what we cannot do &amp;hellip; we all have open problems&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;Stuart I hope you have a very good author for the chapters. There are so many open problems to communicate to students!&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="michael-jordan"&gt;Michael Jordan&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;CS cirriculum needs more statistics, inferential thinking &amp;hellip; revise the whole cirriculum bottom-up to weave this in&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-could-a-neural-net-fix-my-phone-without-breaking-it"&gt;question: could a neural net fix my phone without breaking it?&lt;/h4&gt;

&lt;h5 id="judea-pearl"&gt;Judea Pearl&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;right! big problem that neural nets have no internal model to manipulate&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-generalizability"&gt;question: generalizability?&lt;/h4&gt;

&lt;h5 id="ilya-sutskever"&gt;Ilya Sutskever&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;special-purpose vs. general purpose solution depends on the problem &amp;hellip; most things we give special-purpose solutions &amp;hellip; I guess if you wanted to automate a mathematician that would need to be general&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="stuart-russell"&gt;Stuart Russell&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;always argue with your self &amp;hellip; try to break what you&amp;rsquo;ve built &amp;hellip; there&amp;rsquo;s a system that plays video games just using the pixels on screen as hints &amp;hellip; it&amp;rsquo;s very good at mazes; if a newborn baby learned to play maze games in 2 hours that would be amazing! &amp;hellip; does the system scale? absolutely not&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="thoughts"&gt;thoughts&lt;/h4&gt;

&lt;p&gt;When Michael Jordan said &amp;ldquo;people are non-modular&amp;rdquo;, I think he means that people are able  to break abstraction barriers when needed.&lt;/p&gt;

&lt;h3 id="panel-restoring-personal-privacy-without-compromising-national-security"&gt;panel: Restoring Personal Privacy without Compromising National Security&lt;/h3&gt;

&lt;h5 id="joan-feigenbaum"&gt;Joan Feigenbaum&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;&amp;hellip; wikileaks &amp;hellip; russian hackers &amp;hellip; social emergency &amp;hellip;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="whitfield-diffie"&gt;Whitfield Diffie&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;everything I say today is copyleft&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;its a misunderstanding to talk about a conflict between security and privacy &amp;hellip; two aspects &amp;hellip; problem goes back to feudalism &amp;hellip; the right to build a castle was granted by the king &amp;hellip; on one hand a castle improves national security &amp;hellip; on the other hand a castle can be used to attack the king &amp;hellip; technology is upsetting the basic notion of private vs. public security &amp;hellip; governments cannot protect citizens and cannot protect themselves &amp;hellip; extremely difficult to prove that a small process is secure&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;exceptional access makes it more complex&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="paul-syverson"&gt;Paul Syverson&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;major concern are national security threats and ability of authorities to confound threats &amp;hellip; analogy to printing press &amp;hellip; proclimation of 1635 that only state messengers can carry letters &amp;hellip; 1663 treatise by the national censor, no printing house can have a back door &amp;hellip; the general topic is very old &amp;hellip; title of this session isn&amp;rsquo;t very good, the real dilemma is investigation vs privacy&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="bryan-ford"&gt;Bryan Ford&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;code is law for better or worse, tech is not a tool like a watch &amp;hellip; tech can monitor us and decide when it works &amp;hellip; tech is government, not obedient tools &amp;hellip; the mind is a warrant-proof space &amp;hellip; 5th amendment rights should extend to wearables&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="nadia-heninger"&gt;Nadia Heninger&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;cannot divorce the security/privacy issues from the current political context &amp;hellip; the serious vulnerabilities are not in math &amp;hellip; they are in users and implementors&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-back-doors"&gt;question: back doors&lt;/h4&gt;

&lt;h5 id="joan-feigenbaum"&gt;Joan Feigenbaum&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;perhaps we should explain what a back door is&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="bryan-ford"&gt;Bryan Ford&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;agency keeps a master key in escrow&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;non-lawyers can and should take a stand on basic issues&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;there are legitimate warrant-proof spaces &amp;hellip; electronic extensions of the mind need to be recognized as warrant-proof spaces&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;the set of authorities with backdoor access should change as I travel between countries &amp;hellip; but this will lead to a global race to the bottom&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="whitfield-diffie"&gt;Whitfield Diffie&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;germany has a law against sex tourism (committed by German citizens visiting other countries) &amp;hellip; neither government will be willing to lose backdoor access&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="nadia-heninger"&gt;Nadia Heninger&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;technical reasons against backdoors &amp;hellip; (1) &amp;lsquo;weak crypto&amp;rsquo; was implemented, nobody turned it off, is now breakable by anyone in 2015 &amp;hellip; (2) Juniper used non-default crypto parameters, someone (inside?) changed the parameters &amp;hellip; (3) attackers exploit back doors&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="paul-syverson"&gt;Paul Syverson&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;quote &amp;lsquo;you can put a man on the moon, surely you can put a man on the sun&amp;rsquo;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="whitfield-diffie"&gt;Whitfield Diffie&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;trouble is getting him back safely&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="bryan-ford"&gt;Bryan Ford&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I think back doors are okay, but not for personal devices &amp;hellip; need public lab and transparent processes, need separation of powers &amp;hellip; prosecutors are getting cases thrown out because courts do not accept their backdoors &amp;hellip; there is a place for transparent back door tools&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="nadia-heninger"&gt;Nadia Heninger&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;politicians are rarely technical people&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="bryan-ford"&gt;Bryan Ford&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;tech is not a set of policy-neutral tools, need to address gap of understanding&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-"&gt;question: ???&lt;/h4&gt;

&lt;h5 id="whitfield-diffie"&gt;Whitfield Diffie&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;we don&amp;rsquo;t know how to build good crypto programs &amp;hellip; opponents are debugging our programs with different goals &amp;hellip; we&amp;rsquo;re trying for-all-paths safety (universal) &amp;hellip; they&amp;rsquo;re trying exists-bad-path (existential)&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="bryan-ford"&gt;Bryan Ford&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;cybersecurity market is a lemon market&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-how-to-advise"&gt;question: how to advise&lt;/h4&gt;

&lt;h5 id="joan-feigenbaum"&gt;Joan Feigenbaum&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;question from audience &amp;lsquo;I am an advisor to a company working with nuclear energy, they are terrified of being attacked, how should I advise them?&amp;rsquo;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="whitfield-diffie"&gt;Whitfield Diffie&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;a network like that is probably separated enough to be safe &amp;hellip; the problem is being safe AND connected to the web&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="bryan-ford"&gt;Bryan Ford&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;because the internet of things&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-what-should-the-acm-do"&gt;question: what should the ACM do?&lt;/h4&gt;

&lt;h5 id="nadia-heninger"&gt;Nadia Heninger&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;maybe we need increased regulation, the ACM could help bring experts together&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-what-is-true-security"&gt;question: what is true security&lt;/h4&gt;

&lt;h5 id="paul-syverson"&gt;Paul Syverson&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;it&amp;rsquo;s all the same thing &amp;hellip; gets labeled differently &amp;hellip; just trying to control which bits can go where and who gets to read them&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="nadia-heninger"&gt;Nadia Heninger&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;security is the absense of being violated&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="paul-syverson-no-true--security-need-to-consider-context"&gt;Paul Syverson: &lt;em&gt;no true &amp;gt; security, need to consider context&lt;/em&gt;&lt;/h5&gt;

&lt;h5 id="joan-feigenbaum"&gt;Joan Feigenbaum&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;problem of our community, have strict standards, may be unrealistic &amp;hellip; maybe a lot more tolerance in practice than our model accepts&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="paul-syverson"&gt;Paul Syverson&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;security and privacy are environmental problems&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-can-we-stop-the-needle-in-haystack-search-for-vulnerabilities"&gt;question: can we stop the needle-in-haystack search for vulnerabilities?&lt;/h4&gt;

&lt;h5 id="paul-syverson"&gt;Paul Syverson&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;need to build in security from the start&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="bryan-ford"&gt;Bryan Ford&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;need rule of law, transparency, separation of powers&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="whitfield-diffie"&gt;Whitfield Diffie&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;stop delaying, instead of spending $$$ on fixing problems, we should invest in solving the fundamental issues&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id="panel-preserving-our-past-for-the-future"&gt;panel: Preserving our Past for the Future&lt;/h3&gt;

&lt;p&gt;Note: I was volunteering during this session; quotes are sparse&lt;/p&gt;

&lt;h5 id="mahadev-satyanarayanan"&gt;Mahadev Satyanarayanan&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;the running system is the total documentation &amp;hellip; there are too many details for prose to capture&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id=""&gt;??&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;running old code has a danger of running old bugs&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id=""&gt;??:&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;what not to save? &amp;hellip; it&amp;rsquo;s very hard to tell in advance&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="mahadev-satyanarayanan"&gt;Mahadev Satyanarayanan:&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;there is no absolute censor in a world with caching&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="brewster-kahle"&gt;Brewster Kahle&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;asking UNESCO to solve the problem is unrealistic &amp;hellip; need to empower the fanatics, given them tools to preserve data&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="thoughts"&gt;thoughts&lt;/h4&gt;

&lt;p&gt;I totally agree with the &amp;ldquo;empower the fanatics&amp;rdquo; sentiment. Today, because of &amp;ldquo;volunteer librarians&amp;rdquo;, I think we&amp;rsquo;re doing pretty well about preserving  the past. Suppose I found an old PowerPoint file. I&amp;rsquo;m sure I could find a way to read it with help from the internet &amp;mdash; either  by searching Google, pirating an old version of PowerPoint, or asking online forums. So personally I&amp;rsquo;m not worried about losing data we have currently; I&amp;rsquo;m more  worried about the future, the internet becoming &amp;ldquo;less chaotic&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The panel raised a good question about how to preserve research and encourage reproducibility. A &lt;code&gt;.pdf&lt;/code&gt; or &lt;code&gt;.tex&lt;/code&gt; document is not enough; a virtual machine is okay. Really I think we need a stronger cultural emphasis on literate programming  and a mature library like TeX to help authors store and share their work. &lt;a href="https://thegamma.net/"&gt;The Gamma&lt;/a&gt; seems on the right track.&lt;/p&gt;

&lt;p&gt;I was surprised that the panel did not discuss search, version control, and  the ACM&amp;rsquo;s open-access policy.&lt;/p&gt;

&lt;h3 id="panel-moores-law-is-really-dead-whats-next"&gt;panel: Moore&amp;rsquo;s Law is Really Dead: What&amp;rsquo;s Next?&lt;/h3&gt;

&lt;p&gt;Note: I was volunteering during this session&lt;/p&gt;

&lt;h5 id="butler-lampson"&gt;Butler Lampson&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;there&amp;rsquo;s plenty of room at the top &amp;hellip; with Moore&amp;rsquo;s Law we got improvements at the bottom of the software stack, everything above got to benefit and it was easy to integrate the changes &amp;hellip; there&amp;rsquo;s lots of opportunities to trim fat in the middle/top of the software stack &amp;hellip; these improvements will be harder to integrate, but there&amp;rsquo;s lots of opportunities&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="margaret-martonosi"&gt;Margaret Martonosi&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;By the way, don&amp;rsquo;t believe the brochure that says I&amp;rsquo;m at Google. My affiliation is Princeton, Google and I are just friends.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="butler-lampson"&gt;Butler Lampson&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;important to distinguish approximate vs. precise software &amp;hellip; precise software has a specification and the customer cares about that specification &amp;hellip; approximate software doesn&amp;rsquo;t have a hard spec, just needs to approximately work &amp;hellip; the web is approximate, it doesn&amp;rsquo;t work and it doesn&amp;rsquo;t need to! &amp;hellip; windows is precise, definitely has a spec and users definitely care&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="thoughts"&gt;thoughts&lt;/h4&gt;

&lt;p&gt;The recording of this panel should be good; it was very lively, very practical. And the first audience question (by &lt;a href="https://people.eecs.berkeley.edu/~pattrsn/"&gt;David Patterson&lt;/a&gt;) was &amp;ldquo;an A+ question&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The panel reminded me of a talk by &lt;a href="http://users.ece.utexas.edu/~patt/"&gt;Yale Patt&lt;/a&gt;  about &amp;ldquo;the end&amp;rdquo; of the Von Neumann architecture. His opinion is future computers will be Von Neumann machines that rely  on &amp;ldquo;accelerators&amp;rdquo; like a GPU &amp;mdash; computer organization is not going to change,  but will expand to have a bigger toolbox. So sure, Moore&amp;rsquo;s Law is dead, but there are many opportunities to make  computers faster at places other than the bottom of the software stack.&lt;/p&gt;

&lt;h3 id="panel-challenges-in-ethics-and-computing"&gt;panel: Challenges in Ethics and Computing&lt;/h3&gt;

&lt;p&gt;Note: I was volunteering during this session&lt;/p&gt;

&lt;h5 id="raj-reddy"&gt;Raj Reddy&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;there are more slaves in the world currently than there were in the US during the civil war &amp;hellip; here is one way technology could help, by giving everone a device to record their location &amp;hellip; if someone&amp;rsquo;s time and location is constant, they may be held against their will&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id=""&gt;??&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;do you believe every problem has a technological solution?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="noel-sharkey"&gt;Noel Sharkey&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;yes the training set may be biased against people similar to me, but I want you to consider my case as an individual&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id=""&gt;??&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;a very nice Washington Post article&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id=""&gt;??&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;whether to encrypt the back hall&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="raj-reddy"&gt;Raj Reddy&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;we can sit here and wring our hands, but nothing will come of it unless it is written in the US constitution&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="thoughts"&gt;thoughts&lt;/h4&gt;

&lt;p&gt;I did not enjoy this panel. This is an ACM event, not a United Nations event. An ACM-sponsored panel about social and political problems should  look for constructive ways that computer science can address these problems. Raj Reddy tried to give constructive solutions, but the panel seemed more  interested in complaining about how hopeless things are.&lt;/p&gt;

&lt;p&gt;The comment by Noel Sharkey about &amp;ldquo;consider me as an individual&amp;rdquo; was something  I hadn&amp;rsquo;t thought about. Instead of worrying about biased datasets, let&amp;rsquo;s use technology to  collect data on an individual instead of abstracting a person by their  race, age, or neighborhood.&lt;/p&gt;

&lt;h3 id="talk-computer-science-as-a-major-body-of-accumulated-knowledge"&gt;talk: Computer Science as a Major Body of Accumulated Knowledge&lt;/h3&gt;

&lt;h5 id="donald-knuth"&gt;Donald Knuth&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt; &lt;em&gt;don&amp;rsquo;t applaud me, just read my books&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;at the time, computer science was AI, numerical analysis, and programming languages&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;a colleague said &amp;lsquo;I will believe that computer science is a science when it has 1000 deep theorems&amp;rsquo; &amp;hellip; I am not sure what a deep theorem is but I think its different from what&amp;rsquo;s proven by deep learning&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;great privilege that we can invent the problems we work on &amp;hellip; imagination &amp;hellip; physicists can only guess the size of the sun&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;I&amp;rsquo;ve always believed computer science and math are two parallel subjects &amp;hellip; sometimes you hear people wondering if one subsumes the other&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;when I won the Turing Award, the prize money was about $1,000,000 less than it is today &amp;hellip; I did get a nice Tiffany bowl that my wife and I use to serve strawberries &amp;hellip; strawberries actually taste better &amp;hellip;&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;very fortunate in this field &amp;hellip; I&amp;rsquo;m completely worthless as an economic advisor &amp;hellip; it&amp;rsquo;s a game I&amp;rsquo;ve been able to take advantage of&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-how-could-you-offer-to-pay-for-tex-bug-reports"&gt;question: how could you offer to pay for TeX bug reports?&lt;/h4&gt;

&lt;h5 id="donald-knuth"&gt;Donald Knuth&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;well there were many, many bugs &amp;hellip; I stopped doubling at 32768 &amp;hellip; brought people out of nowhere &amp;hellip; next time I check the bug reports will be 2021 &amp;hellip; someone is queueing the bugs reports &amp;hellip; I believe strongly in batch rather than swap-in/swap-out &amp;hellip; last time I checked reports was 2014 so 2021 will be next&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;TeX was a literate program, and it helped that I wrote &amp;lsquo;The Errors of TeX&amp;rsquo; about the first N bugs&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-do-you-think-computers-will-become-good-composers-of-music-do-you-see-a-role-for-computer-assisted-proving"&gt;question: do you think computers will become good composers of music? do you see a role for computer-assisted proving?&lt;/h4&gt;

&lt;h5 id="donald-knuth"&gt;Donald Knuth&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;Yes in part, assisted is the key word &amp;hellip; I have a program running now that I hope will help me prove a theorem&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-favorite-algorithm"&gt;question: favorite algorithm?&lt;/h4&gt;

&lt;h5 id="donald-knuth"&gt;Donald Knuth&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;Tarjan&amp;rsquo;s strong components &amp;hellip; short deep useful&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-thoughts-on-ai-computers-taking-over"&gt;question: thoughts on AI, computers taking over?&lt;/h4&gt;

&lt;h5 id="donald-knuth"&gt;Donald Knuth&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I get scared when I see Stuart Russell making assumptions based on people acting rationally &amp;hellip; then you look at election results&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-if-you-could-start-over-and-do-things-differently-what-would-you-change"&gt;question: if you could start over and do things differently, what would you change?&lt;/h4&gt;

&lt;h5 id="donald-knuth"&gt;Donald Knuth&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I would use decimal internally in TeX instead of binary&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-how-to-record-history"&gt;question: how to record history?&lt;/h4&gt;

&lt;h5 id="donald-knuth"&gt;Donald Knuth&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;a video &amp;lsquo;Lets not dumb down the history of CS&amp;rsquo; &amp;hellip; used to be history of algorithms &amp;hellip; trouble with funding &amp;hellip; the history is nothing that a non-CS person could not understand &amp;hellip; the whole field of history changed from internal to external &amp;hellip; historians need to be external to get published in journals &amp;hellip; no CS department supports a historian &amp;hellip; recently read a dissertation about the ALGOL 60 copmiler &amp;hellip; very careful, describes data structures and organization &amp;hellip; this kind of thing is what deserves to be called history&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-teachers"&gt;question: teachers&lt;/h4&gt;

&lt;h5 id="donald-knuth"&gt;Donald Knuth&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;hardest thing for me is choosing between two hypotheses (1) could teach this to anyone (2) only 2% of the world is geeks &amp;hellip; suppose the second is true then you can&amp;rsquo;t talk about how to teach if the teacher is not in the 2% &amp;hellip;&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;the newest issue of CACM has a fun typo, &amp;lsquo;deep earning&amp;rsquo;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id="panel-quantum-computing-far-away-around-the-corner-or-maybe-both-at-the-same-time"&gt;panel: Quantum Computing: Far Away? Around the Corner? Or Maybe Both at the Same Time?&lt;/h3&gt;

&lt;h5 id="john-martinis"&gt;John Martinis&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;goal to have a 45&amp;ndash;50 qbit machine &amp;hellip; 1 error per 1000 operations &amp;hellip; to test, run sample algorithm, chart output vs. a classical supercomputer &amp;hellip; got to be a supercomputer to finish the computation in time&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="andrew-yao"&gt;Andrew Yao&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I&amp;rsquo;m a believer &amp;hellip; one suggested benchmark is to factor 1000-digit numbers &amp;hellip; impossible to attain &amp;hellip; need to expore new possibilities, take physics attitute&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;CS did well attracting attention to quantum &amp;hellip; science should be more open &amp;hellip; share results between physics chemistry CS &amp;hellip; don&amp;rsquo;t just stick to your specialized conferences&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;CS departments reception to quantum is less than satisfactory &amp;hellip; 15 years ago, maybe 4 or 5 universities &amp;hellip; now, maybe 7 or 8 .. China doing much better in this regard&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="jay-gambetta"&gt;Jay Gambetta&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;not useful to make analogy to anything classical &amp;hellip; universal fault tolerance? or computation in the presence of error &amp;hellip; either would be excellent, still a long way off&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;IBM put quantum on the cloud &amp;hellip; picked an instruction set that tries to abstract away &amp;hellip; have been 19 published papers on the behavior of this quantum hardware&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="dorit-aharonov"&gt;Dorit Aharonov&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;two paths &amp;hellip; finding algorithms, besides Shor&amp;rsquo;s algorithm &amp;hellip; make quantum computer to realize the algorithms &amp;hellip; finding algorithms is very difficult &amp;hellip; information-processing point-of-view&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;error correction still small scale &amp;hellip; can we use entanglement between probes to improve accuracy?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="umesh-vazirani"&gt;Umesh Vazirani&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;_different goals &amp;hellip; maybe you want perfect Qbits for a perfect Hilbert space &amp;hellip; reality is a noisy space &amp;hellip; short run, how to compute with noise &amp;hellip; how to correct errors &amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="jay-gambetta"&gt;Jay Gambetta:&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;_those 2 paths are the same to me &amp;hellip; we want larger devices with fidelity&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;lets build hardware see where goes &amp;hellip; exciting prospect, computer scientists will explore what they can do with these erroneous qbits &amp;hellip; that&amp;rsquo;s why IBM has the instruction set open to the community&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-why-isnt-adding-10-qbits-only-10x-harder"&gt;question: why isn&amp;rsquo;t adding 10 qbits only 10x harder?&lt;/h4&gt;

&lt;h5 id="john-martinis"&gt;John Martinis:&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;building infrastructure to scale &amp;hellip; not just grad student code &amp;hellip; we&amp;rsquo;re all good coders using standard industry practices for coding&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="jay-gambetta"&gt;Jay Gambetta&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;fidelity is hard to achieve&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-both-ibm-and-google-use-superconducting-storage"&gt;question: both IBM and Google use superconducting storage?&lt;/h4&gt;

&lt;h5 id="john-martinis"&gt;John Martinis&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;superconducting scales &amp;hellip; ion traps harder to scale, but we still watch, keep eye on data&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-education"&gt;question: education&lt;/h4&gt;

&lt;h5 id="john-martinis"&gt;John Martinis&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I like talking to engineering colleges &amp;hellip; physics and engineering need to work together&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-is-quantum-going-to-change-programing-languages"&gt;question: is quantum going to change programing languages?&lt;/h4&gt;

&lt;h5 id="jay-gambetta"&gt;Jay Gambetta&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;yes very different to handle errors &amp;hellip; current challenge is building an abstraction over the superconducting hardware&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="john-martinis"&gt;John Martinis&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;hoping to first expose hardware, then get a model, eventually a language&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="dorit-aharonov"&gt;Dorit Aharonov&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;need to start with more algorithms&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-what-would-feynman-do"&gt;question: what would Feynman do?&lt;/h4&gt;

&lt;h5 id="john-martinis"&gt;John Martinis&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;experiments!&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="dorit-aharonov"&gt;Dorit Aharonov&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;yes he&amp;rsquo;d tell us to keep playing, and play with us&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id="panel-augmented-reality-from-gaming-to-cognitive-aids-and-beyond"&gt;panel: Augmented Reality: From Gaming to Cognitive Aids and Beyond&lt;/h3&gt;

&lt;p&gt;Peter Lee starts off wearing a headset.&lt;/p&gt;

&lt;h5 id="ivan-sutherland"&gt;Ivan Sutherland:&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I can tell you how VR started. Bell Helicopter company wanted to land at night &amp;hellip; put an infrared camera on the landing site and a display in the cockpit &amp;hellip; to test they used the roof of their building &amp;hellip; one day an observer in a Bell office is watching, though the camera, two men playing catch on the roof &amp;hellip; one player threw the ball at the camera and the observer ducked &amp;hellip; he had identified his position with the camera &amp;hellip; my observation was that you didn&amp;rsquo;t need a camera, could substitute a computer &amp;hellip; the rest is history&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="yvonne-rogers"&gt;Yvonne Rogers&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;my goal is to augment people &amp;hellip; &lt;a href="https://en.wikipedia.org/wiki/The_Mother_of_All_Demos"&gt;Englebart&lt;/a&gt; very inspiring &amp;hellip; ok 2 stories &amp;hellip; (1) a student of mine wanted to help picky eaters &amp;hellip; computer vision for when they tried to hide peas under the plate &amp;hellip; projected colors onto the peas, called them &amp;lsquo;disco peas&amp;rsquo;, kids were distracted enough to get over their aversion &amp;hellip; children and parents got involved, new social interaction &amp;hellip; (2) opera makeup for schoolchildren, virtually getting into character &amp;hellip; teenage boys in the classes got to try makeup for the first time &amp;hellip; singers found it useful for rehearsals&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I feel socially awkward wearing this headset, but I have some of my slides here &amp;hellip; making a wearable headset requires huge effort &amp;hellip; research prototypes can be uncomfortable &amp;hellip; a product needs to be perfect and its very hard to do perfect &amp;hellip; one goal, give Lowe&amp;rsquo;s VR to demo a virtual kitchen &amp;hellip; Case Western anatomy class used virtual cadaver, great collective experience&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fred-brooks"&gt;Fred Brooks&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;two stories &amp;hellip; (1) Henry Fuchs 1998, working with breast surgeon, try augmented reality to improve the precision of biopsy probe insertion &amp;hellip; 2 years to a working prototype, hard to track surgeon&amp;rsquo;s eyes, display where probe is, where ultrasound is, provide low latency &amp;hellip; one day trying on live patient, worked 100% perfect probe right on the mark, jubilation &amp;hellip; then the doctor had to tell the patient &amp;lsquo;yes it is really cancer&amp;rsquo; &amp;hellip; (2) a challenge, augmented reality EMT training &amp;hellip; real teams, virtual patient, virtual surround &amp;hellip; track real tools, 8 eyes, 8 images, team needs to interact&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-what-are-current-uses-of-augmented-reality"&gt;question: what are current uses of augmented reality?&lt;/h4&gt;

&lt;h5 id="ivan-sutherland"&gt;Ivan Sutherland&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;the pilot of a jumbo jet typically has 1 hour flight experience before he flies for the first time, but extensive training in a flight simulator&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fred-brooks"&gt;Fred Brooks&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;the &lt;strong&gt;best&lt;/strong&gt; AR&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="ivan-sutherland"&gt;Ivan Sutherland&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;once I was in a flight simulator with the chief pilot &amp;hellip; and he turned to me and asked &amp;lsquo;have you ever experienced a slow roll in a 747?&amp;rsquo; &amp;hellip; a slow roll is a twisting motion, a very benign maneuver, constant one-G pressure the plane doesn&amp;rsquo;t know its upside down &amp;hellip; &amp;lsquo;here we go&amp;rsquo; and suddenly the world inverted &amp;hellip; I remarked that it was certainly impressive, but didn&amp;rsquo;t you treat the simulator as a real experience, and never attempted anything you would not do in reality? &amp;hellip; &amp;lsquo;that is true, but I am the chief pilot&amp;rsquo;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;construction, architecture&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fred-brooks"&gt;Fred Brooks&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;where&amp;rsquo;s the &amp;lsquo;augmented&amp;rsquo;?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;whether augmented or virtual&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fred-brooks"&gt;Fred Brooks&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;yes we did my kitchen that way, made my wife sick when she tried it&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;surgical&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fred-brooks"&gt;Fred Brooks&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;still sounds virtual&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="yvonne-rogers"&gt;Yvonne Rogers&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;displays on a car, superimposed directions on the tarmac &amp;hellip; one of the users took a vacation and had to use the old GPS technology &amp;hellip; found it very difficult to go back&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-ar-tools-for-developers"&gt;question: AR tools for developers?&lt;/h4&gt;

&lt;h5 id="blair-macintyre"&gt;Blair MacIntyre&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;can developers write apps for the Microsoft &lt;a href="https://www.microsoft.com/en-us/hololens"&gt;Hololens&lt;/a&gt;?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;we belive in experience, anything we can do to foster experiences is good&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fred-brooks"&gt;Fred Brooks&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;faking things &amp;hellip; subtle and important &amp;hellip; I remember using a flight simulator, navigating the runway, and I turned my head to see if my wing was going to clip a plane &amp;hellip; turned and there was nothing there &amp;hellip; emotional shock to leave the simulation, I had been flying for 1 hour&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="ivan-sutherland"&gt;Ivan Sutherland&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;pilot training is an early adopter because the cost of real planes is so high, impossible to train for emergency situations&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;the ultimate goal, you can sit in a virtual chair &amp;hellip; and if the chair has handcuffs you cannot get up &amp;hellip; a virtual bullet is lethal &amp;hellip; probably impossible because bits don&amp;rsquo;t weigh anything &amp;hellip; you know Ben Franklin invented augmented reality, eyeglasses &amp;hellip; the desire outweighs cost &amp;hellip; I cannot see the audience here, maybe it would be good if I had a headset! but Peter took his off&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;because of my slides I couldn&amp;rsquo;t see the audience, but then without the headset I couldn&amp;rsquo;t see them either&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-any-challenges-to-suggest-to-the-audience"&gt;question: any challenges to suggest to the audience?&lt;/h4&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;if we had holographic transport, we wouldn&amp;rsquo;t need planes!&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="yvonne-rogers"&gt;Yvonne Rogers&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;maybe, but you need to give attendees a physical presence &amp;hellip; smell, touch&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="ivan-sutherland"&gt;Ivan Sutherland&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;what makes us willing to work together? I had a collaboration with three people &amp;hellip; all in different locations .. communicated with a phone &amp;hellip; worked perfectly, because we had worked in the same location first and knew one another so well &amp;hellip; how to get to that point, where a simulation could be a useful tool &amp;hellip; another good observation by Fred Brooks, given a domain X ask how good does the simulation need to be for X &amp;hellip; Licklider told me, you&amp;rsquo;d need damn good fiction to land someone on the moon, the simulation would need to provide every detail &amp;hellip; for flight simulation the user&amp;rsquo;s imagination can fill some gaps, a pilot can recognize an aircraft carrier from a rougher picture&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fred-brooks"&gt;Fred Brooks&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;at IBM I once hired buses to bring the Poughkeepsie secretaries to the main office &amp;hellip; the secretaries at the two offices only knew one another from the phone &amp;hellip; this one lunch did so much good &amp;hellip; only $75 to rent a bus&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;how important is it to shake hands, to bump into a table?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="yvonne-rogers"&gt;Yvonne Rogers&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;for this conference, I think the live stream is getting a better experience because the cameras zoom in on us, the panelists &amp;hellip; the audience in the back cannot see us, only a picture of us on the monitors&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;_one excellent video game, starts in the dark, you hear a voice &amp;hellip; turn around and there&amp;rsquo;s a character sitting on a chair &amp;hellip; if you rearrange your furniture he finds a new seat &amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="yvonne-rogers"&gt;Yvonne Rogers&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;games are a great example &amp;hellip; Pokemon Go &amp;hellip; Apple jusr released an app toolkit &amp;hellip; need to get those in schools, in the hands of kids who can build with them&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-ivan-about-your-ultimate-display-paper-what-has-since-surprised-or-frustrated-you"&gt;question: Ivan, about your &amp;lsquo;ultimate display&amp;rsquo; paper, what has since surprised or frustrated you?&lt;/h4&gt;

&lt;h5 id="ivan-sutherland"&gt;Ivan Sutherland&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I wasn&amp;rsquo;t surprised because I never had any expectations &amp;hellip; of course sticks are not real &amp;hellip; no assumptions so no strong feelings&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-people-already-distracted-by-cell-phones-how-to-manage-all-this-input"&gt;question: people already distracted by cell phones, how to manage all this input?&lt;/h4&gt;

&lt;h5 id="yvonne-rogers"&gt;Yvonne Rogers&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;good question, how much data you can present to people &amp;hellip; and then the problem with google glass, your companions don&amp;rsquo;t know what you are looking at &amp;hellip; at least with snapchat glasses, you can trust the device is simpler&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;good writing defines reality, bad writing reports it &amp;hellip; with the printing press, quickly went from 30,000 books to over 13,000,000 &amp;hellip; novels evolved shortly after, a new form of expression&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-peter-how-long-do-your-people-wear-the-hololens"&gt;question: Peter, how long do your people wear the hololens?&lt;/h4&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;hard to say &amp;hellip; but often longer than the battery lasts&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fred-brooks"&gt;Fred Brooks&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;how long does it last?&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;depends what you&amp;rsquo;re doing, 3 hours&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fred-brooks"&gt;Fred Brooks&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;that&amp;rsquo;s encouraging, we had a 30-minute cutoff because participants had enough&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-nausea"&gt;question: nausea&lt;/h4&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I get nauseous in our minecraft VR &amp;hellip; but there&amp;rsquo;s a pop-out feature where you keep playing, but the game world is in a TV set instead of around you &amp;hellip; can pop back in when you&amp;rsquo;re feeling better&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="yvonne-rogers"&gt;Yvonne Rogers&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;we&amp;rsquo;ve seen about 20% of the population gets nauseous&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="audience-member"&gt;audience member&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;Dana Boyd conducted an experiment, found the nausea was worse for wemon&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="yvonne-rogers"&gt;Yvonne Rogers&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;oculus makes me feel sick, but the hololens has never given me trouble&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;have models to predict head motion, to keep the VR world steadier&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="blair-macintyre"&gt;Blair MacIntyre&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;I remember reading papers that measured framerate &amp;hellip; would be interesting to revisit&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fred-brooks"&gt;Fred Brooks&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;framerate not important, its the latency that gets you &amp;hellip; one colleague  of mine, we call her &amp;lsquo;the canary&amp;rsquo; because she&amp;rsquo;s so sensitive, in fact &amp;hellip;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="peter-lee"&gt;Peter Lee&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;talking about nausea is part of the problem, people experience it more &amp;hellip; every time I talk about it in public my co-workers tell me to stop!&lt;/em&gt;&lt;/p&gt;
 &lt;p&gt;&lt;em&gt;another cool application, there&amp;rsquo;s a hololens app to give blind people a tour of the Redmond office &amp;hellip; you say a building and it takes you there&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h5 id="fred-brooks"&gt;Fred Brooks&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;&lt;em&gt;one challenge, the relative brightness of the real and virtual worlds&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h4 id="question-any-last-remarks"&gt;question: any last remarks&lt;/h4&gt;

&lt;h5 id="ivan-sutherland"&gt;Ivan Sutherland&lt;/h5&gt;

&lt;blockquote&gt;
 &lt;p&gt;_I hoped from the beginning that AR would be a teaching tool &amp;hellip; I learned that &lt;code&gt;F = MA&lt;/code&gt; not from a book but from a large flywheel in the school&amp;rsquo;s basement &amp;hellip; very substantial inertia &amp;hellip; the greatest value for AR would be to show people things in a way that makes the underlying meaning clear &amp;hellip; what color should the hydrogen atoms in a benzene ring be? the color will be fiction, but the quality of learning will depend on that fiction &amp;hellip; challenge for content makers &amp;hellip; what is the haptic experience of feeling bits?&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3 id="small-group-session"&gt;Small Group Session&lt;/h3&gt;

&lt;p&gt;After the last panel, I got to attend a small group session with other students,  Dick Karp, and Don Knuth. It doesn&amp;rsquo;t feel right to summarize or quote from the  session, but there&amp;rsquo;s one thing I want to write about.&lt;/p&gt;

&lt;p&gt;During the group session, I said something that I now regret. There was a brief silence as the group changed subjects, and someone suggested that we do a round of introductions. I objected, &lt;em&gt;this will take so long&lt;/em&gt;,  but in fact the introductions were a very good idea.&lt;/p&gt;

&lt;p&gt;Normally, I don&amp;rsquo;t like introductions because they focus on names, backgrounds,  and credentials. I don&amp;rsquo;t care about any of these when I&amp;rsquo;m meeting someone! Rather, I prefer to just talk and by-the-way learn about the other person(s). There&amp;rsquo;s an anaology to double-blind reviewing &amp;mdash; the focus should be content  and not credentials.&lt;/p&gt;

&lt;p&gt;These introductions were successful for two reasons. First, they gave everyone in the room a turn to speak, and this seemed  to help people join the actual discussion sooner. That was strange to me. I always feel a little nervous the first time I speak up in front  of a group, but if I really feel like speaking then I can always get over this  little barrier. I guess it&amp;rsquo;s not right to assume the nervousness is &amp;ldquo;little&amp;rdquo; for everyone. Second, the introductions format was &amp;ldquo;say your name and a funny fact&amp;rdquo;. This prompt by itself led to some nice conversation topics:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Could a computer program decide whether a statement was funny or not funny?&lt;/li&gt;
 &lt;li&gt;What kind of humor works in a classroom? In a textbook?&lt;/li&gt;
 &lt;li&gt;Would this kind of introduction be acceptable in another era or culture,  for instance Victorian England?&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&amp;ldquo;Nice&amp;rdquo; in the sense that everyone could contribute, which was a real challenge. Even the question &amp;ldquo;does anyone have a favorite algorithm?&amp;rdquo; didn&amp;rsquo;t have much  success fostering discussion.&lt;/p&gt;

&lt;p&gt;Related: a useful greeting at the event was &amp;ldquo;what SIG are you?&amp;rdquo;. The answer was a good hint about what level of abstraction you two could best communicate at.&lt;/p&gt;
&lt;!-- ### Misc.--&gt;
&lt;!-- I noticed that some of the young people who served on panels and also gave--&gt;
&lt;!-- long-and-not-very-insightful answers to questions were later on their laptops--&gt;
&lt;!-- as other panels discussed things. I noticed some of the older people who--&gt;
&lt;!-- served on panels falling asleep during other panels--&gt;</description></item>
  <item>
   <title>Building a Website with Scribble</title>
   <link>http://prl.ccs.neu.edu/blog/2017/05/23/building-a-website-with-scribble/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2017-05-23-building-a-website-with-scribble</guid>
   <pubDate>Tue, 23 May 2017 01:53:13 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;The source code for the PRL website is written using Scribble, the Racket  documentation tool. I am very happy with this choice, and you should be too!&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h2 id="the-story-so-far"&gt;The Story so Far&lt;/h2&gt;

&lt;p&gt;Last Fall, I took a flight to Chicago (on my way to &lt;a href="http://con.racket-lang.org/2016/"&gt;RacketCon 2016&lt;/a&gt;). When I landed, there was a new message in my inbox:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Subject: Web Page
    Date: 2016-09-15

    You have been nominated webmaster by public acclamation. Congratulations!&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Emboldened by the trust of my people, I promptly converted the PRL website  from Racket-generating-HTML to the fine &lt;a href="http://docs.racket-lang.org/scribble-pp/html.html"&gt;&lt;code&gt;scribble/html&lt;/code&gt;&lt;/a&gt;  preprocessor language (commit &lt;a href="https://github.com/nuprl/website/commit/a0600d32fec4bd70c5530b2717aec32979d634f7"&gt;&lt;code&gt;a0600d&lt;/code&gt;&lt;/a&gt;) This bold action polarized the community.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;I can&amp;rsquo;t read the source anymore! Is this really an improvement?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Fear not, citizens. The switch to &lt;a href="http://docs.racket-lang.org/scribble-pp/html.html"&gt;&lt;code&gt;scribble/html&lt;/code&gt;&lt;/a&gt; was the right choice, and you  too can learn to read the source code.&lt;/p&gt;

&lt;h2 id="how-to-read-scribblehtml-programs"&gt;How to Read &lt;code&gt;scribble/html&lt;/code&gt; Programs&lt;/h2&gt;

&lt;h3 id="basics"&gt;Basics&lt;/h3&gt;

&lt;p&gt;Scribble is a language for writing Racket documentation. The key innovation in Scribble is the &lt;em&gt;@-expression&lt;/em&gt; (read: &amp;ldquo;at expression&amp;rdquo;). The &lt;a href="http://docs.racket-lang.org/scribble-pp/html.html"&gt;&lt;code&gt;scribble/html&lt;/code&gt;&lt;/a&gt; language combines @-expression syntax with  functions that generate HTML.&lt;/p&gt;

&lt;h4 id="-syntax"&gt;@-syntax&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://www.greghendershott.com/2015/08/at-expressions.html"&gt;Greg Hendershott&lt;/a&gt; and the &lt;a href="http://docs.racket-lang.org/scribble/reader.html"&gt;Scribble Documentation&lt;/a&gt; explain @-expressions properly. Here&amp;rsquo;s a short tutorial (Part 1 of 2, &amp;ldquo;the basics&amp;rdquo;):&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Scribble programs start in &amp;ldquo;text mode&amp;rdquo;.  Every character you type goes straight to the document you are building.&lt;/li&gt;
 &lt;li&gt;The @-sign toggles to &amp;ldquo;Racket mode&amp;rdquo; for the next expression.  In Racket mode, the characters you type will be evaluated as a Racket program  to produce part of the document.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Examples:&lt;/em&gt; Evaluating &lt;code&gt;"Hello Dave"&lt;/code&gt; puts &amp;ldquo;Hello Dave&amp;rdquo; in your document. Evaluating &lt;code&gt;"Hello @Dave"&lt;/code&gt; puts &amp;ldquo;Hello ???&amp;rdquo; in your document, where "???" is the value of the variable &lt;code&gt;Dave&lt;/code&gt;. Finally if &lt;code&gt;Dave&lt;/code&gt; is the name of a function, then &lt;code&gt;"Hello @(Dave)"&lt;/code&gt; calls the &lt;code&gt;Dave&lt;/code&gt; function with zero arguments and puts whatever it returns into your document.&lt;/p&gt;

&lt;p&gt;To make it easy to interleave text, function calls, and code, Scribble  discriminates between 4 kinds of parentheses when they follow an @-sign (Part 2 of 2, &amp;ldquo;the parens&amp;rdquo;):&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;@(f A B)&lt;/code&gt; is just like the function call &lt;code&gt;(f A B)&lt;/code&gt; in Racket&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;@f[A B]&lt;/code&gt; is the same as &lt;code&gt;@(f A B)&lt;/code&gt;, but typically more useful because &amp;hellip;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;@f[A B]{....}&lt;/code&gt; evaluates the &lt;code&gt;....&lt;/code&gt; in &amp;ldquo;text mode&amp;rdquo; to a list of words &lt;code&gt;w*&lt;/code&gt;,  then calls &lt;code&gt;f&lt;/code&gt; just like &lt;code&gt;(apply f A B w*)&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;@f{....}&lt;/code&gt; evaluates the &lt;code&gt;....&lt;/code&gt; in &amp;ldquo;text mode&amp;rdquo; and calls &lt;code&gt;f&lt;/code&gt; with the results&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;@f|{....}|&lt;/code&gt; is similar, but the &lt;code&gt;....&lt;/code&gt; are in &amp;ldquo;unescapable text mode&amp;rdquo;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&amp;ldquo;Unescapable text mode&amp;rdquo; treats @-signs as text instead of toggling between modes.&lt;/p&gt;

&lt;h4 id="generating-html"&gt;Generating HTML&lt;/h4&gt;

&lt;p&gt;The &lt;a href="http://docs.racket-lang.org/scribble-pp/html.html"&gt;&lt;code&gt;scribble/html&lt;/code&gt;&lt;/a&gt; language comes with functions that render HTML. These functions have the same name as the corresponding HTML tag.&lt;/p&gt;

&lt;p&gt;Example program:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang &lt;/span&gt;&lt;span class="nn"&gt;scribble/html&lt;/span&gt;
&lt;span class="n"&gt;@p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Running this program prints:&lt;/p&gt;

&lt;div class="brush: html"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;No surprises.&lt;/p&gt;

&lt;p&gt;One thing that &lt;em&gt;is&lt;/em&gt; surprising is how &lt;code&gt;scribble/html&lt;/code&gt; handles tag attributes. Every tag-rendering function accepts &amp;ldquo;Racket mode&amp;rdquo; arguments that specify  an attribute name and attribute value.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang &lt;/span&gt;&lt;span class="nn"&gt;scribble/html&lt;/span&gt;
&lt;span class="n"&gt;@p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;style:&lt;/span&gt; &lt;span class="s2"&gt;"color:red"&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Prints:&lt;/p&gt;

&lt;div class="brush: html"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"color:red"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Hope the output looks familiar. The input syntax is strange, but that&amp;rsquo;s what it is.&lt;/p&gt;

&lt;p&gt;Larger programs print larger webpages. Each page on the PRL website is HTML generated by one &lt;code&gt;scribble/html&lt;/code&gt; program.&lt;/p&gt;

&lt;h2 id="why-scribblehtml-is-an-improvement"&gt;Why &lt;code&gt;scribble/html&lt;/code&gt; is an Improvement&lt;/h2&gt;

&lt;p&gt;Before &lt;code&gt;scribble/html&lt;/code&gt;, the PRL website was implemented in &lt;code&gt;scribble/text&lt;/code&gt;. A &lt;code&gt;scribble/text&lt;/code&gt; program renders and prints text. There is no extra support for HTML.&lt;/p&gt;

&lt;p&gt;To compare, here&amp;rsquo;s the start of the old homepage:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang &lt;/span&gt;&lt;span class="nn"&gt;scribble/text&lt;/span&gt;
&lt;span class="n"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))" style="color: inherit"&gt;require&lt;/a&gt;&lt;/span&gt; &lt;span class="s2"&gt;"templates.rkt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;&amp;lt;!DOCTYPE&lt;/span&gt; &lt;span class="n"&gt;html&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="n"&gt;lang=&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt;
  &lt;span class="n"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="s2"&gt;"Home"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="n"&gt;id=&lt;/span&gt;&lt;span class="s2"&gt;"pn-top"&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt;
    &lt;span class="n"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;navbar&lt;/span&gt; &lt;span class="s2"&gt;"Home"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="n"&gt;class=&lt;/span&gt;&lt;span class="s2"&gt;"jumbotron"&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;And here is the start of the &lt;code&gt;scribble/html&lt;/code&gt;&amp;rsquo;d homepage:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang &lt;/span&gt;&lt;span class="nn"&gt;scribble/html&lt;/span&gt;
&lt;span class="n"&gt;@require&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"templates.rkt"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;@doctype&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;@html&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lang:&lt;/span&gt; &lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;
  &lt;span class="n"&gt;@header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;@body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id:&lt;/span&gt; &lt;span class="s2"&gt;"pn-top"&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;
      &lt;span class="n"&gt;@navbar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;@div&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;class:&lt;/span&gt; &lt;span class="s2"&gt;"jumbotron"&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The pages look similar. The new one has more @-signs and parentheses, the old one has more &lt;code&gt;&amp;lt;&lt;/code&gt;-signs  and quotes. If you were able to edit the old page, you should be able to edit the new page.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;key improvement&lt;/strong&gt; in the new page is that &lt;strong&gt;common mistakes are now  compile-time errors&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;Before, a typo like &lt;code&gt;&amp;lt;hmtl&amp;gt;&lt;/code&gt; would generate an ugly webpage.  After, a typo like &lt;code&gt;@hmtl&lt;/code&gt; is a syntax error.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;Before, a typo like &lt;code&gt;&amp;lt;b&amp;gt;....&lt;/code&gt; with no closing tag would generate an ugly webpage.  After, a typo like &lt;code&gt;@b{....&lt;/code&gt; is a syntax error.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Both flavors of error message come with source-code line numbers. This is very very helpful.&lt;/p&gt;

&lt;h3 id="small-improvements"&gt;Small Improvements&lt;/h3&gt;

&lt;h4 id="1-more-functions"&gt;1. More Functions&lt;/h4&gt;

&lt;p&gt;Before, the &lt;a href="http://prl.ccs.neu.edu/teaching.html"&gt;Teaching page&lt;/a&gt; contained  some interesting HTML for rendering vertical text (look for the word &amp;ldquo;Semantics&amp;rdquo; to see how this was used):&lt;/p&gt;

&lt;div class="brush: html"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"how-to-design-programs"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;S&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;e&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;m&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;a&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;n&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;t&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;i&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;c&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;s&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;After, the same text is generated from a function call:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="n"&gt;@span&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;class:&lt;/span&gt; &lt;span class="s2"&gt;"how-to-design-programs"&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="n"&gt;@vertical-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Semantics&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;vertical-text&lt;/code&gt; function is simple:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="n"&gt;@require&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._only-in))" style="color: inherit"&gt;only-in&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;racket/list&lt;/span&gt; &lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._add-between))" style="color: inherit"&gt;add-between&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="n"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))" style="color: inherit"&gt;define&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vertical-text&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;str*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._add-between))" style="color: inherit"&gt;add-between&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-~3elist))" style="color: inherit"&gt;string-&amp;gt;list&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._append*))" style="color: inherit"&gt;append*&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;str*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h4 id="2-more-structure-less-boilerplate"&gt;2. More Structure, Less Boilerplate&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s part of the old definition of &amp;ldquo;Ben Greenman&amp;rdquo; on the &lt;a href="http://prl.ccs.neu.edu/people.html"&gt;People page&lt;/a&gt;:&lt;/p&gt;

&lt;div class="brush: html"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"row pn-person"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"col-md-12 pn-row-eq-height"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"col-md-3 pn-photo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"img-wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"img/ben_greenman.jpg"&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Ben Greenman"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Ben Greenman"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"col-md-9"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"col-md-4 pn-contact"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"pn-name"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Ben Greenman&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        Advisor: Matthias Felleisen&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mailto:types@"&lt;/span&gt;&lt;span class="err"&gt;@"&lt;/span&gt;&lt;span class="na"&gt;ccs&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;neu&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;edu&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;types@"@"ccs.neu.edu&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://www.ccs.neu.edu/home/types"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;www.ccs.neu.edu/home/types&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"col-md-3 pn-muted col-md-offset-5"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Joined 2014
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"col-md-12 pn-bio"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I like constructions .... &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The new definition uses a helper function with keyword arguments for each  &amp;ldquo;field&amp;rdquo; of the person:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="n"&gt;@person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kd"&gt;#:name&lt;/span&gt; &lt;span class="s2"&gt;"Ben Greenman"&lt;/span&gt;
        &lt;span class="kd"&gt;#:title&lt;/span&gt; &lt;span class="s2"&gt;"Advisor: Matthias Felleisen"&lt;/span&gt;
        &lt;span class="kd"&gt;#:e-mail&lt;/span&gt; &lt;span class="s2"&gt;"types@ccs.neu.edu"&lt;/span&gt;
        &lt;span class="kd"&gt;#:website&lt;/span&gt; &lt;span class="s2"&gt;"http://ccs.neu.edu/home/types"&lt;/span&gt;
        &lt;span class="kd"&gt;#:history&lt;/span&gt; &lt;span class="n"&gt;@list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Joined 2014"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="kd"&gt;#:img&lt;/span&gt; &lt;span class="s2"&gt;"ben_greenman.jpg"&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;
  &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;constructions&lt;/span&gt; &lt;span class="n"&gt;....&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h4 id="3-less-string-formatting"&gt;3. Less String-Formatting&lt;/h4&gt;

&lt;p&gt;Before, the code did a lot of string formatting (&lt;a href="https://github.com/nuprl/website/commit/a0600d#diff-1921e33ce89be28dd277cf1c7880d1beL9"&gt;link&lt;/a&gt;):&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))" style="color: inherit"&gt;define&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/creatingunits.html#(form._((lib._racket/unit..rkt)._link))" style="color: inherit"&gt;link&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))" style="color: inherit"&gt;string-append&lt;/a&gt;&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;a href=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;"&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;/a&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The new code has no need for such helper functions.&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="n"&gt;@a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;href:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h4 id="bottom-line"&gt;Bottom Line&lt;/h4&gt;

&lt;p&gt;Scribble is a good language for making static HTML pages.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;If you liked this post, you may also be interested in:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://docs.racket-lang.org/pollen/index.html"&gt;Pollen&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://github.com/vishesh/racketscript"&gt;RacketScript&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;Other websites built using &lt;a href="http://docs.racket-lang.org/scribble-pp/html.html"&gt;&lt;code&gt;scribble/html&lt;/code&gt;&lt;/a&gt;:  (1) &lt;a href="http://nanopass.org/"&gt;nanopass.github.io&lt;/a&gt; (&lt;a href="https://github.com/nanopass/nanopass.github.io"&gt;source code&lt;/a&gt;),  (2) &lt;a href="http://prl.ccs.neu.edu/gtp/"&gt;Gradual Typing Across the Spectrum&lt;/a&gt; (&lt;a href="https://github.com/nuprl/gtp"&gt;source code&lt;/a&gt;).&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://prl.ccs.neu.edu/blog/2016/05/18/gradual-typing-across-the-spectrum/"&gt;Notes from a Gradual Typing Across the Spectrum PI meeting&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description></item>
  <item>
   <title>What is Soft Typing?</title>
   <link>http://prl.ccs.neu.edu/blog/2017/04/28/what-is-soft-typing/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2017-04-28-what-is-soft-typing</guid>
   <pubDate>Fri, 28 Apr 2017 12:25:17 UT</pubDate>
   <author>PRL</author>
   <description>&lt;!-- more--&gt;

&lt;p&gt;A soft type system rewrites programs and meets a few &lt;em&gt;design criteria&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="what-are-the-design-criteria"&gt;What are the Design Criteria?&lt;/h2&gt;

&lt;p&gt;According to Mike Fagan&amp;rsquo;s 1991 &lt;a href="https://github.com/nuprl/hopl-s2017/tree/master/soft-typing/papers"&gt;dissertation&lt;/a&gt;,  a soft type system must:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;accept all &lt;em&gt;syntactically correct&lt;/em&gt; programs as input;&lt;/li&gt;
 &lt;li&gt;produce equivalent, &lt;em&gt;memory-safe&lt;/em&gt; programs as output; and&lt;/li&gt;
 &lt;li&gt;be &lt;em&gt;unobtrusive&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h3 id="important-details"&gt;Important details:&lt;/h3&gt;

&lt;ul&gt;
 &lt;li&gt;In this context, &lt;em&gt;memory safe&lt;/em&gt; basically means &amp;ldquo;no segfaults&amp;rdquo;.  Programs output by a soft type system should be as safe as statically-typed  Java programs or dynamically-typed Python programs.&lt;/li&gt;
 &lt;li&gt;Fagan characterizes &lt;em&gt;unobtrusive&lt;/em&gt; with two general principles:&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;minimal text principle&lt;/em&gt; : the type checker should work without any programmer-supplied annotations&lt;/li&gt;
 &lt;li&gt;&lt;em&gt;minimal failure principle&lt;/em&gt; : the type checker should assign &lt;em&gt;useful&lt;/em&gt; types to &lt;em&gt;idiomatic&lt;/em&gt; programs  (basically, don&amp;rsquo;t just say that every expression has &amp;ldquo;unknown&amp;rdquo; or &amp;ldquo;top&amp;rdquo; type)&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="why-would-i-want-to-use-a-soft-type-system"&gt;Why would I want to use a soft type system?&lt;/h2&gt;

&lt;p&gt;If you:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;like dynamic typing&lt;/li&gt;
 &lt;li&gt;want some &lt;em&gt;benefits&lt;/em&gt; of static typing&lt;/li&gt;
 &lt;li&gt;refuse to (or &lt;em&gt;cannot&lt;/em&gt;!) change your code to satisfy a type checker&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;then Soft Typing is a perfect fit. You just need to find/build a soft type checker.&lt;/p&gt;

&lt;h3 id="clarification"&gt;Clarification&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;benefits&lt;/em&gt; of static typing that a soft type system can give are:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;early detection of typos and simple logical errors&lt;/li&gt;
 &lt;li&gt;documentation, through (inferred) type signatures&lt;/li&gt;
 &lt;li&gt;speed, when the types can justify removing a runtime safety check&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;See Andrew Wright&amp;rsquo;s 1994 &lt;a href="https://github.com/nuprl/hopl-s2017/tree/master/soft-typing/papers"&gt;dissertation&lt;/a&gt; for proof.&lt;/p&gt;

&lt;h2 id="can-i-use-andrew-wrights-soft-type-system"&gt;Can I use Andrew Wright&amp;rsquo;s soft type system?&lt;/h2&gt;

&lt;p&gt;Not sure, but you may download the code for it:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://github.com/nuprl/softscheme"&gt;https://github.com/nuprl/softscheme&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;h2 id="please-explain-fagans--wrights-soft-types"&gt;Please explain Fagan&amp;rsquo;s / Wright&amp;rsquo;s soft types&lt;/h2&gt;

&lt;p&gt;Types &lt;code&gt;t&lt;/code&gt; are made of constructors &lt;code&gt;k&lt;/code&gt;, flags &lt;code&gt;f&lt;/code&gt;, and type variables &lt;code&gt;a&lt;/code&gt;. The grammar for types is basically:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  t ::= a | (k f t ...) U t
  k ::= Int | Pair | -&amp;gt;
  f ::= ++ | -- | b
  a ::= a0 | a1 | a2 | a3 | ....
  b ::= b0 | b1 | b2 | b3 | ....&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;U&lt;/code&gt; is just a symbol, represents &amp;ldquo;union&amp;rdquo;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;a&lt;/code&gt; is a type variable; there are infinitely many type variables&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;b&lt;/code&gt; is a flag variable; the set of flag variables is also infinte&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;There are also some rules for types to be well-formed.&lt;/p&gt;

&lt;p&gt;Here are two well-formed types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(Int ++) U a0

(-&amp;gt; ++ ((Int b0) U a1)
       ((Int ++) U a2)) U a3&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are two types that match the grammar, but are &lt;strong&gt;NOT&lt;/strong&gt; well-formed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(Int ++ a0) U a1

(-&amp;gt; --) U a2&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, some intuition:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;A constructor &lt;code&gt;k&lt;/code&gt; is like a behavior,&lt;/li&gt;
 &lt;li&gt;a type &lt;em&gt;describes&lt;/em&gt; the behaviors a value can have.&lt;/li&gt;
 &lt;li&gt;The description is like a bitvector of &amp;ldquo;yes&amp;rdquo;, &amp;ldquo;no&amp;rdquo;, or &amp;ldquo;maybe&amp;rdquo; for each possible behavior.&lt;/li&gt;
 &lt;li&gt;A flag variable is the way to say &amp;ldquo;maybe&amp;rdquo;.&lt;/li&gt;
 &lt;li&gt;Every type ends with a type variable because every typed expression might  flow to a context that expects a more general type.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;The type and flag variables let Fagan and Wright encode subtyping using  polymorphism. It&amp;rsquo;s a very cool idea, introduced in Didier Remy&amp;rsquo;s  &lt;a href="https://github.com/nuprl/hopl-s2017/tree/master/soft-typing/papers"&gt;POPL 1989 paper&lt;/a&gt;. But it adds a learning curve, and has some drawbacks for type inference.&lt;/p&gt;

&lt;h2 id="stream-of-consciousness-notes-from-the-hopl-lecture"&gt;Stream-of-consciousness notes from the HOPL lecture&lt;/h2&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="/blog/static/soft-typing.pdf"&gt;Local copy&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://github.com/nuprl/hopl-s2017/tree/master/soft-typing"&gt;Source of Truth&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description></item>
  <item>
   <title>Top Five Results of the Past 50 Years of Programming Languages Research</title>
   <link>http://prl.ccs.neu.edu/blog/2017/04/04/top-five-results-of-the-past-50-years-of-programming-languages-research/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2017-04-04-top-five-results-of-the-past-50-years-of-programming-languages-research</guid>
   <pubDate>Tue, 04 Apr 2017 10:21:36 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;Over the past 50 years, which result from programming languages research has had the greatest impact on working programmers?&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;The center of the universe for a working programmer is the language (or languages) they use. Fundamental results in programming languages (PL) research can re-shape this universe.&lt;/p&gt;

&lt;p&gt;In &lt;a href="http://www.ccs.neu.edu/home/matthias/7480-s17/index.html"&gt;HOPL&lt;/a&gt; two weeks ago, Matthias claimed that &lt;em&gt;type soundness&lt;/em&gt; is the most useful and influential result to flow from PL research to PL practice in the last 50 years.&lt;/p&gt;

&lt;p&gt;But 50 years is a long time, and there are many serious contenders for the title of &lt;em&gt;greatest PL result&lt;/em&gt;. Here are my (alphabetized) picks for the top five:&lt;/p&gt;

&lt;h3 id="abstraction"&gt;Abstraction&lt;/h3&gt;

&lt;blockquote&gt;
 &lt;p&gt;My goal in library design is this; I want to have a precise, elegant, re-usable abstraction &amp;mdash;Conal Eliott, &lt;a href="https://www.youtube.com/watch?v=zzCrZEil9iI"&gt;BayHac 2014 (00:01:55)&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;By &lt;em&gt;abstraction&lt;/em&gt;, I mean anything whose interface is not just &amp;ldquo;read the implementation&amp;rdquo;. Could be a tuple, module, object, structure, semaphore, macro, etc. Even the memory hierarchy pyramid in your operating systems textbook is an abstraction. They are everywhere, and they are what separates computer science (it&amp;rsquo;s about &lt;em&gt;ideas&lt;/em&gt;) from electrical engineering (it&amp;rsquo;s about &lt;em&gt;transistors&lt;/em&gt;). Thank you &lt;a href="/img/l-plp-1965.pdf"&gt;Peter Landin&lt;/a&gt; and &lt;a href="/img/m-thesis-1969.pdf"&gt;J.H. Morris&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="generational-garbage-collection"&gt;Generational Garbage Collection&lt;/h3&gt;

&lt;p&gt;I don&amp;rsquo;t know much about garbage collection. I do know that I want it, and I&amp;rsquo;m pretty sure that I wouldn&amp;rsquo;t have it (outside of research languages) without generational garbage collection. Thank you &lt;a href="/img/u-sde-1984.pdf"&gt;David Ungar&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="generic-programming"&gt;Generic Programming&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;a.k.a. the mainstream interpretations of parametric polymorphism&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The thought of programming in Java 1.4 is terrifying. Thank you &lt;a href="/img/g-thesis-1972.pdf"&gt;Jean-Yves Girard&lt;/a&gt; and &lt;a href="/img/r-cp-1974.pdf"&gt;John C. Reynolds&lt;/a&gt; and &lt;a href="http://homepages.inf.ed.ac.uk/wadler/gj/"&gt;Gilad Bracha and Martin Odersky and David Stoutamire and Philip Wadler&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="modularization"&gt;Modularization&lt;/h3&gt;

&lt;p&gt;How can humans understand large software systems? By organizing the systems into smaller components (modules, objects) with well-defined interfaces. It&amp;rsquo;s hard to imagine, but once upon a time the question of &lt;em&gt;how&lt;/em&gt; to divide a system into modules was a new research problem. Thank you &lt;a href="/img/p-tr-1971.pdf"&gt;D.L. Parnas&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="type-soundness"&gt;Type Soundness&lt;/h3&gt;

&lt;p&gt;Let me make two modest claims:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Soundness (with respect to a dynamic semantics) is a desirable property for a static type system.&lt;/li&gt;
 &lt;li&gt;A large number (at least, thousands) of working programmers agree that programming in a language with a sound, static type system is &amp;ldquo;a good thing&amp;rdquo;.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Neither of these claims were true 50 years ago. They are definitely true today. And the slogan &amp;ldquo;well typed programs do not go wrong (up to a well-defined set of runtime errors)&amp;rdquo; has become the catchphrase of PL research. Thank you &lt;a href="/img/m-jcss-1978.pdf"&gt;Robin Milner&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="honorable-mentions"&gt;Honorable Mentions&lt;/h2&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://www.paulgraham.com/thist.html"&gt;lexical scope&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="/img/d-thesis-1984.pdf"&gt;type inference&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://www.quora.com/Why-does-Kent-Beck-refer-to-the-rediscovery-of-test-driven-development"&gt;test-driven development&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Simula"&gt;object-oriented programming&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="/img/ss-tr-1975.pdf"&gt;continuation passing style&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="/img/kffd-tr-1986.pdf"&gt;hygienic macros&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;If you liked this post, you may also be interested in:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://prl.ccs.neu.edu/blog/2016/05/18/gradual-typing-across-the-spectrum/"&gt;Gradual Typing Across the Spectrum&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://jschuster.org/blog/2016/11/29/getting-started-in-programming-languages/"&gt;Getting Started in Programming Languages&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://williamjbowman.com/blog/2017/03/24/what-even-is-compiler-correctness/"&gt;What even is compiler correctness?&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description></item>
  <item>
   <title>PLT Redex: mf-apply</title>
   <link>http://prl.ccs.neu.edu/blog/2017/03/03/plt-redex-mf-apply/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2017-03-03-plt-redex-mf-apply</guid>
   <pubDate>Fri, 03 Mar 2017 08:54:20 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;The &lt;code&gt;mf-apply&lt;/code&gt; keyword is for checked metafunction application in PLT Redex. In other words, &lt;code&gt;(mf-apply f x)&lt;/code&gt; is just like &lt;code&gt;(f x)&lt;/code&gt;, but errors if &lt;code&gt;f&lt;/code&gt; is  not a previously-defined metafunction.&lt;/p&gt;

&lt;p&gt;Also, consider applying to attend &lt;em&gt;The Racket School of Semantics and Languages&lt;/em&gt; in Salt Lake City this summer: &lt;a href="http://summer-school.racket-lang.org/2017/"&gt;http://summer-school.racket-lang.org/2017/&lt;/a&gt;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h2 id="metafunctions-vs-list-patterns"&gt;Metafunctions vs. List Patterns&lt;/h2&gt;

&lt;p&gt;Have you used PLT Redex? Good! Maybe this has happened to you:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang &lt;/span&gt;&lt;span class="nn"&gt;racket&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))" style="color: inherit"&gt;require&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;redex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; -----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;;; 1. You define a language&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define-language&lt;/span&gt; &lt;span class="n"&gt;STLC&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="n"&gt;::=&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;::=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;closure&lt;/span&gt; &lt;span class="n"&gt;Λ&lt;/span&gt; &lt;span class="n"&gt;ρ&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Λ&lt;/span&gt; &lt;span class="n"&gt;::=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))" style="color: inherit"&gt;λ&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;&lt;a href="http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))" style="color: inherit"&gt;:&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;τ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;::=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="n"&gt;Λ&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;τ&lt;/span&gt; &lt;span class="n"&gt;::=&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="n"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;τ&lt;/span&gt; &lt;span class="n"&gt;&lt;a href="http://docs.racket-lang.org/ts-reference/type-ref.html#(form._((lib._typed-racket/base-env/base-types-extra..rkt)._~e2~86~92))" style="color: inherit"&gt;→&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;τ&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ρ&lt;/span&gt; &lt;span class="n"&gt;::=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Γ&lt;/span&gt; &lt;span class="n"&gt;::=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;τ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;::=&lt;/span&gt; &lt;span class="n"&gt;variable-not-otherwise-mentioned&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kd"&gt;#:binding-forms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))" style="color: inherit"&gt;λ&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;&lt;a href="http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))" style="color: inherit"&gt;:&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;τ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="kd"&gt;#:refers-to&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;;; -----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;;; 2. You define a few metafunctions&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define-metafunction&lt;/span&gt; &lt;span class="n"&gt;STLC&lt;/span&gt;
  &lt;span class="n"&gt;closure-&amp;gt;lam&lt;/span&gt; &lt;span class="n"&gt;&lt;a href="http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))" style="color: inherit"&gt;:&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/function-contracts.html#(form._((lib._racket/contract/base..rkt)._-~3e))" style="color: inherit"&gt;-&amp;gt;&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;Λ&lt;/span&gt;
  &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;closure-&amp;gt;lam&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;closure&lt;/span&gt; &lt;span class="n"&gt;Λ&lt;/span&gt; &lt;span class="n"&gt;ρ&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;Λ&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define-metafunction&lt;/span&gt; &lt;span class="n"&gt;STLC&lt;/span&gt;
  &lt;span class="n"&gt;closure-&amp;gt;env&lt;/span&gt; &lt;span class="n"&gt;&lt;a href="http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))" style="color: inherit"&gt;:&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/function-contracts.html#(form._((lib._racket/contract/base..rkt)._-~3e))" style="color: inherit"&gt;-&amp;gt;&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;ρ&lt;/span&gt;
  &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;closure-&amp;gt;env&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;closure&lt;/span&gt; &lt;span class="n"&gt;Λ&lt;/span&gt; &lt;span class="n"&gt;ρ&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;ρ&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="c1"&gt;;; -----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;;; 3. You try defining a judgment form . . .&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;define-judgment-form&lt;/span&gt; &lt;span class="n"&gt;STLC&lt;/span&gt;
  &lt;span class="kd"&gt;#:mode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;#:contract&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="n"&gt;---&lt;/span&gt; &lt;span class="n"&gt;FVS-Var&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="n"&gt;M_0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_0&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="n"&gt;M_1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_1&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;---&lt;/span&gt; &lt;span class="n"&gt;FVS-App&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M_0&lt;/span&gt; &lt;span class="n"&gt;M_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_0&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;x_1&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))" style="color: inherit"&gt;λ&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_0&lt;/span&gt; &lt;span class="n"&gt;τ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Λ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_1&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_2&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set-remove))" style="color: inherit"&gt;set-remove&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_1&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="n"&gt;x_0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
   &lt;span class="n"&gt;---&lt;/span&gt; &lt;span class="n"&gt;FVS-Λ&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="n"&gt;Λ&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_2&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="n"&gt;---&lt;/span&gt; &lt;span class="n"&gt;FVS-Integer&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="n"&gt;integer_0&lt;/span&gt; &lt;span class="p"&gt;())]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="n"&gt;---&lt;/span&gt; &lt;span class="n"&gt;FVS-Boolean&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="n"&gt;boolean_0&lt;/span&gt; &lt;span class="p"&gt;())]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;Λ&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;closure-&amp;gt;lam&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="n"&gt;Λ&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_0&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x_1&lt;/span&gt; &lt;span class="n"&gt;τ_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;closure-env&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_2&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/sets.html#(def._((lib._racket/set..rkt)._set-subtract))" style="color: inherit"&gt;set-subtract&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_0&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_1&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
   &lt;span class="n"&gt;---&lt;/span&gt; &lt;span class="n"&gt;FVS-Closure&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_2&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))])&lt;/span&gt;


&lt;span class="c1"&gt;;; -----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c1"&gt;;; 4. You test the judgment, and it mysteriously fails&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;judgment-holds&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free-variables&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;closure&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._~ce~bb))" style="color: inherit"&gt;λ&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;&lt;a href="http://docs.racket-lang.org/ts-reference/special-forms.html#(form._((lib._typed-racket/base-env/prims..rkt)._~3a))" style="color: inherit"&gt;:&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt;
                  &lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="c1"&gt;;; ==&amp;gt; #f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;WHAT HAPPENED??!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The problem is this line in the &lt;code&gt;FVS-Closure&lt;/code&gt; rule:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;   &lt;span class="n"&gt;....&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x_1&lt;/span&gt; &lt;span class="n"&gt;τ_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;closure-env&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;which checks that the list &lt;code&gt;(closure-env C)&lt;/code&gt; (whose first element is the  symbol &lt;code&gt;closure-env&lt;/code&gt; and second element is the symbol &lt;code&gt;C&lt;/code&gt;) matches the pattern  &lt;code&gt;((x_1 τ_1) ...)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Right.&lt;/p&gt;

&lt;p&gt;Of course you meant to apply the metafunction &lt;code&gt;closure-&amp;gt;env&lt;/code&gt; but made a typo. And since the syntax for metafunction application is the same as the syntax  for building a list, Redex doesn&amp;rsquo;t report an error.&lt;/p&gt;

&lt;p&gt;We can fix this code with the new &lt;a href="https://www.cs.utah.edu/plt/snapshots/current/doc/redex/The_Redex_Reference.html#%28form._%28%28lib._redex%2Freduction-semantics..rkt%29._mf-apply%29%29"&gt;&lt;code&gt;mf-apply&lt;/code&gt;&lt;/a&gt; keyword (available on &lt;a href="https://github.com/racket/racket"&gt;GitHub&lt;/a&gt; or in a &lt;a href="https://www.cs.utah.edu/plt/snapshots/"&gt;snapshot build&lt;/a&gt;):&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;   &lt;span class="n"&gt;....&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x_1&lt;/span&gt; &lt;span class="n"&gt;τ_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mf-apply&lt;/span&gt; &lt;span class="n"&gt;closure-env&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Running &lt;code&gt;raco make&lt;/code&gt; now gives a compile-time error.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  term: expected a previously defined metafunction
    at: closure-env
    in: (mf-apply closure-env C)&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="but-i-still-need-to-type-mf-apply-correctly"&gt;But I still need to type &lt;code&gt;mf-apply&lt;/code&gt; correctly!&lt;/h3&gt;

&lt;p&gt;Leif Andersen says:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;I should point out that this has the issue of you still need to type &lt;code&gt;mf-apply&lt;/code&gt; correctly. ;)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That is, if you accidentally write:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;   &lt;span class="n"&gt;....&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x_1&lt;/span&gt; &lt;span class="n"&gt;τ_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mf-applu&lt;/span&gt; &lt;span class="n"&gt;closure-env&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Then the code compiles, thinking you intend to match a list of three elements  against the pattern.&lt;/p&gt;

&lt;p&gt;Never fear, there are at least two solutions.&lt;/p&gt;

&lt;h4 id="solution-1-rename-mf-apply"&gt;Solution 1: rename &lt;code&gt;mf-apply&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;A simple fix is to rename the &lt;code&gt;mf-apply&lt;/code&gt; keyword to something shorter (and harder to mis-type):&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang &lt;/span&gt;&lt;span class="nn"&gt;racket&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))" style="color: inherit"&gt;require&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;redex&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._rename-in))" style="color: inherit"&gt;rename-in&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;redex&lt;/span&gt;
           &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mf-apply&lt;/span&gt; &lt;span class="n"&gt;MF&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h4 id="solution-2-the-mf-apply-lang-extension"&gt;Solution 2: the &lt;code&gt;mf-apply&lt;/code&gt; lang extension&lt;/h4&gt;

&lt;p&gt;A fancier solution is to install the &lt;code&gt;mf-apply&lt;/code&gt; meta-language.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ raco pkg install mf-apply&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This language updates the &lt;a href="http://docs.racket-lang.org/reference/readtables.html#%28tech._readtable%29"&gt;&lt;em&gt;readtable&lt;/em&gt;&lt;/a&gt;  to interpret S-expressions that begin with &lt;code&gt;#{&lt;/code&gt;:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang &lt;/span&gt;&lt;span class="nn"&gt;mf-apply&lt;/span&gt; &lt;span class="n"&gt;racket&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))" style="color: inherit"&gt;require&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;redex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;f&lt;/span&gt; &lt;span class="ss"&gt;x&lt;/span&gt; &lt;span class="ss"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;as a metafunction application:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang &lt;/span&gt;&lt;span class="nn"&gt;mf-apply&lt;/span&gt; &lt;span class="n"&gt;racket&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))" style="color: inherit"&gt;require&lt;/a&gt;&lt;/span&gt; &lt;span class="n"&gt;redex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mf-apply&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))" style="color: inherit"&gt;...&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;You the programmer only needs to write the &lt;code&gt;#{....}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;Source code is on GitHub:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://github.com/bennn/mf-apply"&gt;https://github.com/bennn/mf-apply&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;(It&amp;rsquo;s the simplest lang-extension I know of)&lt;/p&gt;

&lt;h2 id="what-is-plt-redex"&gt;What is PLT Redex?&lt;/h2&gt;

&lt;p&gt;PLT Redex is a library for semantics engineering. One of my favorite Redex features is it implements capture-avoiding substitution  and α-equivalence for any language with a &lt;code&gt;#:binding-forms&lt;/code&gt; specification  (such as STLC, above).&lt;/p&gt;

&lt;p&gt;You can read more:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;in the &amp;ldquo;Amb&amp;rdquo; tutorial: &lt;a href="http://docs.racket-lang.org/redex/tutorial.html"&gt;http://docs.racket-lang.org/redex/tutorial.html&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;in the &amp;ldquo;Long Tutorial&amp;rdquo;: &lt;a href="http://docs.racket-lang.org/redex/redex2015.html"&gt;http://docs.racket-lang.org/redex/redex2015.html&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;in the Redex reference manual: &lt;a href="http://docs.racket-lang.org/redex/The_Redex_Reference.html"&gt;http://docs.racket-lang.org/redex/The_Redex_Reference.html&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;on the PLT Redex website: &lt;a href="https://redex.racket-lang.org/"&gt;https://redex.racket-lang.org/&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;on GitHub: &lt;a href="https://github.com/racket/redex"&gt;https://github.com/racket/redex&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;And if you act now, you can become a &lt;em&gt;Redexan&lt;/em&gt; between July 10 and July 14  at the summer school in Salt Lake City, Utah:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://summer-school.racket-lang.org/2017/"&gt;http://summer-school.racket-lang.org/2017/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description></item>
  <item>
   <title>Datalog for Static Analysis</title>
   <link>http://prl.ccs.neu.edu/blog/2017/02/21/datalog-for-static-analysis/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2017-02-21-datalog-for-static-analysis</guid>
   <pubDate>Tue, 21 Feb 2017 12:58:27 UT</pubDate>
   <author>PRL</author>
   <description>&lt;!-- more--&gt;

&lt;p&gt;Datalog is an old DSL that frequently appears in work on static analysis. This edition of &lt;a href="/blog/2017/02/15/introducing-hopl-2017/"&gt;HOPL 2017&lt;/a&gt; explores the origins of Datalog in general, its early use in program analysis, and why Datalog remains a useful tool.&lt;/p&gt;

&lt;p&gt;Full notes:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="/blog/static/datalog-for-static-analysis.pdf"&gt;Local Copy&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="https://github.com/nuprl/hopl-s2017/tree/master/datalog-for-static-analysis"&gt;Source of Truth&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Datalog as a language was introduced by 1978 (its semantic foundations date back to 1976). It is &lt;em&gt;predicate logic&lt;/em&gt; as a database query language. The traditional view of a Datalog program is a &lt;em&gt;time invariant&lt;/em&gt; transformation over the &lt;em&gt;time varying&lt;/em&gt; data stored in an external database.&lt;/p&gt;

&lt;p&gt;In the early 1990&amp;rsquo;s, Uwe Aβmann designed a graph rewriting systems (EARS) that could:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;Uniformly express various problems in static analysis&lt;/li&gt;
 &lt;li&gt;Systematically derive efficient solutions to such problems.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;(Prior work had derived the same solutions with ad-hoc methods.) Aβmann&amp;rsquo;s system is equivalent to Datalog.&lt;/p&gt;

&lt;p&gt;In 1993, Reps used the 
 &lt;tt&gt;CORAL&lt;/tt&gt; deductive database (an implementation of Datalog) to derive an on-demand (read: lazy) implementation of program slicing from a &lt;em&gt;specification&lt;/em&gt; of the slicing problem.&lt;/p&gt;

&lt;p&gt;Both Aβmann&amp;rsquo;s and Reps work appeared in 1994. This was the first time Datalog had been used to implement a static analysis.&lt;/p&gt;

&lt;p&gt;Researchers continue to use Datalog because:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;predicate logic (specifically: Horn clauses without function symbols or negation)  is useful for expressing recursive relations &amp;hellip; and static analyses are all about recursive relations&lt;/li&gt;
 &lt;li&gt;the language separates &lt;em&gt;specifications&lt;/em&gt; from their &lt;em&gt;implementation&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;there are many techniques for efficiently serving a Datalog query&lt;/li&gt;
 &lt;li&gt;these techniques have been implemented in &lt;a href="https://developer.logicblox.com/wp-content/uploads/2016/01/logicblox-sigmod15.pdf"&gt;at least one&lt;/a&gt;  commercial Datalog engine&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;For an excellent description of how Datalog can benefit static analysis, see the introduction to &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.648.1834&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;Rep&amp;rsquo;s paper&lt;/a&gt;.&lt;/p&gt;</description></item>
  <item>
   <title>Introducing HOPL 2017</title>
   <link>http://prl.ccs.neu.edu/blog/2017/02/15/introducing-hopl-2017/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2017-02-15-introducing-hopl-2017</guid>
   <pubDate>Wed, 15 Feb 2017 01:21:37 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;p&gt;This semester at Northeastern, Matthias Felleisen is organizing the &lt;a href="http://www.ccs.neu.edu/home/matthias/7480-s17/index.html"&gt;History of Programming Languages&lt;/a&gt; seminar. Look for posts tagged &lt;code&gt;HOPL&lt;/code&gt; for updates from the lectures.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Once every 6 to 8 years (i.e., once every batch of Ph.D. students?), &lt;a href="http://www.ccs.neu.edu/home/matthias"&gt;Matthias Felleisen&lt;/a&gt; teaches History of Programming Languages. Nominally, the course is a seminar. But unlike a typical seminar course, weekly topics are not the technical details from a handful of papers. Rather:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;The primary goal is to understand (some of) the discipline as it exists today and how some of its major themes evolved.&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;
 &lt;p&gt;The secondary goal is to develop basic skills for understanding and describing research themes. Every student will learn to study a theme via a series of papers, prepare an annotated bibliography, and present the key steps in the evolution of the theme.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Themes&lt;/strong&gt; is the operative word. To set the tone, this semester started with &amp;ldquo;themes that NUPRL faculty members have developed over the many decades of their careers.&amp;rdquo;&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Matthias, &lt;em&gt;Full Abstraction: From PCF to SPCF&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;Jan Vitek, &lt;em&gt;From Encapsulation to Ownership&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;Will Clinger, &lt;em&gt;Garbage Collection vs. Manual Allocation&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;Olin Shivers, &lt;em&gt;Higher-order Flow Analysis&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;Amal Ahmed, &lt;em&gt;Logical Relations: Stepping Beyond Toy Languages&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;Matthias, &lt;em&gt;Programming Languages and Calculi&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;Jan-Willem van de Meent, &lt;em&gt;Rescoring Strategies for Probabilistic Programs&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;(upcoming) Mitch Wand, &lt;em&gt;Analysis-Based Program Transformation&lt;/em&gt;&lt;/li&gt;
 &lt;li&gt;(upcoming) Frank Tip, &lt;em&gt;Refactoring&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;At this point in the course, we are just starting with the student presentations. As these presentations happen, we plan to push updates to this blog. All presentation materials are in the course repository:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="https://github.com/nuprl/hopl-s2017"&gt;https://github.com/nuprl/hopl-s2017&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Speakers&amp;rsquo; notes and annotated bibliographies are in top-level folders in the repo. Discussion summaries and &amp;ldquo;unofficial&amp;rdquo; notes are in the top-level &lt;a href="https://github.com/nuprl/hopl-s2017/tree/master/lecture_notes"&gt;&lt;code&gt;lecture_notes/&lt;/code&gt;&lt;/a&gt; folder.&lt;/p&gt;

&lt;p&gt;The list of upcoming presentations is online (along with &lt;a href="http://www.ccs.neu.edu/home/matthias/7480-s17/Summary___Materials.html"&gt;the papers&lt;/a&gt; each presentation is based on):&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://www.ccs.neu.edu/home/matthias/7480-s17/lectures.html"&gt;http://www.ccs.neu.edu/home/matthias/7480-s17/lectures.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Blogs posts for each talk should appear 2 weeks after the talk happens.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Links to past editions of HOPL:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://www.ccs.neu.edu/home/matthias/369-s10/index.html"&gt;Spring 2010&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://www.ccs.neu.edu/home/matthias/369-s04/index.html"&gt;Spring 2004&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description></item>
  <item>
   <title>Meaningful Distinctions</title>
   <link>http://prl.ccs.neu.edu/blog/2016/10/31/meaningful-distinctions/?utm_source=by-Ben-Greenman&amp;utm_medium=RSS</link>
   <guid isPermaLink="false">urn:http-prl-ccs-neu-edu:-blog-2016-10-31-meaningful-distinctions</guid>
   <pubDate>Mon, 31 Oct 2016 17:20:33 UT</pubDate>
   <author>PRL</author>
   <description>
&lt;blockquote&gt;
 &lt;p&gt;&amp;ldquo;Meaningful distinctions deserve to be maintained.&amp;rdquo; &amp;mdash; Errett A. Bishop&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Likewise, memorable quotations deserve to be read in context. In this spirit, I am happy to present the above &amp;ldquo;basic principle&amp;rdquo; in its context:  &lt;a href="/img/sicm.pdf"&gt;&lt;em&gt;Schizophrenia in contemporary mathematics&lt;/em&gt; (pdf)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read on for a brief summary.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;hr /&gt;

&lt;p&gt;I first read the above quotation in &lt;a href="http://www.michaelbeeson.com/research/papers/BishopForeword.pdf"&gt;Michael Beeson&amp;rsquo;s introduction&lt;/a&gt; to the 2012 edition of Bishop&amp;rsquo;s &lt;a href="https://www.amazon.com/Foundations-Constructive-Analysis-Errett-Bishop/dp/4871877140"&gt;&lt;em&gt;Foundations of Constructive Analysis&lt;/em&gt;&lt;/a&gt;. That was two years ago.&lt;/p&gt;

&lt;p&gt;Last month, I tried to find its context. &lt;a href="https://books.google.com/books?id=uPx8tGCaxzUC&amp;amp;pg=PA214&amp;amp;lpg=PA214&amp;amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;amp;source=bl&amp;amp;ots=cWjwOTnNuT&amp;amp;sig=wN143wNyfXtMFLGABBQM-22aSOQ&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIHjAA#v=onepage&amp;amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;amp;f=false"&gt;Many&lt;/a&gt; &lt;a href="https://www.jstor.org/stable/2589553"&gt;other&lt;/a&gt; &lt;a href="https://books.google.com/books?id=J4DkBwAAQBAJ&amp;amp;pg=PA6&amp;amp;lpg=PA6&amp;amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;amp;source=bl&amp;amp;ots=KYkrkBrJd_&amp;amp;sig=AAK1A_uIkQlVcYCY1TFljfA3CqA&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIJTAC#v=onepage&amp;amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;amp;f=false"&gt;uses&lt;/a&gt; &lt;a href="https://books.google.com/books?id=oN5nsPkXhhsC&amp;amp;pg=PR6&amp;amp;lpg=PR6&amp;amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;amp;source=bl&amp;amp;ots=4doTufVdsy&amp;amp;sig=u3e_Z_xdN-tjt9p1eqQ88juA5Ns&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIKDAD#v=onepage&amp;amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;amp;f=false"&gt;of&lt;/a&gt; &lt;a href="https://books.google.com/books?id=GR44SKXCZJsC&amp;amp;pg=RA1-PA199&amp;amp;lpg=RA1-PA199&amp;amp;dq=meaningful+distinctions+deserve+to+be+maintained&amp;amp;source=bl&amp;amp;ots=lNpzR5QV7h&amp;amp;sig=IGg2Q_KtreSAhrbSJxsV7mQ8xok&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwjPwt2HmYbQAhWE6IMKHU5rB8YQ6AEIMDAF#v=onepage&amp;amp;q=meaningful%20distinctions%20deserve%20to%20be%20maintained&amp;amp;f=false"&gt;the&lt;/a&gt; &lt;a href="http://www.math.canterbury.ac.nz/php/groups/cm/faq/"&gt;quote&lt;/a&gt; &lt;a href="http://www.ben-sherman.net/aux/evident-logic.pdf"&gt;cited&lt;/a&gt; a &lt;em&gt;Schizophrenia in comtemporary mathematics&lt;/em&gt;, but I could not find an electronic copy. (It turns out, the AMS Bookstore page for &lt;a href="http://bookstore.ams.org/conm-39"&gt;&lt;em&gt;Erret Bishop: Reflections on Him and His Research&lt;/em&gt;&lt;/a&gt; includes a facsimile.)&lt;/p&gt;

&lt;p&gt;Lest anyone else be tempted to conjure the ancient magic of inter-library loan, here is a scan of the pages I borrowed. Thanks to the University of Toledo for supplying the hard copy.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt; &lt;a href="/img/sicm.pdf"&gt;prl.ccs.neu.edu/img/sicm.pdf&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The document is Bishop&amp;rsquo;s &amp;ldquo;feeling for the philosophical issues involved&amp;rdquo; in constructive mathematics. First, Bishop lists &amp;ldquo;schizophrenic attributes&amp;rdquo; (trouble spots) of contemporary mathematics. Next, he gives basic principles of constructivism and Brouwer&amp;rsquo;s interpretation of the logical quantifiers. Along the way, and as a source of examples, Bishop describes integers, sets, and real numbers. The emphasis is always on common-sense meaning and finite constructions.&lt;/p&gt;

&lt;p&gt;After a brief summary and reflection, the last ten pages list recent advances in constructive mathematics and upcoming tasks. The open tasks are particularly interesting:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;systematically develop (constructive) algebra&lt;/li&gt;
 &lt;li&gt;give a constructive foundation for general topology&lt;/li&gt;
 &lt;li&gt;engage with the deeper &amp;ldquo;meaning of mathematics&amp;rdquo;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;The popular quote on &amp;ldquo;Meaningful Distinctions&amp;rdquo; appears early in the paper, as one of Bishop&amp;rsquo;s four principles that &amp;ldquo;stand out as basic&amp;rdquo; to the philosophy of constructivism:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;A. Mathematics is common sense.&lt;/p&gt;
 &lt;p&gt;B. Do not ask whether a statement is true until you know what it means.&lt;/p&gt;
 &lt;p&gt;C. A proof is any completely convincing argument.&lt;/p&gt;
 &lt;p&gt;D. Meaningful distinctions deserve to be maintained.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I had no idea that D was &amp;ldquo;a principle&amp;rdquo;, or that it had three siblings.&lt;/p&gt;

&lt;p&gt;To further tempt you into reading the whole truth, here are some of my favorite phrases:&lt;/p&gt;

&lt;blockquote&gt;
 &lt;ul&gt;
  &lt;li&gt;One suspects that the majority of pure mathematicians &amp;hellip; ignore as much content as they possibly can.&lt;/li&gt;
  &lt;li&gt;We have geared ourselves to producing research mathematicians who will begin to write papers as soon as possible.  This anti-social and anti-intellectual process defeats even its own narrow ends.&lt;/li&gt;
  &lt;li&gt;&amp;hellip; truth is not a source of trouble to the constructivist, because of his emphasis on meaning.&lt;/li&gt;
  &lt;li&gt;&amp;hellip; guided primarily by considerations of content rather than elegance and formal attractiveness &amp;hellip;&lt;/li&gt;
  &lt;li&gt;Let me tell you what a smart sequence will do.&lt;/li&gt;
  &lt;li&gt;Classical mathematics fails to observe meaningful distinctions having to do with integers.&lt;/li&gt;
  &lt;li&gt;Constructive mathematics does not postulate a pre-existent universe, with objects lying around waiting to be collected and grouped into sets, like shells on a beach.&lt;/li&gt;
  &lt;li&gt;It might be worthwhile to investigate the possibility that constructive mathematics would afford a solid philosophical basis for the theory of computation &amp;hellip;&lt;/li&gt;
  &lt;li&gt;&amp;hellip; if the product of two real numbers is 0, we are not entitled to conclude that one of them is 0.&lt;/li&gt;
  &lt;li&gt;It is fair to say that almost nobody finds his proof intelligible.&lt;/li&gt;
  &lt;li&gt;Mathematics is such a complicated activity that disagreements are bound to arise.&lt;/li&gt;
  &lt;li&gt;Algebraic topology, at least on the elementary level, should not be too difficult to constructivize.&lt;/li&gt;
  &lt;li&gt;I hope all this accords with your common sense, as it does with mine.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;

&lt;p&gt;Now go find their context!&lt;/p&gt;</description></item></channel></rss>